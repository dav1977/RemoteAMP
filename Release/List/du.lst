###############################################################################
#
# IAR C/C++ Compiler V6.40.1.741 for Atmel AVR            23/Feb/2017  19:39:30
# Copyright 1996-2014 IAR Systems AB.
#
#    Source file  =  F:\Dulov\RemoteAMP\du.c
#    Command line =  
#        F:\Dulov\RemoteAMP\du.c --cpu=m8 -ms -o
#        F:\Dulov\RemoteAMP\Release\Obj\ -D NDEBUG -lC
#        F:\Dulov\RemoteAMP\Release\List\ -lA F:\Dulov\RemoteAMP\Release\List\
#        --initializers_in_flash --no_clustering -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 512 --dlib --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 6.5\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -Ohz
#        --mfc F:\Dulov\RemoteAMP\main.c F:\Dulov\RemoteAMP\SoftTimers.c
#        F:\Dulov\RemoteAMP\usart.c
#    List file    =  F:\Dulov\RemoteAMP\Release\List\du.lst
#    Object file  =  F:\Dulov\RemoteAMP\Release\Obj\du.r90
#
###############################################################################

F:\Dulov\RemoteAMP\du.c
      1          //***************************************************************************
      2          //
      3          //  Author(s)...: dav COBRA 
      4          //
      5          //  Target(s)...: ATMega8
      6          //
      7          //  Compiler....: 6 40
      8          //
      9          //  Description.: Универсальный ДЕКОДЕР ДУ v1.25
     10          //
     11          //  Data........: 2014
     12          //
     13          //***************************************************************************
     14          #include <stdbool.h>//поддержка bool
     15          #include "iom8.h"//<ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_ACSR
   \                     _A_ACSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x44
   \   union <unnamed> volatile __io _A_TCNT2
   \                     _A_TCNT2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x45
   \   union <unnamed> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x48
   \   union <unnamed> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x58
   \   union <unnamed> volatile __io _A_TIFR
   \                     _A_TIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_GICR
   \                     _A_GICR:
   \   00000000                      DS8 1
     16          #include <inavr.h>
     17          #include <intrinsics.h> 
     18          #include "init.h"
     19          #include "usart.h"
     20          #include "main.h"
     21          #include "eeprom.h"

   \                                 In  segment EEPROM_N, align 1, keep-with-next
   \   unsigned int __eeprom k[120]
   \                     k:
   \   00000000                      DS8 240

   \                                 In  segment EEPROM_N, align 1, keep-with-next
   \   unsigned char __eeprom fmode
   \                     fmode:
   \   00000000                      DS8 1

   \                                 In  segment EEPROM_N, align 1, keep-with-next
   \   unsigned char __eeprom modegro
   \                     modegro:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod1
   \                     cod1:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod2
   \                     cod2:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod3
   \                     cod3:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod4
   \                     cod4:
   \   00000000                      DS8 2
     22          #include "du.h"
     23          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     24            static uchar  perepoln=0;//кол-во переполнений счетчика
   \                     ??perepoln:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     25            static uchar t1=0,t2=0;
   \                     ??t1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??t2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     26            static bool ini; 
   \                     ??ini:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     27            uint dim1[MAX],dim2[MAX];
   \                     dim1:
   \   00000000                      DS8 100

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     dim2:
   \   00000000                      DS8 100

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     28            char ct=0;
   \                     ct:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     29            uint minimallen;    
   \                     minimallen:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     30            float len[MAX];
   \                     len:
   \   00000000                      DS8 200

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     31            static bool intok,big;
   \                     ??intok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??big:
   \   00000000                      DS8 1
     32           

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     33            bool cod_ok=0;
   \                     cod_ok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     34            uchar c1,c2,c3;
   \                     c1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     c2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     c3:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     35            char ind=1;
   \                     ind:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for ind>`
     36          
     37           //*****************************************************************
     38           // init
     39           //*****************************************************************

   \                                 In  segment CODE, align 2, keep-with-next
     40             void du_init(void)
   \                     du_init:
     41             {
     42               ini=1;  intok=0;
   \   00000000   E001               LDI     R16, 1
   \   00000002   9300....           STS     ??ini, R16
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     ??intok, R16
     43               //TCCR1B = (0<<CS02)|(1<<CS01)|(1<<CS00); //пуск таймера
     44               TCCR1B = (0<<CS02)|(0<<CS01)|(1<<CS00); //пуск таймера
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   BD0E               OUT     0x2E, R16
     45               ct=0;
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     ct, R16
     46             }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_TCCR1B
     47           //*****************************************************************
     48           //  INT
     49           //*****************************************************************
     50          //прерывание при изменении сигнала на ноге
     51          #pragma vector = INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
     52          __interrupt void funINT0_vect(void)
   \                     funINT0_vect:
     53          {
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
     54            intok=1; 
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     ??intok, R16
     55            //if (readint!=0){  last=TCNT1L;   readint=0; }
     56            t1 = TCNT1L;  t2 = TCNT1H; 
   \   0000000C   B50C               IN      R16, 0x2C
   \   0000000E   9300....           STS     ??t1, R16
   \   00000012   B50D               IN      R16, 0x2D
   \   00000014   9300....           STS     ??t2, R16
     57            if (t1!=0) { TCNT1H=0;TCNT1L=0;}
   \   00000018   9100....           LDS     R16, ??t1
   \   0000001C   2300               TST     R16
   \   0000001E   F019               BREQ    ??funINT0_vect_0
   \   00000020   E000               LDI     R16, 0
   \   00000022   BD0D               OUT     0x2D, R16
   \   00000024   BD0C               OUT     0x2C, R16
     58               
     59          }
   \                     ??funINT0_vect_0:
   \   00000026   BF1F               OUT     0x3F, R17
   \   00000028   9109               LD      R16, Y+
   \   0000002A   9119               LD      R17, Y+
   \   0000002C   9518               RETI
   \   0000002E                      REQUIRE _A_TCNT1
     60          //*****************************************************************
     61          //  Анализ прерывания
     62          //*****************************************************************

   \                                 In  segment CODE, align 2, keep-with-next
     63          void analiz_INT()
   \                     analiz_INT:
     64          {
     65            // static bool state;
     66                // if (state==1) {RES(PORTB,5); state=0; }   else {SET(PORTB,5); state=1;}
     67          
     68                  dim1[ct]=t1;  dim2[ct]=t2; ct++;
   \   00000000   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_42:
   \   00000002   E012               LDI     R17, 2
   \   00000004   9F01               MUL     R16, R17
   \   00000006   9100....           LDS     R16, ??t1
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_157:
   \   0000000E   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_331:
   \   00000010   9100....           LDS     R16, ??t2
   \   00000014   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_160:
   \   00000016   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_332:
   \   00000018   ....               LDI     R30, LOW(ct)
   \   0000001A   ....               LDI     R31, (ct) >> 8
   \   0000001C   ....               RCALL   ??Subroutine139_0
     69                  if (ct>=MAX-1) ct--;  //слишком длинная посылка переписываем каждый раз последний
   \                     ??CrossCallReturnLabel_327:
   \   0000001E   3301               CPI     R16, 49
   \   00000020   F010               BRCS    ??analiz_INT_0
   \   00000022   950A               DEC     R16
   \   00000024   8300               ST      Z, R16
     70                  intok=0;
   \                     ??analiz_INT_0:
   \   00000026   9310....           STS     ??intok, R17
     71          
     72          
     73          }
   \   0000002A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               SUBI    R30, LOW((-(dim2) & 0xFFFF))
   \   00000004   ....               SBCI    R31, (-(dim2) & 0xFFFF) >> 8
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               SUBI    R30, LOW((-(dim1) & 0xFFFF))
   \   00000004   ....               SBCI    R31, (-(dim1) & 0xFFFF) >> 8
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   9100....           LDS     R16, ct
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine138_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine139_0:
   \   00000000   8100               LD      R16, Z
   \   00000002   9503               INC     R16
   \   00000004   ....               RJMP    ??Subroutine138_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine141_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   9508               RET
     74          //*****************************************************************
     75          //  Конец кода на приемнике
     76          //*****************************************************************

   \                                 In  segment CODE, align 2, keep-with-next
     77          void PEREP()
   \                     PEREP:
     78          {
   \   00000000   ....               RCALL   ?PROLOGUE8_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
     79           //static bool state2;
     80           uchar i;
     81           
     82            //if (state2==1) {RES(PORTB,2); state2=0; }   else {SET(PORTB,2); state2=1;}
     83                 
     84                cod1=0;cod2=0;cod3=0; 
   \   00000002   ....               RCALL   ?Subroutine11
     85                c1=0; c2=0; c3=0;  //sst=0;
   \                     ??CrossCallReturnLabel_28:
   \   00000004   9300....           STS     c1, R16
   \   00000008   9300....           STS     c2, R16
   \   0000000C   9300....           STS     c3, R16
     86                minimallen=65535;   
   \   00000010   EF0F               LDI     R16, 255
   \   00000012   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_170:
   \   00000014   ....               RCALL   ?Subroutine94
     87               
     88                if (ct>(MAX-1)) {  rprintfStr(" error ct big ="); rprintfFloat(6,  ct); }
   \                     ??CrossCallReturnLabel_163:
   \   00000016   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_43:
   \   00000018   3302               CPI     R16, 50
   \   0000001A   F028               BRCS    ??CrossCallReturnLabel_302
   \   0000001C   ....               LDI     R16, LOW(`?<Constant " error ct big =">`)
   \   0000001E   ....               LDI     R17, (`?<Constant " error ct big =">`) >> 8
   \   00000020   ....               RCALL   rprintfStr
   \   00000022   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_44:
   \   00000024   ....               RCALL   ?Subroutine21
     89                          
     90                if ((ct>5 && big==0)|| big==1) 
   \                     ??CrossCallReturnLabel_302:
   \   00000026   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_45:
   \   00000028   3006               CPI     R16, 6
   \   0000002A   F020               BRCS    ??PEREP_0
   \   0000002C   9100....           LDS     R16, ??big
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??PEREP_1
   \                     ??PEREP_0:
   \   00000034   9100....           LDS     R16, ??big
   \   00000038   2300               TST     R16
   \   0000003A   F189               BREQ    ??PEREP_2
     91                {//от 5 посылок анализируем остальное шум
     92                  
     93                    for (i=1; i<ct; i++) //ищем миимальную длину
   \                     ??PEREP_1:
   \   0000003C   E081               LDI     R24, 1
   \   0000003E   C016               RJMP    ??PEREP_3
     94                    {  
     95                          len[i]=( dim1[i]+ (256*dim2[i])  );           
   \                     ??PEREP_4:
   \   00000040   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_48:
   \   00000042   E004               LDI     R16, 4
   \   00000044   9F80               MUL     R24, R16
   \   00000046   ....               RCALL   ??Subroutine135_0
   \                     ??CrossCallReturnLabel_294:
   \   00000048   8240               ST      Z, R4
   \   0000004A   8311               STD     Z+1, R17
   \   0000004C   8322               STD     Z+2, R18
   \   0000004E   8333               STD     Z+3, R19
     96                          if (len[i]>900  && len[i]<(float)minimallen)  minimallen=(uint)len[i];
   \   00000050   E041               LDI     R20, 1
   \   00000052   E050               LDI     R21, 0
   \   00000054   E661               LDI     R22, 97
   \   00000056   E474               LDI     R23, 68
   \   00000058   2D04               MOV     R16, R4
   \   0000005A   ....               RCALL   ?F_CMP_GE_L04
   \   0000005C   F430               BRCC    ??CrossCallReturnLabel_333
   \   0000005E   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_190:
   \   00000060   ....               RCALL   ?F_CMP_LT_L04
   \   00000062   F418               BRCC    ??CrossCallReturnLabel_333
   \   00000064   ....               RCALL   ?F2SL_L04
   \   00000066   ....               RCALL   ?Subroutine95
     97                    }
   \                     ??CrossCallReturnLabel_171:
   \   00000068   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_333:
   \   0000006A   9583               INC     R24
   \                     ??PEREP_3:
   \   0000006C   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_46:
   \   0000006E   1780               CP      R24, R16
   \   00000070   F338               BRCS    ??PEREP_4
     98               
     99                     for (i=1; i<ct; i++) 
   \   00000072   E081               LDI     R24, 1
   \   00000074   C011               RJMP    ??PEREP_5
    100                     { //for 
    101                       uint tr;
    102                       tr=( dim1[i]+ (256*dim2[i]));
    103                       len[i]=(float)tr/minimallen;       
   \                     ??PEREP_6:
   \   00000076   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_49:
   \   00000078   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_191:
   \   0000007A   ....               RCALL   ?F_DIV_L04
   \   0000007C   E044               LDI     R20, 4
   \   0000007E   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_295:
   \   00000080   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_334:
   \   00000082   8322               STD     Z+2, R18
   \   00000084   8333               STD     Z+3, R19
    104                       if (len[i]!=0)   coding(i, pr);
   \   00000086   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_378:
   \   00000088   ....               RCALL   ?F_CMP_EQ_L04
   \   0000008A   F029               BREQ    ??PEREP_7
   \   0000008C   9120....           LDS     R18, pr
   \   00000090   2F08               MOV     R16, R24
   \   00000092   E010               LDI     R17, 0
   \   00000094   ....               RCALL   coding
    105                     }//for
   \                     ??PEREP_7:
   \   00000096   9583               INC     R24
   \                     ??PEREP_5:
   \   00000098   ....               RCALL   ?Subroutine22
    106                }//от 5 посылок анализируем 
   \                     ??CrossCallReturnLabel_47:
   \   0000009A   1780               CP      R24, R16
   \   0000009C   F360               BRCS    ??PEREP_6
    107                
    108                //очистка
    109                 for (i=0; i<MAX; i++) {dim1[i]=0;dim2[i]=0;len[i]=0;}
   \                     ??PEREP_2:
   \   0000009E   E080               LDI     R24, 0
   \   000000A0   E044               LDI     R20, 4
   \                     ??PEREP_8:
   \   000000A2   E002               LDI     R16, 2
   \   000000A4   9F80               MUL     R24, R16
   \   000000A6   E000               LDI     R16, 0
   \   000000A8   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_158:
   \   000000AA   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_164:
   \   000000AC   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_161:
   \   000000AE   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_165:
   \   000000B0   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_296:
   \   000000B2   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_166:
   \   000000B4   8302               STD     Z+2, R16
   \   000000B6   8303               STD     Z+3, R16
   \   000000B8   9583               INC     R24
   \   000000BA   3382               CPI     R24, 50
   \   000000BC   F390               BRCS    ??PEREP_8
    110                 perepoln=0;  t1=0; t2=0; ct=0; big=0;     
   \   000000BE   9300....           STS     ??perepoln, R16
   \   000000C2   9300....           STS     ??t1, R16
   \   000000C6   9300....           STS     ??t2, R16
   \   000000CA   9300....           STS     ct, R16
   \   000000CE   9300....           STS     ??big, R16
    111                 
    112              if (pr==1 && cod_ok!=0)     
   \   000000D2   9100....           LDS     R16, pr
   \   000000D6   3001               CPI     R16, 1
   \   000000D8   F481               BRNE    ??CrossCallReturnLabel_291
   \   000000DA   9100....           LDS     R16, cod_ok
   \   000000DE   2300               TST     R16
   \   000000E0   F061               BREQ    ??CrossCallReturnLabel_291
    113               {//diag
    114                        rprintfStr("  /   cod1= ");
   \   000000E2   ....               LDI     R16, LOW(`?<Constant "  /   cod1= ">`)
   \   000000E4   ....               LDI     R17, (`?<Constant "  /   cod1= ">`) >> 8
   \   000000E6   ....               RCALL   ?Subroutine30
    115                        rprintfFloat(6,  cod1);
    116                        rprintfStr("/   cod2= ");
   \                     ??CrossCallReturnLabel_308:
   \   000000E8   ....               LDI     R16, LOW(`?<Constant "/   cod2= ">`)
   \   000000EA   ....               LDI     R17, (`?<Constant "/   cod2= ">`) >> 8
   \   000000EC   ....               RCALL   ?Subroutine42
    117                        rprintfFloat(6,  cod2);
   \                     ??CrossCallReturnLabel_365:
   \   000000EE   ....               RCALL   ??Subroutine137_0
    118                        rprintfStr("/   cod3= ");
   \                     ??CrossCallReturnLabel_306:
   \   000000F0   ....               LDI     R16, LOW(`?<Constant "/   cod3= ">`)
   \   000000F2   ....               LDI     R17, (`?<Constant "/   cod3= ">`) >> 8
   \   000000F4   ....               RCALL   ?Subroutine44
    119                        rprintfFloat(6,  cod3);
   \                     ??CrossCallReturnLabel_357:
   \   000000F6   ....               RCALL   ??Subroutine137_0
    120                        ent;
   \                     ??CrossCallReturnLabel_305:
   \   000000F8   ....               RCALL   ?Subroutine131
    121                                          
    122               }//diag
    123           
    124          }
   \                     ??CrossCallReturnLabel_291:
   \   000000FA   E0E8               LDI     R30, 8
   \   000000FC   ....               RJMP    ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_173:
   \   00000002   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_312:
   \   00000004                      REQUIRE ?Subroutine99
   \   00000004                      ;               // Fall through to label ?Subroutine99

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   0182               MOVW    R17:R16, R5:R4
   \   00000002   0193               MOVW    R19:R18, R7:R6
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004                      REQUIRE ??Subroutine133_0
   \   00000004                      ;               // Fall through to label ??Subroutine133_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine133_0:
   \   00000000   E020               LDI     R18, 0
   \   00000002                      REQUIRE ??Subroutine134_0
   \   00000002                      ;               // Fall through to label ??Subroutine134_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine134_0:
   \   00000000   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_322:
   \   00000002   ....               RJMP    ?Subroutine117

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   ....               LDI     R30, LOW(minimallen)
   \   00000002   ....               LDI     R31, (minimallen) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   9F84               MUL     R24, R20
   \   00000002                      REQUIRE ??Subroutine135_0
   \   00000002                      ;               // Fall through to label ??Subroutine135_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine135_0:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               SUBI    R30, LOW((-(len) & 0xFFFF))
   \   00000004   ....               SBCI    R31, (-(len) & 0xFFFF) >> 8
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   E002               LDI     R16, 2
   \   00000002   9F80               MUL     R24, R16
   \   00000004   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_159:
   \   00000006   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_185:
   \   00000008   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_162:
   \   0000000A   8130               LD      R19, Z
   \   0000000C   E020               LDI     R18, 0
   \   0000000E   0F13               ADD     R17, R19
   \   00000010   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_318:
   \   00000012   0128               MOVW    R5:R4, R17:R16
   \   00000014   0139               MOVW    R7:R6, R19:R18
   \   00000016   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_207:
   \   00000004                      REQUIRE ?Subroutine130
   \   00000004                      REQUIRE ??Subroutine137_0
   \   00000004                      ;               // Fall through to label ??Subroutine137_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine137_0:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_313:
   \   00000002                      REQUIRE ?Subroutine130
   \   00000002                      ;               // Fall through to label ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   E006               LDI     R16, 6
   \   00000002   ....               RJMP    rprintfFloat

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   ....               LDI     R30, LOW(cod1)
   \   00000002   ....               LDI     R31, (cod1) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_206:
   \   00000004   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_168:
   \   00000006   ....               LDI     R30, LOW(cod2)
   \   00000008   ....               LDI     R31, (cod2) >> 8
   \   0000000A   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_169:
   \   0000000C   ....               LDI     R30, LOW(cod3)
   \   0000000E   ....               LDI     R31, (cod3) >> 8
   \   00000010                      REQUIRE ?Subroutine94
   \   00000010                      ;               // Fall through to label ?Subroutine94

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   8300               ST      Z, R16
   \   00000002   8301               STD     Z+1, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine98:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_317:
   \   00000002   ....               RJMP    ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_321:
   \   00000002                      REQUIRE ?Subroutine117
   \   00000002                      ;               // Fall through to label ?Subroutine117

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
   \   00000002   01B9               MOVW    R23:R22, R19:R18
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   E00D               LDI     R16, 13
   \   00000002   ....               RJMP    USART_SendChar

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002                      REQUIRE ??Subroutine144_0
   \   00000002                      ;               // Fall through to label ??Subroutine144_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine144_0:
   \   00000000   ....               LDI     R30, LOW(cod3)
   \   00000002   ....               LDI     R31, (cod3) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002                      REQUIRE ??Subroutine145_0
   \   00000002                      ;               // Fall through to label ??Subroutine145_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine145_0:
   \   00000000   ....               LDI     R30, LOW(cod2)
   \   00000002   ....               LDI     R31, (cod2) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   E040               LDI     R20, 0
   \   00000002                      REQUIRE ??Subroutine146_0
   \   00000002                      ;               // Fall through to label ??Subroutine146_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine146_0:
   \   00000000   E050               LDI     R21, 0
   \   00000002   E060               LDI     R22, 0
   \   00000004   E070               LDI     R23, 0
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E020               LDI     R18, 0
   \   00000004                      REQUIRE ?Subroutine120
   \   00000004                      ;               // Fall through to label ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   E030               LDI     R19, 0
   \   00000002   ....               RJMP    ?UL2F_L04
    125          
    126          ///////////////////////////////////////////////////////////////
    127          //  main
    128          //////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    129            bool remote_main() 
   \                     remote_main:
    130            {   
    131              cod_ok=0;//признак готовности кода
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     cod_ok, R16
    132              
    133              if (ini!=1) du_init();    
   \   00000006   9100....           LDS     R16, ??ini
   \   0000000A   2300               TST     R16
   \   0000000C   F409               BRNE    ??remote_main_0
   \   0000000E   ....               RCALL   du_init
    134              if (intok!=0) analiz_INT();  //INT событие произошло
   \                     ??remote_main_0:
   \   00000010   9100....           LDS     R16, ??intok
   \   00000014   2300               TST     R16
   \   00000016   F009               BREQ    ??remote_main_1
   \   00000018   ....               RCALL   analiz_INT
    135              
    136              if (perepoln!=0 ) 
   \                     ??remote_main_1:
   \   0000001A   9100....           LDS     R16, ??perepoln
   \   0000001E   2300               TST     R16
   \   00000020   F009               BREQ    ??remote_main_2
    137              {//получили переполнение, значит сигнал закончился
    138                PEREP();
   \   00000022   ....               RCALL   PEREP
    139              }   
    140               return(cod_ok);  
   \                     ??remote_main_2:
   \   00000024   9100....           LDS     R16, cod_ok
   \   00000028   9508               RET
    141            }
    142          
    143          
    144          ///////////////////////////////////////////////////////////////////       
    145          //                             кодировка
    146          ///////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    147            void coding(uint i, uchar pr)  
   \                     coding:
    148            {
   \   00000000   ....               RCALL   ?PROLOGUE10_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002   01C8               MOVW    R25:R24, R17:R16
   \   00000004   2E62               MOV     R6, R18
    149           
    150              
    151              float v=len[i];
   \   00000006   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_193:
   \   00000008   ....               LDI     R26, LOW(len)
   \   0000000A   ....               LDI     R27, (len) >> 8
   \   0000000C   0FA0               ADD     R26, R16
   \   0000000E   1FB1               ADC     R27, R17
   \   00000010   900D               LD      R0, X+
   \   00000012   901D               LD      R1, X+
   \   00000014   902D               LD      R2, X+
   \   00000016   903C               LD      R3, X
   \   00000018   9713               SBIW    R27:R26, 3
    152                       
    153                      //  sst=sst+v;
    154                 if (i>1) {
   \   0000001A   3082               CPI     R24, 2
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   0790               CPC     R25, R16
   \   00000020   F408               BRCC    $+2+2
   \   00000022   C0F1               RJMP    ??CrossCallReturnLabel_197
    155                    
    156            //-------------   версия  больше-меньше  ------------------
    157                        //  if (len[i]>len[i-1])  cod1+=1;
    158                   
    159                       //  if (len[i]<=len[i-1]) cod1+=3;
    160             /*        
    161              if (ind==4) { 
    162                                 if (len[i]>len[i-1]) { SET(cod4,c4); }
    163                                // else cod4<<=1;
    164                                 c4++;
    165                                 if (c4>=15) ind=5;
    166                              }
    167                   
    168                        
    169          
    170                     if (ind==3) { 
    171                                 if (len[i]>len[i-1]) { SET(cod3,c3); }
    172                                // else cod3<<=1;
    173                                 c3++;
    174                                 if (c3>=15) ind=4;
    175                              }
    176                  
    177                   
    178                     if (ind==2) { 
    179                                 if (len[i]>len[i-1]) { SET(cod2,c2); }
    180                                // else cod2<<=1;
    181                                 c2++;
    182                                 if (c2>=15) ind=3;
    183                              }
    184                   
    185                   if (ind==1) { 
    186                     if (len[i]>len[i-1]) { SET(cod1,c1); }
    187                                 //else cod1<<=1;
    188                                 c1++;
    189                                 if (c1>=15) ind=2;
    190                              }
    191                   
    192                */ 
    193                   
    194                 /*  
    195                   if (ind==4) { 
    196                     if (len[i]<3) { SET(cod4,c4);c4++; }
    197                     if (len[i]>=3 && len[i]<5)  {  c4++;  c4++;}
    198                     if (len[i]>=5 && len[i]<25) { SET(cod4,c4); c4++;    if (c4<=15)  SET(cod4,c4);  c4++;}
    199                     if (len[i]>=25)  {  c4++;  c4++; c4++;}
    200                                 if (c4>=15) ind=0;
    201                               }
    202                */
    203                   
    204                   
    205                //-----   версия v2  по относительной длине -------  
    206          #define   set1 SET(cod1,c1);c1++   
    207          #define   set2 SET(cod2,c2);c2++  
    208          #define   set3 SET(cod3,c3);c3++  
    209                   
    210                  
    211                 //ДЕЛАТЬ точность менее 0.5 опасно, т.к. ШУМ измерения
    212                    if (ind==3) { 
   \   00000024   012C               MOVW    R5:R4, R25:R24
   \   00000026   0C44               LSL     R4
   \   00000028   1C55               ROL     R5
   \   0000002A   9100....           LDS     R16, ind
   \   0000002E   3003               CPI     R16, 3
   \   00000030   F009               BREQ    $+2+2
   \   00000032   C041               RJMP    ??coding_0
    213                      
    214                      if (v<1.5) cod3=cod3+i;
   \   00000034   9140....           LDS     R20, c3
   \   00000038   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   0000003A   F4B8               BRCC    ??coding_1
   \   0000003C   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_359:
   \   0000003E   ....               RCALL   ?Subroutine27
    215                     if (v>=1.5 && v<2) { set3; c3++;    } else
    216                     if (v>=2 && v<3)   { set3; cod3=cod3+i;  c3++; } else
   \                     ??CrossCallReturnLabel_344:
   \   00000040   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_77:
   \   00000042   F410               BRCC    ??coding_2
   \   00000044   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_88:
   \   00000046   F058               BRCS    ??coding_3
    217                     if (v>=3 && v<5)   { set3; cod3=cod3+i+i;  c3++; if (c3<=14) {set3; cod3=cod3+i;   c3++; }  }   else                                  
   \                     ??coding_2:
   \   00000048   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_91:
   \   0000004A   F4B0               BRCC    ??coding_4
   \   0000004C   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_94:
   \   0000004E   F4A0               BRCC    ??coding_4
   \   00000050   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_360:
   \   00000052   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_50:
   \   00000054   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_335:
   \   00000056   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_299:
   \   00000058   8300               ST      Z, R16
   \   0000005A   300F               CPI     R16, 15
   \   0000005C   F4B8               BRCC    ??coding_5
   \                     ??coding_3:
   \   0000005E   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_361:
   \   00000060   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_97:
   \   00000062   9140....           LDS     R20, c3
   \   00000066   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00000068   C005               RJMP    ??CrossCallReturnLabel_336
   \                     ??coding_1:
   \   0000006A   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_83:
   \   0000006C   F748               BRCC    ??CrossCallReturnLabel_344
   \   0000006E   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_362:
   \   00000070   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_174:
   \   00000072   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_336:
   \   00000074   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_300:
   \   00000076   C009               RJMP    ??coding_6
    218                     if (v>5 && v<7)    { c3++;   if (c3<=15)  c3++; }
   \                     ??coding_4:
   \   00000078   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_72:
   \   0000007A   F440               BRCC    ??coding_5
   \   0000007C   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_80:
   \   0000007E   F430               BRCC    ??coding_5
   \   00000080   ....               LDI     R30, LOW(c3)
   \   00000082   ....               LDI     R31, (c3) >> 8
   \   00000084   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_53:
   \   00000086   F410               BRCC    ??coding_5
   \   00000088   9503               INC     R16
   \                     ??coding_6:
   \   0000008A   8300               ST      Z, R16
    219                   
    220                      
    221                     if (c3>=16) {ind=1; cod1=cod1<<2; cod2=cod2<<2; c1=0; c2=0; c3=0;}//пошли по кругу
   \                     ??coding_5:
   \   0000008C   9100....           LDS     R16, c3
   \   00000090   3100               CPI     R16, 16
   \   00000092   F408               BRCC    $+2+2
   \   00000094   C07F               RJMP    ??coding_7
   \   00000096   E001               LDI     R16, 1
   \   00000098   9300....           STS     ind, R16
   \   0000009C   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_198:
   \   0000009E   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_194:
   \   000000A0   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_337:
   \   000000A2   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_367:
   \   000000A4   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_195:
   \   000000A6   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_338:
   \   000000A8   9350....           STS     c1, R21
   \   000000AC   9350....           STS     c2, R21
   \   000000B0   9350....           STS     c3, R21
   \   000000B4   C039               RJMP    ??coding_8
    222                  
    223                               }
    224                   
    225                          
    226                    if (ind==2) { 
   \                     ??coding_0:
   \   000000B6   3002               CPI     R16, 2
   \   000000B8   F5A9               BRNE    ??coding_9
    227                    
    228                     if (v<1.5) cod2=cod2+i;
   \   000000BA   9140....           LDS     R20, c2
   \   000000BE   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   000000C0   F4C0               BRCC    ??coding_10
   \   000000C2   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_368:
   \   000000C4   ....               RCALL   ?Subroutine27
    229                     if (v>=1.5 && v<2) { set2; c2++;  cod2=cod2+i;  } else
    230                     if (v>=2 && v<3)   { set2; cod2=cod2+i;  c2++; } else
   \                     ??CrossCallReturnLabel_345:
   \   000000C6   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_78:
   \   000000C8   F410               BRCC    ??coding_11
   \   000000CA   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_89:
   \   000000CC   F048               BRCS    ??coding_12
    231                     if (v>=3 && v<5)   { set2; cod2=cod2+i+i;  c2++; if (c2<=14) { set2; cod2=cod2+i;  c2++; }  }   else                                  
   \                     ??coding_11:
   \   000000CE   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_92:
   \   000000D0   F4C8               BRCC    ??coding_13
   \   000000D2   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_95:
   \   000000D4   F4B8               BRCC    ??coding_13
   \   000000D6   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_369:
   \   000000D8   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_51:
   \   000000DA   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_323:
   \   000000DC   300F               CPI     R16, 15
   \   000000DE   F4E0               BRCC    ??coding_14
   \                     ??coding_12:
   \   000000E0   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_370:
   \   000000E2   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_98:
   \   000000E4   9140....           LDS     R20, c2
   \   000000E8   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_4:
   \   000000EA   ....               LDI     R30, LOW(c2)
   \   000000EC   ....               LDI     R31, (c2) >> 8
   \   000000EE   ....               RCALL   ??Subroutine136_0
   \                     ??CrossCallReturnLabel_297:
   \   000000F0   C012               RJMP    ??coding_15
   \                     ??coding_10:
   \   000000F2   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_84:
   \   000000F4   F740               BRCC    ??CrossCallReturnLabel_345
   \   000000F6   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_371:
   \   000000F8   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_175:
   \   000000FA   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_324:
   \   000000FC   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_372:
   \   000000FE   8100               LD      R16, Z
   \   00000100   ....               RCALL   ??Subroutine140_0
   \                     ??CrossCallReturnLabel_342:
   \   00000102   C00A               RJMP    ??coding_14
    232                     if (v>5 && v<7)    { c2++;   if (c2<=15)  c2++; }
   \                     ??coding_13:
   \   00000104   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_73:
   \   00000106   F440               BRCC    ??coding_14
   \   00000108   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_81:
   \   0000010A   F430               BRCC    ??coding_14
   \   0000010C   ....               LDI     R30, LOW(c2)
   \   0000010E   ....               LDI     R31, (c2) >> 8
   \   00000110   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_54:
   \   00000112   F410               BRCC    ??coding_14
   \   00000114   9503               INC     R16
   \                     ??coding_15:
   \   00000116   8300               ST      Z, R16
    233                   
    234                          if (c2>=16) ind=3;
   \                     ??coding_14:
   \   00000118   9100....           LDS     R16, c2
   \   0000011C   3100               CPI     R16, 16
   \   0000011E   F1D0               BRCS    ??coding_7
   \   00000120   E003               LDI     R16, 3
   \   00000122   C036               RJMP    ??coding_16
    235                               }
    236                          
    237                   if (ind==1) { 
   \                     ??coding_9:
   \   00000124   3001               CPI     R16, 1
   \   00000126   F5B1               BRNE    ??coding_7
    238                     
    239                     if (v<1.5) cod1=cod1+i;
   \                     ??coding_8:
   \   00000128   9140....           LDS     R20, c1
   \   0000012C   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_2:
   \   0000012E   F4C0               BRCC    ??coding_17
   \   00000130   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_199:
   \   00000132   ....               RCALL   ?Subroutine27
    240                     if (v>=1.5 && v<2) { set1; c1++;  cod1=cod1+i;  } else
    241                     if (v>=2 && v<3)   { set1; cod1=cod1+i;  c1++; } else
   \                     ??CrossCallReturnLabel_346:
   \   00000134   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_79:
   \   00000136   F410               BRCC    ??coding_18
   \   00000138   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_90:
   \   0000013A   F048               BRCS    ??coding_19
    242                     if (v>=3 && v<5)   { set1; cod1=cod1+i+i;  c1++; if (c1<=14) { set1; cod1=cod1+i; c1++; }  }   else                                  
   \                     ??coding_18:
   \   0000013C   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_93:
   \   0000013E   F4C8               BRCC    ??coding_20
   \   00000140   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_96:
   \   00000142   F4B8               BRCC    ??coding_20
   \   00000144   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_200:
   \   00000146   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_52:
   \   00000148   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_325:
   \   0000014A   300F               CPI     R16, 15
   \   0000014C   F4E0               BRCC    ??coding_21
   \                     ??coding_19:
   \   0000014E   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_201:
   \   00000150   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_99:
   \   00000152   9140....           LDS     R20, c1
   \   00000156   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_5:
   \   00000158   ....               LDI     R30, LOW(c1)
   \   0000015A   ....               LDI     R31, (c1) >> 8
   \   0000015C   ....               RCALL   ??Subroutine136_0
   \                     ??CrossCallReturnLabel_298:
   \   0000015E   C012               RJMP    ??coding_22
   \                     ??coding_17:
   \   00000160   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_85:
   \   00000162   F740               BRCC    ??CrossCallReturnLabel_346
   \   00000164   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_202:
   \   00000166   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_176:
   \   00000168   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_326:
   \   0000016A   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_203:
   \   0000016C   8100               LD      R16, Z
   \   0000016E   ....               RCALL   ??Subroutine140_0
   \                     ??CrossCallReturnLabel_343:
   \   00000170   C00A               RJMP    ??coding_21
    243                     if (v>5 && v<7)    { c1++;   if (c1<=15)  c1++; }
   \                     ??coding_20:
   \   00000172   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_74:
   \   00000174   F440               BRCC    ??coding_21
   \   00000176   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_82:
   \   00000178   F430               BRCC    ??coding_21
   \   0000017A   ....               LDI     R30, LOW(c1)
   \   0000017C   ....               LDI     R31, (c1) >> 8
   \   0000017E   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_55:
   \   00000180   F410               BRCC    ??coding_21
   \   00000182   9503               INC     R16
   \                     ??coding_22:
   \   00000184   8300               ST      Z, R16
    244                   
    245                          if (c1>=16) ind=2;
   \                     ??coding_21:
   \   00000186   9100....           LDS     R16, c1
   \   0000018A   3100               CPI     R16, 16
   \   0000018C   F018               BRCS    ??coding_7
   \   0000018E   E002               LDI     R16, 2
   \                     ??coding_16:
   \   00000190   9300....           STS     ind, R16
    246                               }
    247                    
    248                   
    249                  
    250                   
    251                
    252                       cod_ok=1;//код готов         
   \                     ??coding_7:
   \   00000194   E001               LDI     R16, 1
   \   00000196   9300....           STS     cod_ok, R16
    253                   
    254                   if (pr==0) {
   \   0000019A   2066               TST     R6
   \   0000019C   F5A1               BRNE    ??CrossCallReturnLabel_197
    255                               rprintfFloat(2, i);
   \   0000019E   018C               MOVW    R17:R16, R25:R24
   \   000001A0   E020               LDI     R18, 0
   \   000001A2   ....               RCALL   ??Subroutine134_0
   \                     ??CrossCallReturnLabel_309:
   \   000001A4   E002               LDI     R16, 2
   \   000001A6   ....               RCALL   rprintfFloat
    256                               rprintfStr("  / abslen= ");
   \   000001A8   ....               LDI     R16, LOW(`?<Constant "  / abslen= ">`)
   \   000001AA   ....               LDI     R17, (`?<Constant "  / abslen= ">`) >> 8
   \   000001AC   ....               RCALL   rprintfStr
    257                                rprintfFloat(9, dim1[i]+ (256*dim2[i])  );
   \   000001AE   0F88               LSL     R24
   \   000001B0   1F99               ROL     R25
   \   000001B2   01FC               MOVW    R31:R30, R25:R24
   \   000001B4   ....               SUBI    R30, LOW((-(dim1) & 0xFFFF))
   \   000001B6   ....               SBCI    R31, (-(dim1) & 0xFFFF) >> 8
   \   000001B8   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_178:
   \   000001BA   01FC               MOVW    R31:R30, R25:R24
   \   000001BC   ....               SUBI    R30, LOW((-(dim2) & 0xFFFF))
   \   000001BE   ....               SBCI    R31, (-(dim2) & 0xFFFF) >> 8
   \   000001C0   8130               LD      R19, Z
   \   000001C2   E020               LDI     R18, 0
   \   000001C4   0F13               ADD     R17, R19
   \   000001C6   ....               RCALL   ??Subroutine134_0
   \                     ??CrossCallReturnLabel_310:
   \   000001C8   E009               LDI     R16, 9
   \   000001CA   ....               RCALL   rprintfFloat
    258                                rprintfStr("  / len= ");
   \   000001CC   ....               LDI     R16, LOW(`?<Constant "  / len= ">`)
   \   000001CE   ....               LDI     R17, (`?<Constant "  / len= ">`) >> 8
   \   000001D0   ....               RCALL   rprintfStr
    259                            rprintfFloat(4,  len[i]);
   \   000001D2   914D               LD      R20, X+
   \   000001D4   915D               LD      R21, X+
   \   000001D6   916D               LD      R22, X+
   \   000001D8   917C               LD      R23, X
   \   000001DA   E004               LDI     R16, 4
   \   000001DC   ....               RCALL   rprintfFloat
    260                             rprintfStr("  ");
   \   000001DE   ....               LDI     R16, LOW(`?<Constant "  ">`)
   \   000001E0   ....               LDI     R17, (`?<Constant "  ">`) >> 8
   \   000001E2   ....               RCALL   rprintfStr
    261                           rprintfStr("  / cod1= ");
   \   000001E4   ....               LDI     R16, LOW(`?<Constant "  / cod1= ">`)
   \   000001E6   ....               LDI     R17, (`?<Constant "  / cod1= ">`) >> 8
   \   000001E8   ....               RCALL   ?Subroutine30
    262                            rprintfFloat(6, cod1);
    263                             rprintfStr(" / cod2= ");
   \                     ??CrossCallReturnLabel_307:
   \   000001EA   ....               LDI     R16, LOW(`?<Constant " / cod2= ">`)
   \   000001EC   ....               LDI     R17, (`?<Constant " / cod2= ">`) >> 8
   \   000001EE   ....               RCALL   ?Subroutine42
    264                            rprintfFloat(6,  cod2);
   \                     ??CrossCallReturnLabel_366:
   \   000001F0   ....               RCALL   ??Subroutine137_0
    265                             rprintfStr(" / cod3= ");
   \                     ??CrossCallReturnLabel_304:
   \   000001F2   ....               LDI     R16, LOW(`?<Constant " / cod3= ">`)
   \   000001F4   ....               LDI     R17, (`?<Constant " / cod3= ">`) >> 8
   \   000001F6   ....               RCALL   ?Subroutine44
    266                            rprintfFloat(6,  cod3);
   \                     ??CrossCallReturnLabel_358:
   \   000001F8   ....               RCALL   ??Subroutine137_0
    267                             rprintfStr("/ minlen=");
   \                     ??CrossCallReturnLabel_303:
   \   000001FA   ....               LDI     R16, LOW(`?<Constant "/ minlen=">`)
   \   000001FC   ....               LDI     R17, (`?<Constant "/ minlen=">`) >> 8
   \   000001FE   ....               RCALL   rprintfStr
    268                             rprintfFloat(9,   minimallen);
   \   00000200   ....               RCALL   ?Subroutine95
    269                             ent;
    270                          }
    271                   
    272                   
    273                             }
   \                     ??CrossCallReturnLabel_172:
   \   00000202   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_179:
   \   00000204   ....               RCALL   ?Subroutine45
    274                 
    275                 
    276                 
    277            
    278            }
   \                     ??CrossCallReturnLabel_197:
   \   00000206   E0EA               LDI     R30, 10
   \   00000208   ....               RJMP    ?EPILOGUE_B10_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   EA60               LDI     R22, 160
   \   00000002   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine60:
   \   00000000   E460               LDI     R22, 64
   \   00000002   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   E460               LDI     R22, 64
   \   00000002   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   E060               LDI     R22, 0
   \   00000002   E470               LDI     R23, 64
   \   00000004   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   E040               LDI     R20, 0
   \   00000002   EE60               LDI     R22, 224
   \   00000004   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   E060               LDI     R22, 0
   \   00000002   E470               LDI     R23, 64
   \   00000004   0180               MOVW    R17:R16, R1:R0
   \   00000006   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   E041               LDI     R20, 1
   \   00000002   EA60               LDI     R22, 160
   \   00000004   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   ....               LDI     R30, LOW(c3)
   \   00000002   ....               LDI     R31, (c3) >> 8
   \   00000004                      REQUIRE ??Subroutine136_0
   \   00000004                      ;               // Fall through to label ??Subroutine136_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine136_0:
   \   00000000   8100               LD      R16, Z
   \   00000002   5F0E               SUBI    R16, 254
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_187:
   \   00000002                      REQUIRE ?Subroutine100
   \   00000002                      ;               // Fall through to label ?Subroutine100

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   0F00               LSL     R16
   \   00000002   1F11               ROL     R17
   \   00000004   0F00               LSL     R16
   \   00000006   1F11               ROL     R17
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   2908               OR      R16, R8
   \   00000006   2919               OR      R17, R9
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   8100               LD      R16, Z
   \   00000002   9503               INC     R16
   \   00000004   8300               ST      Z, R16
   \   00000006   3100               CPI     R16, 16
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_177:
   \   00000002   0D04               ADD     R16, R4
   \   00000004   1D15               ADC     R17, R5
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   ....               LDI     R30, LOW(c1)
   \   00000006   ....               LDI     R31, (c1) >> 8
   \   00000008                      REQUIRE ?Subroutine121
   \   00000008                      ;               // Fall through to label ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   8100               LD      R16, Z
   \   00000002   5F0E               SUBI    R16, 254
   \   00000004                      REQUIRE ??Subroutine138_0
   \   00000004                      ;               // Fall through to label ??Subroutine138_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   ....               LDI     R30, LOW(c2)
   \   00000006   ....               LDI     R31, (c2) >> 8
   \   00000008   ....               RJMP    ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_237:
   \   00000002   2B20               OR      R18, R16
   \   00000004   2B31               OR      R19, R17
   \   00000006   0F28               ADD     R18, R24
   \   00000008   1F39               ADC     R19, R25
   \   0000000A   8320               ST      Z, R18
   \   0000000C   8331               STD     Z+1, R19
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_236:
   \   00000002   0148               MOVW    R9:R8, R17:R16
   \   00000004   E040               LDI     R20, 0
   \   00000006   E050               LDI     R21, 0
   \   00000008   EC60               LDI     R22, 192
   \   0000000A   E37F               LDI     R23, 63
   \   0000000C   0180               MOVW    R17:R16, R1:R0
   \   0000000E   0191               MOVW    R19:R18, R3:R2
   \   00000010   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_186:
   \   00000002                      REQUIRE ??Subroutine140_0
   \   00000002                      ;               // Fall through to label ??Subroutine140_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine140_0:
   \   00000000   0F08               ADD     R16, R24
   \   00000002   1F19               ADC     R17, R25
   \   00000004                      REQUIRE ??Subroutine141_0
   \   00000004                      ;               // Fall through to label ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   8120               LD      R18, Z
   \   00000002   8131               LDD     R19, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   ....               RCALL   ??Subroutine133_0
   \                     ??CrossCallReturnLabel_311:
   \   00000002                      REQUIRE ?Subroutine101
   \   00000002                      ;               // Fall through to label ?Subroutine101

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   E009               LDI     R16, 9
   \   00000002   ....               RCALL   rprintfFloat
   \   00000004   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   E001               LDI     R16, 1
   \   00000002   E010               LDI     R17, 0
   \   00000004   ....               RJMP    ?S_SHL_L02
    279            
    280          
    281           //переполнился импульс более 130мс  (1/(4000000/8)*65535)
    282          #pragma vector = TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
    283          __interrupt void funTIMER1_OVF_vect(void)
   \                     funTIMER1_OVF_vect:
    284          {
   \   00000000   930A               ST      -Y, R16
    285             //TIFR = 0xFF; - в прерывании сбрасывется сам
    286            
    287            perepoln=1;   
   \   00000002   E001               LDI     R16, 1
   \   00000004   9300....           STS     ??perepoln, R16
    288           
    289          }
   \   00000008                      REQUIRE ?Subroutine129
   \   00000008                      ;               // Fall through to label ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   9109               LD      R16, Y+
   \   00000002   9518               RETI
    290          
    291          
F:\Dulov\RemoteAMP\main.c
      1          //***************************************************************************
      2          //  
      3          //  Author(s)...: dav COBRA 
      4          //  Target(s)...: ATMega8
      5          //  Compiler....: 6 40
      6          //  ТЕСТ1
      7          //  Description.: Система  управления  для  Усилителя  Мощности   V-ниже
      8          //  v1.1 - добавлена поддержка включения усилителя тыловых колонок вместо Source5
      9          //       - изменена установка auto off
     10          //  v1.2 - теперь во время мигания(только Source) светодиодов  команды пульта обрабатываются
     11          //       - новая команда пульта - возврат в предыдущий source
     12          //       - команды пульта можно продублировать на втором пульте, т.е. на каждую функцию 2 кнопки пульта
     13          //       - вместо импульсов громкости можно формировать постоянный сигнал
     14          //       - подправлены задержки
     15          //       - обновлен алгоритм кодирования
     16          // v1.22 - исправлена ошибка задержки вкл AC
     17          // v1.23 - исправлен при включении включается SOURCE1 
     18          // v1.24 - исправлен баг AUTOOFF на 30 минут 
     19          // v1.25 - исправлен баг AUTOOFF при выключениии питания 
     20          // v1.26 - refactoring, проверка на повторное программирование кнопки
     21          //  Data........: 02 2017
     22          //
     23          //   - ВЫКЛЮЧИТЬ ОПЦИЮ clustering of variables В optimization compilator !!!!
     24          //***************************************************************************
     25          #include <iom8.h>//<ioavr.h>
     26          //#include <inavr.h>  
     27          #include <intrinsics.h>
     28          #include "init.h"
     29          #include "main.h"
     30          #include "du.h"  
     31          #include "SoftTimers.h" 
     32          #include "keys.h"
     33          //#include <stdlib.h>
     34          //#include <math.h> 
     35          #include "usart.h"
     36          #include "eeprom.h"
     37          //#include <stdarg.h>
     38          //************************************************************************* 
     39          #define AC_ON    SET(PORTD,6)
     40          #define AC_OFF   RES(PORTD,6)
     41          void diag(void);
     42          void led_all(bool a);
     43          void resled(void);
     44          void source(void);
     45          void resOUT(void);  
     46          void gro(uchar a);
     47          void main_logic(void);
     48          void main_power(void);
     49          void writeCOD(void);
     50          uchar analizCOD(void);
     51          void programming(uchar rez);
     52          uchar getadr(void);
     53          
     54          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     55          uint tON=acon; 
   \                     tON:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for tON>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     56          uchar pr=0;
   \                     pr:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     57          static bool get=0;
   \                     ??get:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     58          bool onok=0;  
   \                     onok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     59          bool on=0;
   \                     on:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     60          volatile bool zader=0,aoff=0;
   \                     zader:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     aoff:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     61          uint timerzad; 
   \                     timerzad:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     62          uchar pultadr;
   \                     pultadr:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     63          static bool u=0,til=0,mode_programming=0; 
   \                     ??u:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??til:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??mode_programming:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     64          static  uchar mode=0,tekfunc=0; 
   \                     ??mode:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??tekfunc:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     65          static uchar lastsel=1,sel=1,gro1=0,gro2=0,regaoff=0;
   \                     ??lastsel:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for lastsel>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     ??sel:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for sel>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??gro1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??gro2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??regaoff:
   \   00000000                      DS8 1
     66          

   \                                 In  segment CODE, align 2, keep-with-next
     67          void led_test()
   \                     led_test:
     68          {
   \   00000000   938A               ST      -Y, R24
     69            for (uchar i=0; i<=6; i++){ led_all(1);  p9; led_all(0);}
   \   00000002   E087               LDI     R24, 7
   \                     ??led_test_0:
   \   00000004   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_14:
   \   00000006   E70F               LDI     R16, 127
   \   00000008   EF1C               LDI     R17, 252
   \   0000000A   E02A               LDI     R18, 10
   \   0000000C   5001               SUBI    R16, 1
   \   0000000E   4010               SBCI    R17, 0
   \   00000010   4020               SBCI    R18, 0
   \   00000012   F7E1               BRNE    $-6
   \   00000014   C000               RJMP    $+2
   \   00000016   0000               NOP
   \   00000018   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_33:
   \   0000001A   958A               DEC     R24
   \   0000001C   F799               BRNE    ??led_test_0
     70          }
   \   0000001E                      REQUIRE ?Subroutine124
   \   0000001E                      ;               // Fall through to label ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    led_all

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    led_all
     71          //***************************************************************************
     72          //                  M  A  I  N
     73          //***************************************************************************

   \                                 In  segment CODE, align 2, keep-with-next
     74          int main( void )
   \                     main:
     75          {//main
   \   00000000   938A               ST      -Y, R24
     76            TimerSet(&tm3,100);
   \   00000002   E644               LDI     R20, 100
   \   00000004   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_375:
   \   00000006   ....               LDI     R16, LOW(tm3)
   \   00000008   ....               LDI     R17, (tm3) >> 8
   \   0000000A   ....               RCALL   TimerSet
     77            
     78              iniPORTS();  
   \   0000000C   ....               RCALL   iniPORTS
     79              
     80            p3;//задержка при включении
   \   0000000E   ....               RCALL   ?Subroutine63
     81           
     82           //----------------------------------
     83             if (keyONsm) {u=1; led_test(); USART_Init();}//включаем UART
   \                     ??CrossCallReturnLabel_101:
   \   00000010   9985               SBIC    0x10, 0x05
   \   00000012   C005               RJMP    ??main_0
   \   00000014   E001               LDI     R16, 1
   \   00000016   9300....           STS     ??u, R16
   \   0000001A   ....               RCALL   led_test
   \   0000001C   ....               RCALL   USART_Init
     84          //----------------------------------
     85            mode=fmode; //смена режима работы
   \                     ??main_0:
   \   0000001E   ....               LDI     R20, LOW(fmode)
   \   00000020   ....               LDI     R21, (fmode) >> 8
   \   00000022   ....               RCALL   __eeget8_16
   \   00000024   9300....           STS     ??mode, R16
     86            if (mode!=1 && mode!=0) {  fmode=0; mode=0;   }//ini eeprom  read
   \   00000028   3001               CPI     R16, 1
   \   0000002A   F029               BREQ    ??main_1
   \   0000002C   2300               TST     R16
   \   0000002E   F019               BREQ    ??main_1
   \   00000030   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_210:
   \   00000032   9300....           STS     ??mode, R16
     87            if (modegro!=1 && modegro!=0) { modegro=0;  }//ini eeprom read 
   \                     ??main_1:
   \   00000036   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_278:
   \   00000038   F019               BREQ    ??CrossCallReturnLabel_213
   \   0000003A   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_265:
   \   0000003C   F009               BREQ    ??CrossCallReturnLabel_213
   \   0000003E   ....               RCALL   ?Subroutine15
     88            
     89            if (keyMUTE && !keyAOFFsm) {  led_test();
   \                     ??CrossCallReturnLabel_213:
   \   00000040   9981               SBIC    0x10, 0x01
   \   00000042   C022               RJMP    ??main_2
   \   00000044   9985               SBIC    0x10, 0x05
   \   00000046   C020               RJMP    ??main_2
   \   00000048   9B80               SBIS    0x10, 0x00
   \   0000004A   C01E               RJMP    ??main_2
   \   0000004C   ....               RCALL   led_test
     90            if (mode==0 && modegro==0)   {  fmode=1; p5;   SET(PORTB,4);  while(1) {}   }
   \   0000004E   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_268:
   \   00000050   F439               BRNE    ??main_3
   \   00000052   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_266:
   \   00000054   F499               BRNE    ??main_4
   \   00000056   E001               LDI     R16, 1
   \   00000058   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_209:
   \   0000005A   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_244:
   \   0000005C   9AC4               SBI     0x18, 0x04
   \                     ??main_5:
   \   0000005E   CFFF               RJMP    ??main_5
     91            if (mode==1 && modegro==0)   {  modegro=1; p5; SET(PORTB,2);  SET(PORTB,3);  SET(PORTB,4);  while(1) {}  }
   \                     ??main_3:
   \   00000060   3001               CPI     R16, 1
   \   00000062   F491               BRNE    ??main_2
   \   00000064   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_267:
   \   00000066   F429               BRNE    ??main_6
   \   00000068   E001               LDI     R16, 1
   \   0000006A   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_212:
   \   0000006C   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_104:
   \   0000006E   9AC4               SBI     0x18, 0x04
   \                     ??main_7:
   \   00000070   CFFF               RJMP    ??main_7
   \                     ??main_6:
   \   00000072   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_279:
   \   00000074   F449               BRNE    ??main_2
     92            if (mode==1 && modegro==1)   {  fmode=0; p5; SET(PORTB,2);  SET(PORTB,3);    while(1) {}  } 
   \   00000076   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_211:
   \   00000078   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_105:
   \   0000007A   CFFF               RJMP    ??CrossCallReturnLabel_105
   \                     ??main_4:
   \   0000007C   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_280:
   \   0000007E   F421               BRNE    ??main_2
     93            if (mode==0 && modegro==1)   {  modegro=0; p5;  led_all(1);    while(1) {}   }
   \   00000080   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_214:
   \   00000082   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_245:
   \   00000084   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_13:
   \   00000086   CFFF               RJMP    ??CrossCallReturnLabel_13
     94            
     95                                        }
     96            
     97           // modegro=1; mode=1;
     98          //-----------------------------------
     99            
    100             
    101             if (keySELsm==1 && keyAOFFsm==1)//очистка
   \                     ??main_2:
   \   00000088   9981               SBIC    0x10, 0x01
   \   0000008A   C010               RJMP    ??main_8
   \   0000008C   9980               SBIC    0x10, 0x00
   \   0000008E   C00E               RJMP    ??main_8
    102                {
    103                  tekfunc=0;
   \   00000090   E000               LDI     R16, 0
   \   00000092   9300....           STS     ??tekfunc, R16
    104                  mode_programming=1; cod1=0;cod2=0;cod3=0;
   \   00000096   E001               LDI     R16, 1
   \   00000098   9300....           STS     ??mode_programming, R16
   \   0000009C   ....               RCALL   ?Subroutine11
    105                  for (uchar i=0; i<=MAXFUNC; i++) {writeCOD();tekfunc++;}
   \                     ??CrossCallReturnLabel_27:
   \   0000009E   E188               LDI     R24, 24
   \                     ??main_9:
   \   000000A0   ....               RCALL   writeCOD
   \   000000A2   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_329:
   \   000000A4   958A               DEC     R24
   \   000000A6   F7E1               BRNE    ??main_9
    106                  led_all(1); while(1) {} //зависаем
   \   000000A8   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_12:
   \   000000AA   CFFF               RJMP    ??CrossCallReturnLabel_12
    107                }
    108            if (keySELsm) {mode_programming=1; led_test();}//включаем программирование пульта
   \                     ??main_8:
   \   000000AC   9981               SBIC    0x10, 0x01
   \   000000AE   C004               RJMP    ??main_10
   \   000000B0   E001               LDI     R16, 1
   \   000000B2   9300....           STS     ??mode_programming, R16
   \   000000B6   ....               RCALL   led_test
    109            
    110            
    111             if (mode_programming) //мигание первого программируемого
   \                     ??main_10:
   \   000000B8   9100....           LDS     R16, ??mode_programming
   \   000000BC   2300               TST     R16
   \   000000BE   F041               BREQ    ??main_11
    112             {
    113               for (uchar i=0; i<7; i++) {getadr(); p3;led_all(0); p3;}
   \   000000C0   E087               LDI     R24, 7
   \                     ??main_12:
   \   000000C2   ....               RCALL   getadr
   \   000000C4   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_102:
   \   000000C6   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_32:
   \   000000C8   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_103:
   \   000000CA   958A               DEC     R24
   \   000000CC   F7D1               BRNE    ??main_12
    114              
    115               getadr();
   \   000000CE   ....               RCALL   getadr
    116             }
    117              
    118            
    119            
    120            
    121          
    122              __enable_interrupt();   
   \                     ??main_11:
   \   000000D0   9478               SEI
   \   000000D2   C006               RJMP    ??main_13
    123            while(1)
    124            {
    125              
    126              
    127               bool rez=remote_main();//вызов обработчика пульта 
    128               
    129               
    130                if (keyAOFF) 
    131                 {
    132                 rez=1;
    133                 cod1=1;
    134                 cod2=2;
    135                 cod3=3;
    136                 
    137                 }
    138                 
    139                
    140               if (!mode_programming)  
    141               {    
    142                 pultadr=0; 
    143                 if (rez) pultadr=analizCOD();  
    144                 
    145                 
    146                
    147                 
    148                main_power();
    149                if (on==1)
    150                   main_logic();
    151               }
    152               else programming(rez);
   \                     ??main_14:
   \   000000D4   ....               RCALL   programming
    153               
    154               if(u) diag();  
   \                     ??main_15:
   \   000000D6   9100....           LDS     R16, ??u
   \   000000DA   2300               TST     R16
   \   000000DC   F009               BREQ    ??main_13
   \   000000DE   ....               RCALL   diag
   \                     ??main_13:
   \   000000E0   ....               RCALL   remote_main
   \   000000E2   9980               SBIC    0x10, 0x00
   \   000000E4   C00F               RJMP    ??main_16
   \   000000E6   9985               SBIC    0x10, 0x05
   \   000000E8   C00D               RJMP    ??main_16
   \   000000EA   E001               LDI     R16, 1
   \   000000EC   E030               LDI     R19, 0
   \   000000EE   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_204:
   \   000000F0   8300               ST      Z, R16
   \   000000F2   8331               STD     Z+1, R19
   \   000000F4   E022               LDI     R18, 2
   \   000000F6   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_373:
   \   000000F8   8320               ST      Z, R18
   \   000000FA   8331               STD     Z+1, R19
   \   000000FC   E023               LDI     R18, 3
   \   000000FE   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_363:
   \   00000100   8320               ST      Z, R18
   \   00000102   8331               STD     Z+1, R19
   \                     ??main_16:
   \   00000104   9110....           LDS     R17, ??mode_programming
   \   00000108   2311               TST     R17
   \   0000010A   F721               BRNE    ??main_14
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   9310....           STS     pultadr, R17
   \   00000112   2300               TST     R16
   \   00000114   F011               BREQ    ??CrossCallReturnLabel_350
   \   00000116   ....               RCALL   analizCOD
   \   00000118   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_350:
   \   0000011A   ....               RCALL   main_power
   \   0000011C   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_272:
   \   0000011E   F2D9               BREQ    ??main_15
   \   00000120   ....               RCALL   main_logic
   \   00000122   CFD9               RJMP    ??main_15
   \   00000124                      REQUIRE _A_PIND
   \   00000124                      REQUIRE _A_PORTB
    155            }
    156          }//main

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_216:
   \   00000002                      REQUIRE ?Subroutine125
   \   00000002                      ;               // Fall through to label ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   2300               TST     R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_249:
   \   00000002   9AC2               SBI     0x18, 0x02
   \   00000004   9AC3               SBI     0x18, 0x03
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   EA19               LDI     R17, 169
   \   00000004   E023               LDI     R18, 3
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ....               LDI     R30, LOW(??tekfunc)
   \   00000002   ....               LDI     R31, (??tekfunc) >> 8
   \   00000004                      REQUIRE ??Subroutine139_0
   \   00000004                      ;               // Fall through to label ??Subroutine139_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine106
   \   00000002                      ;               // Fall through to label ?Subroutine106

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   ....               LDI     R20, LOW(modegro)
   \   00000002   ....               LDI     R21, (modegro) >> 8
   \   00000004   ....               RJMP    __eeput8_16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine105
   \   00000002                      ;               // Fall through to label ?Subroutine105

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine105:
   \   00000000   ....               LDI     R20, LOW(fmode)
   \   00000002   ....               LDI     R21, (fmode) >> 8
   \   00000004   ....               RJMP    __eeput8_16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   9300....           STS     pultadr, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   9100....           LDS     R16, on
   \   00000004   ....               RJMP    ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   E11A               LDI     R17, 26
   \   00000004   E026               LDI     R18, 6
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   9100....           LDS     R16, ??mode
   \   00000004   ....               RJMP    ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_215:
   \   00000002                      REQUIRE ?Subroutine127
   \   00000002                      ;               // Fall through to label ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   3001               CPI     R16, 1
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   ....               LDI     R20, LOW(modegro)
   \   00000002   ....               LDI     R21, (modegro) >> 8
   \   00000004   ....               RJMP    __eeget8_16
    157          //***************************************************************************
    158          
    159          
    160          
    161          
    162          
    163          
    164          
    165          
    166          
    167          
    168          

   \                                 In  segment CODE, align 2, keep-with-next
    169          bool mute(int a)
   \                     mute:
    170          {
    171              static bool state=0;
    172              if (a==-1) 
   \   00000000   3F0F               CPI     R16, 255
   \   00000002   EF2F               LDI     R18, 255
   \   00000004   0712               CPC     R17, R18
   \   00000006   F449               BRNE    ??mute_0
    173              {
    174              if (state) { state=0; AC_OFF; }
   \   00000008   9100....           LDS     R16, ??state
   \   0000000C   2300               TST     R16
   \   0000000E   F011               BREQ    ??mute_1
   \   00000010   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_38:
   \   00000012   C001               RJMP    ??CrossCallReturnLabel_18
    175              else {state=1; AC_ON;}
   \                     ??mute_1:
   \   00000014   ....               RCALL   ?Subroutine8
    176              p5;
   \                     ??CrossCallReturnLabel_18:
   \   00000016   ....               RCALL   ?Subroutine118
    177              }
   \                     ??CrossCallReturnLabel_246:
   \   00000018   C009               RJMP    ??CrossCallReturnLabel_19
    178              else
    179                if (a==0) { state=0; AC_OFF; }
   \                     ??mute_0:
   \   0000001A   2F20               MOV     R18, R16
   \   0000001C   2B21               OR      R18, R17
   \   0000001E   F411               BRNE    ??mute_2
   \   00000020   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_39:
   \   00000022   C004               RJMP    ??CrossCallReturnLabel_19
    180                else
    181                if (a==1) {state=1; AC_ON;}
   \                     ??mute_2:
   \   00000024   3001               CPI     R16, 1
   \   00000026   4010               SBCI    R17, 0
   \   00000028   F409               BRNE    ??CrossCallReturnLabel_19
   \   0000002A   ....               RCALL   ?Subroutine8
    182              return state; 
   \                     ??CrossCallReturnLabel_19:
   \   0000002C   9100....           LDS     R16, ??state
   \   00000030   9508               RET
   \   00000032                      REQUIRE _A_PORTD
    183          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     ??state, R16
   \   00000006   9896               CBI     0x12, 0x06
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   E001               LDI     R16, 1
   \   00000002   9300....           STS     ??state, R16
   \   00000006   9A96               SBI     0x12, 0x06
   \   00000008   9508               RET

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??state:
   \   00000000                      DS8 1
    184          
    185          
    186          

   \                                 In  segment CODE, align 2, keep-with-next
    187          uchar getadr()//адреса  команд
   \                     getadr:
    188          {
   \   00000000   938A               ST      -Y, R24
    189            uchar adr=0;
   \   00000002   E080               LDI     R24, 0
    190            if (tekfunc==0) {adr=1; SET(PORTB,0);}//s1
   \   00000004   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_108:
   \   00000006   2300               TST     R16
   \   00000008   F411               BRNE    ??getadr_0
   \   0000000A   E081               LDI     R24, 1
   \   0000000C   C030               RJMP    ??getadr_1
    191            if (tekfunc==1) {adr=5; SET(PORTB,1);}
   \                     ??getadr_0:
   \   0000000E   3001               CPI     R16, 1
   \   00000010   F411               BRNE    ??getadr_2
   \   00000012   E085               LDI     R24, 5
   \   00000014   C031               RJMP    ??getadr_3
    192            if (tekfunc==2) {adr=10;SET(PORTB,2);}
   \                     ??getadr_2:
   \   00000016   3002               CPI     R16, 2
   \   00000018   F411               BRNE    ??getadr_4
   \   0000001A   E08A               LDI     R24, 10
   \   0000001C   C032               RJMP    ??getadr_5
    193            if (tekfunc==3) {adr=15;SET(PORTB,3);}
   \                     ??getadr_4:
   \   0000001E   3003               CPI     R16, 3
   \   00000020   F411               BRNE    ??getadr_6
   \   00000022   E08F               LDI     R24, 15
   \   00000024   C033               RJMP    ??getadr_7
    194            if (tekfunc==4) {adr=20;SET(PORTB,4);}//s5 или ONтыл
   \                     ??getadr_6:
   \   00000026   3004               CPI     R16, 4
   \   00000028   F411               BRNE    ??getadr_8
   \   0000002A   E184               LDI     R24, 20
   \   0000002C   C03A               RJMP    ??getadr_9
    195            if (tekfunc==5) {adr=55;SET(PORTB,0);SET(PORTB,2);SET(PORTB,4);}//command return
   \                     ??getadr_8:
   \   0000002E   3005               CPI     R16, 5
   \   00000030   F411               BRNE    ??getadr_10
   \   00000032   E387               LDI     R24, 55
   \   00000034   C034               RJMP    ??getadr_11
    196            if (tekfunc==6) {adr=25;SET(PORTD,7);}//on standby
   \                     ??getadr_10:
   \   00000036   3006               CPI     R16, 6
   \   00000038   F411               BRNE    ??getadr_12
   \   0000003A   E189               LDI     R24, 25
   \   0000003C   C037               RJMP    ??getadr_13
    197            if (tekfunc==7) {adr=30;SET(PORTB,5);}//aoff
   \                     ??getadr_12:
   \   0000003E   3007               CPI     R16, 7
   \   00000040   F411               BRNE    ??getadr_14
   \   00000042   E18E               LDI     R24, 30
   \   00000044   C038               RJMP    ??getadr_15
    198            if (tekfunc==8) {adr=35;mute(1);}//mute
   \                     ??getadr_14:
   \   00000046   3008               CPI     R16, 8
   \   00000048   F411               BRNE    ??CrossCallReturnLabel_20
   \   0000004A   E283               LDI     R24, 35
   \   0000004C   ....               RCALL   ?Subroutine9
    199            if (tekfunc==9) {adr=40; }//select
   \                     ??CrossCallReturnLabel_20:
   \   0000004E   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_109:
   \   00000050   3009               CPI     R16, 9
   \   00000052   F411               BRNE    ??getadr_16
   \   00000054   E288               LDI     R24, 40
   \   00000056   C041               RJMP    ??getadr_17
    200            if (tekfunc==10) {adr=45; }//громкость увеличить
   \                     ??getadr_16:
   \   00000058   300A               CPI     R16, 10
   \   0000005A   F411               BRNE    ??getadr_18
   \   0000005C   E28D               LDI     R24, 45
   \   0000005E   C03D               RJMP    ??getadr_17
    201            if (tekfunc==11) {adr=50; }//громкость уменьшить
   \                     ??getadr_18:
   \   00000060   300B               CPI     R16, 11
   \   00000062   F411               BRNE    ??getadr_19
   \   00000064   E382               LDI     R24, 50
   \   00000066   C039               RJMP    ??getadr_17
    202            
    203            //дублирование команд
    204             if (tekfunc==12) {adr=60; SET(PORTB,0);}//s1
   \                     ??getadr_19:
   \   00000068   300C               CPI     R16, 12
   \   0000006A   F419               BRNE    ??getadr_20
   \   0000006C   E38C               LDI     R24, 60
   \                     ??getadr_1:
   \   0000006E   9AC0               SBI     0x18, 0x00
   \   00000070   C034               RJMP    ??getadr_17
    205            if (tekfunc==13) {adr=65; SET(PORTB,1);}
   \                     ??getadr_20:
   \   00000072   300D               CPI     R16, 13
   \   00000074   F419               BRNE    ??getadr_21
   \   00000076   E481               LDI     R24, 65
   \                     ??getadr_3:
   \   00000078   9AC1               SBI     0x18, 0x01
   \   0000007A   C02F               RJMP    ??getadr_17
    206            if (tekfunc==14) {adr=70;SET(PORTB,2);}
   \                     ??getadr_21:
   \   0000007C   300E               CPI     R16, 14
   \   0000007E   F419               BRNE    ??getadr_22
   \   00000080   E486               LDI     R24, 70
   \                     ??getadr_5:
   \   00000082   9AC2               SBI     0x18, 0x02
   \   00000084   C02A               RJMP    ??getadr_17
    207            if (tekfunc==15) {adr=75;SET(PORTB,3);}
   \                     ??getadr_22:
   \   00000086   300F               CPI     R16, 15
   \   00000088   F419               BRNE    ??getadr_23
   \   0000008A   E48B               LDI     R24, 75
   \                     ??getadr_7:
   \   0000008C   9AC3               SBI     0x18, 0x03
   \   0000008E   C025               RJMP    ??getadr_17
    208            if (tekfunc==16) {adr=80;SET(PORTB,4);}//s5 или ONтыл
   \                     ??getadr_23:
   \   00000090   3100               CPI     R16, 16
   \   00000092   F411               BRNE    ??getadr_24
   \   00000094   E580               LDI     R24, 80
   \   00000096   C005               RJMP    ??getadr_9
    209            if (tekfunc==17) {adr=85;SET(PORTB,0);SET(PORTB,2);SET(PORTB,4);}//command return
   \                     ??getadr_24:
   \   00000098   3101               CPI     R16, 17
   \   0000009A   F429               BRNE    ??getadr_25
   \   0000009C   E585               LDI     R24, 85
   \                     ??getadr_11:
   \   0000009E   9AC0               SBI     0x18, 0x00
   \   000000A0   9AC2               SBI     0x18, 0x02
   \                     ??getadr_9:
   \   000000A2   9AC4               SBI     0x18, 0x04
   \   000000A4   C01A               RJMP    ??getadr_17
    210            if (tekfunc==18) {adr=90;SET(PORTD,7);}//on standby
   \                     ??getadr_25:
   \   000000A6   3102               CPI     R16, 18
   \   000000A8   F419               BRNE    ??getadr_26
   \   000000AA   E58A               LDI     R24, 90
   \                     ??getadr_13:
   \   000000AC   9A97               SBI     0x12, 0x07
   \   000000AE   C015               RJMP    ??getadr_17
    211            if (tekfunc==19) {adr=95;SET(PORTB,5);}//aoff
   \                     ??getadr_26:
   \   000000B0   3103               CPI     R16, 19
   \   000000B2   F419               BRNE    ??getadr_27
   \   000000B4   E58F               LDI     R24, 95
   \                     ??getadr_15:
   \   000000B6   9AC5               SBI     0x18, 0x05
   \   000000B8   C010               RJMP    ??getadr_17
    212            if (tekfunc==20) {adr=100;mute(1);}//mute
   \                     ??getadr_27:
   \   000000BA   3104               CPI     R16, 20
   \   000000BC   F411               BRNE    ??CrossCallReturnLabel_21
   \   000000BE   E684               LDI     R24, 100
   \   000000C0   ....               RCALL   ?Subroutine9
    213            if (tekfunc==21) {adr=105; }//select
   \                     ??CrossCallReturnLabel_21:
   \   000000C2   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_110:
   \   000000C4   3105               CPI     R16, 21
   \   000000C6   F411               BRNE    ??getadr_28
   \   000000C8   E689               LDI     R24, 105
   \   000000CA   C007               RJMP    ??getadr_17
    214            if (tekfunc==22) {adr=110; }//громкость увеличить
   \                     ??getadr_28:
   \   000000CC   3106               CPI     R16, 22
   \   000000CE   F411               BRNE    ??getadr_29
   \   000000D0   E68E               LDI     R24, 110
   \   000000D2   C003               RJMP    ??getadr_17
    215            if (tekfunc==23) {adr=115; }//громкость уменьшить
   \                     ??getadr_29:
   \   000000D4   3107               CPI     R16, 23
   \   000000D6   F409               BRNE    ??getadr_17
   \   000000D8   E783               LDI     R24, 115
    216            return(adr);
   \                     ??getadr_17:
   \   000000DA   2F08               MOV     R16, R24
   \   000000DC   ....               RJMP    ?Subroutine124
   \   000000DE                      REQUIRE _A_PORTB
   \   000000DE                      REQUIRE _A_PORTD
    217          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ....               RJMP    mute

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   9100....           LDS     R16, ??tekfunc
   \   00000004   9508               RET
    218          
    219          

   \                                 In  segment CODE, align 2, keep-with-next
    220          void pult() 
   \                     pult:
    221          {
    222             tON=1500; zader=1;timerzad=0; source(); p2;   //время включения АС при переключениях
   \   00000000   ED0C               LDI     R16, 220
   \   00000002   E015               LDI     R17, 5
   \   00000004   ....               LDI     R30, LOW(tON)
   \   00000006   ....               LDI     R31, (tON) >> 8
   \   00000008   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_339:
   \   0000000A   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_7:
   \   0000000C   ....               RJMP    ?Subroutine75
    223          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_219:
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               LDI     R30, LOW(timerzad)
   \   00000008   ....               LDI     R31, (timerzad) >> 8
   \   0000000A   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_167:
   \   0000000C   ....               RJMP    source

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   9300....           STS     zader, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   E710               LDI     R17, 112
   \   00000004   E022               LDI     R18, 2
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET
    224          
    225          
    226          

   \                                 In  segment CODE, align 2, keep-with-next
    227           void main_power()
   \                     main_power:
    228          {
    229          
    230           if ((keyON||pultadr==25 || pultadr==90) && on==1 && zader!=1) { rprintfStr("OFF>adr="); rprintfFloat(9, pultadr ); ent;
   \   00000000   9985               SBIC    0x10, 0x05
   \   00000002   C004               RJMP    ??main_power_0
   \   00000004   9B80               SBIS    0x10, 0x00
   \   00000006   C002               RJMP    ??main_power_0
   \   00000008   9981               SBIC    0x10, 0x01
   \   0000000A   C005               RJMP    ??main_power_1
   \                     ??main_power_0:
   \   0000000C   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_116:
   \   0000000E   3109               CPI     R16, 25
   \   00000010   F011               BREQ    ??main_power_1
   \   00000012   350A               CPI     R16, 90
   \   00000014   F499               BRNE    ??CrossCallReturnLabel_351
   \                     ??main_power_1:
   \   00000016   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_273:
   \   00000018   F089               BREQ    ??CrossCallReturnLabel_351
   \   0000001A   9100....           LDS     R16, zader
   \   0000001E   2300               TST     R16
   \   00000020   F469               BRNE    ??CrossCallReturnLabel_351
   \   00000022   ....               LDI     R16, LOW(`?<Constant "OFF>adr=">`)
   \   00000024   ....               LDI     R17, (`?<Constant "OFF>adr=">`) >> 8
   \   00000026   ....               RCALL   ?Subroutine20
    231                              on=0;onok=0; p5; zader=0;  til=0; gro1=0; gro2=0; pultadr=0;  }//OFF
   \                     ??CrossCallReturnLabel_40:
   \   00000028   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_34:
   \   0000002A   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_275:
   \   0000002C   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_217:
   \   0000002E   9300....           STS     ??til, R16
   \   00000032   9300....           STS     ??gro1, R16
   \   00000036   9300....           STS     ??gro2, R16
   \   0000003A   ....               RCALL   ?Subroutine122
    232               if ((keyON||pultadr==25 || pultadr==90) && on==0) {rprintfStr("ON>adr="); rprintfFloat(9, pultadr ); ent;
   \                     ??CrossCallReturnLabel_351:
   \   0000003C   9985               SBIC    0x10, 0x05
   \   0000003E   C004               RJMP    ??main_power_2
   \   00000040   9B80               SBIS    0x10, 0x00
   \   00000042   C002               RJMP    ??main_power_2
   \   00000044   9981               SBIC    0x10, 0x01
   \   00000046   C005               RJMP    ??main_power_3
   \                     ??main_power_2:
   \   00000048   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_117:
   \   0000004A   3109               CPI     R16, 25
   \   0000004C   F011               BREQ    ??main_power_3
   \   0000004E   350A               CPI     R16, 90
   \   00000050   F471               BRNE    ??CrossCallReturnLabel_354
   \                     ??main_power_3:
   \   00000052   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_274:
   \   00000054   F461               BRNE    ??CrossCallReturnLabel_354
   \   00000056   ....               LDI     R16, LOW(`?<Constant "ON>adr=">`)
   \   00000058   ....               LDI     R17, (`?<Constant "ON>adr=">`) >> 8
   \   0000005A   ....               RCALL   ?Subroutine20
    233                              SET(PORTD,4); SET(PORTD,7);p5; on=1; mute(0); zader=1;timerzad=0;source();pultadr=0;  }//ON
   \                     ??CrossCallReturnLabel_41:
   \   0000005C   9A94               SBI     0x12, 0x04
   \   0000005E   9A97               SBI     0x12, 0x07
   \   00000060   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_247:
   \   00000062   E001               LDI     R16, 1
   \   00000064   9300....           STS     on, R16
   \   00000068   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_240:
   \   0000006A   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   0000006C   ....               RCALL   ??Subroutine143_0
    234               
    235              //выключение
    236              if (on==0 && onok==0) { on=0; aoff=0; p5; zader=0; regaoff=0; mute(0); delay_s(1); tON=acon; 
   \                     ??CrossCallReturnLabel_354:
   \   0000006E   9100....           LDS     R16, on
   \   00000072   9110....           LDS     R17, onok
   \   00000076   2B01               OR      R16, R17
   \   00000078   F4B1               BRNE    ??main_power_4
   \   0000007A   E000               LDI     R16, 0
   \   0000007C   9300....           STS     on, R16
   \   00000080   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_37:
   \   00000082   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_243:
   \   00000084   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_132:
   \   00000086   E200               LDI     R16, 32
   \   00000088   E41E               LDI     R17, 78
   \   0000008A   ....               LDI     R30, LOW(tON)
   \   0000008C   ....               LDI     R31, (tON) >> 8
   \   0000008E   ....               RCALL   ??Subroutine141_0
    237              			    PORTB=0; RES(PORTD,7);RES(PORTD,4); resOUT(); RES(PORTC,5); RES(PORTC,0);RES(PORTD,3); onok=1;
   \                     ??CrossCallReturnLabel_340:
   \   00000090   E000               LDI     R16, 0
   \   00000092   BB08               OUT     0x18, R16
   \   00000094   9897               CBI     0x12, 0x07
   \   00000096   9894               CBI     0x12, 0x04
   \   00000098   ....               RCALL   resOUT
   \   0000009A   98AD               CBI     0x15, 0x05
   \   0000009C   98A8               CBI     0x15, 0x00
   \   0000009E   9893               CBI     0x12, 0x03
   \   000000A0   E001               LDI     R16, 1
   \   000000A2   9300....           STS     onok, R16
    238                                    }
    239                                      
    240          }
   \                     ??main_power_4:
   \   000000A6   9508               RET
   \   000000A8                      REQUIRE _A_PIND
   \   000000A8                      REQUIRE _A_PORTD
   \   000000A8                      REQUIRE _A_PORTB
   \   000000A8                      REQUIRE _A_PORTC

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002   9100....           LDS     R16, pultadr
   \   00000006   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_316:
   \   00000008   ....               RJMP    ?Subroutine101

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   9100....           LDS     R16, pultadr
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_250:
   \   00000002                      REQUIRE ?Subroutine126
   \   00000002                      ;               // Fall through to label ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine116
   \   00000002                      ;               // Fall through to label ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   9300....           STS     aoff, R16
   \   00000004   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_277:
   \   00000006   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_220:
   \   00000008                      REQUIRE ?Subroutine110
   \   00000008                      ;               // Fall through to label ?Subroutine110

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   9300....           STS     ??regaoff, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     on, R16
   \   00000006   9300....           STS     onok, R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine143_0:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   E314               LDI     R17, 52
   \   00000004   E02C               LDI     R18, 12
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET
    241          

   \                                 In  segment CODE, align 2, keep-with-next
    242          void main_logic()//-----------------------главная логика --------------------
   \                     main_logic:
    243          {   
    244             static uchar last_pultadr;
    245             migWORK();
   \   00000000   ....               RCALL   migWORK
    246             
    247             if (pultadr==last_pultadr) {}
    248            
    249             if (pultadr!=0)
   \   00000002   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_118:
   \   00000004   2300               TST     R16
   \   00000006   F409               BRNE    $+2+2
   \   00000008   C07C               RJMP    ??main_logic_0
    250             {//если есть команда с пульта
    251               
    252                rprintfStr("normal>command find  adr=");
   \   0000000A   ....               LDI     R16, LOW(`?<Constant "normal>command find  ...">`)
   \   0000000C   ....               LDI     R17, (`?<Constant "normal>command find  ...">`) >> 8
   \   0000000E   ....               RCALL   rprintfStr
    253                rprintfFloat(6, pultadr ); ent;
   \   00000010   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_119:
   \   00000012   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_301:
   \   00000014   ....               RCALL   ?Subroutine131
    254               
    255               if (pultadr==1 || pultadr==60) {if (sel!=1)  { mute(0); lastsel=sel; sel=1; pult(); } else   migINI(sel-1, 3 ,0); 
   \                     ??CrossCallReturnLabel_292:
   \   00000016   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_120:
   \   00000018   3001               CPI     R16, 1
   \   0000001A   F011               BREQ    ??main_logic_1
   \   0000001C   330C               CPI     R16, 60
   \   0000001E   F451               BRNE    ??main_logic_2
   \                     ??main_logic_1:
   \   00000020   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_253:
   \   00000022   3001               CPI     R16, 1
   \   00000024   F021               BREQ    ??main_logic_3
   \   00000026   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_22:
   \   00000028   E001               LDI     R16, 1
   \   0000002A   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_144:
   \   0000002C   C003               RJMP    ??main_logic_2
   \                     ??main_logic_3:
   \   0000002E   ....               RCALL   ?Subroutine47
    256           }
   \                     ??CrossCallReturnLabel_63:
   \   00000030   E000               LDI     R16, 0
   \   00000032   ....               RCALL   migINI
    257               if (pultadr==5 || pultadr==65) {if (sel!=2)  {  mute(0);lastsel=sel;sel=2; pult(); }  else  migINI(sel-1, 3 ,0); 
   \                     ??main_logic_2:
   \   00000034   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_121:
   \   00000036   3005               CPI     R16, 5
   \   00000038   F011               BREQ    ??main_logic_4
   \   0000003A   3401               CPI     R16, 65
   \   0000003C   F451               BRNE    ??main_logic_5
   \                     ??main_logic_4:
   \   0000003E   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_254:
   \   00000040   3002               CPI     R16, 2
   \   00000042   F021               BREQ    ??main_logic_6
   \   00000044   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_23:
   \   00000046   E002               LDI     R16, 2
   \   00000048   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_143:
   \   0000004A   C003               RJMP    ??main_logic_5
   \                     ??main_logic_6:
   \   0000004C   ....               RCALL   ?Subroutine47
    258          }
   \                     ??CrossCallReturnLabel_64:
   \   0000004E   E001               LDI     R16, 1
   \   00000050   ....               RCALL   migINI
    259               if (pultadr==10 || pultadr==70) {if (sel!=3) { mute(0); lastsel=sel;sel=3; pult(); } else    migINI(sel-1, 3 ,0); 
   \                     ??main_logic_5:
   \   00000052   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_122:
   \   00000054   300A               CPI     R16, 10
   \   00000056   F011               BREQ    ??main_logic_7
   \   00000058   3406               CPI     R16, 70
   \   0000005A   F451               BRNE    ??main_logic_8
   \                     ??main_logic_7:
   \   0000005C   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_255:
   \   0000005E   3003               CPI     R16, 3
   \   00000060   F021               BREQ    ??main_logic_9
   \   00000062   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_24:
   \   00000064   E003               LDI     R16, 3
   \   00000066   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_142:
   \   00000068   C003               RJMP    ??main_logic_8
   \                     ??main_logic_9:
   \   0000006A   ....               RCALL   ?Subroutine47
    260          }
   \                     ??CrossCallReturnLabel_65:
   \   0000006C   E002               LDI     R16, 2
   \   0000006E   ....               RCALL   migINI
    261               if (pultadr==15 || pultadr==75) {if (sel!=4) { mute(0); lastsel=sel;sel=4; pult(); } else   migINI(sel-1, 3 ,0); 
   \                     ??main_logic_8:
   \   00000070   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_123:
   \   00000072   300F               CPI     R16, 15
   \   00000074   F011               BREQ    ??main_logic_10
   \   00000076   340B               CPI     R16, 75
   \   00000078   F451               BRNE    ??main_logic_11
   \                     ??main_logic_10:
   \   0000007A   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_256:
   \   0000007C   3004               CPI     R16, 4
   \   0000007E   F021               BREQ    ??main_logic_12
   \   00000080   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_25:
   \   00000082   E004               LDI     R16, 4
   \   00000084   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_141:
   \   00000086   C003               RJMP    ??main_logic_11
   \                     ??main_logic_12:
   \   00000088   ....               RCALL   ?Subroutine47
    262           }
   \                     ??CrossCallReturnLabel_66:
   \   0000008A   E003               LDI     R16, 3
   \   0000008C   ....               RCALL   migINI
    263               if ((pultadr==20  || pultadr==80) && mode!=1) { if (sel!=5) { mute(0); lastsel=sel;sel=5; pult();}  else  migINI(sel-1, 3 ,0); 
   \                     ??main_logic_11:
   \   0000008E   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_124:
   \   00000090   3104               CPI     R16, 20
   \   00000092   F011               BREQ    ??main_logic_13
   \   00000094   3500               CPI     R16, 80
   \   00000096   F479               BRNE    ??main_logic_14
   \                     ??main_logic_13:
   \   00000098   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_282:
   \   0000009A   F051               BREQ    ??main_logic_15
   \   0000009C   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_257:
   \   0000009E   3005               CPI     R16, 5
   \   000000A0   F021               BREQ    ??main_logic_16
   \   000000A2   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_26:
   \   000000A4   E005               LDI     R16, 5
   \   000000A6   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_140:
   \   000000A8   C003               RJMP    ??main_logic_15
   \                     ??main_logic_16:
   \   000000AA   ....               RCALL   ?Subroutine47
    264          }
   \                     ??CrossCallReturnLabel_67:
   \   000000AC   E004               LDI     R16, 4
   \   000000AE   ....               RCALL   migINI
    265               
    266               
    267               //тыловые  ------------------------------------------------------
    268               if ((  pultadr==20  || pultadr==80) && mode==1) {  
   \                     ??main_logic_15:
   \   000000B0   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_125:
   \   000000B2   3104               CPI     R16, 20
   \   000000B4   F019               BREQ    ??main_logic_17
   \                     ??main_logic_14:
   \   000000B6   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_126:
   \   000000B8   3500               CPI     R16, 80
   \   000000BA   F519               BRNE    ??main_logic_0
   \                     ??main_logic_17:
   \   000000BC   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_283:
   \   000000BE   F509               BRNE    ??main_logic_0
    269                   
    270                 if (til==0) { SET(PORTC,5);til=1;  
   \   000000C0   9100....           LDS     R16, ??til
   \   000000C4   2300               TST     R16
   \   000000C6   F471               BRNE    ??main_logic_18
   \   000000C8   9AAD               SBI     0x15, 0x05
   \   000000CA   E001               LDI     R16, 1
   \   000000CC   9300....           STS     ??til, R16
    271                         for (uchar i=0; i<2; i++) {SET(PORTB,4);p2;RES(PORTB,4);p2;}  SET(PORTB,4);  pultadr=0;  p1;}
   \   000000D0   E002               LDI     R16, 2
   \                     ??main_logic_19:
   \   000000D2   9AC4               SBI     0x18, 0x04
   \   000000D4   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_221:
   \   000000D6   98C4               CBI     0x18, 0x04
   \   000000D8   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_222:
   \   000000DA   950A               DEC     R16
   \   000000DC   F7D1               BRNE    ??main_logic_19
   \   000000DE   9AC4               SBI     0x18, 0x04
   \   000000E0   E000               LDI     R16, 0
   \   000000E2   C005               RJMP    ??main_logic_20
    272                 else 
    273                 if (til==1) {   RES(PORTC,5); RES(PORTB,4); til=0; pultadr=0; p1; }
   \                     ??main_logic_18:
   \   000000E4   98AD               CBI     0x15, 0x05
   \   000000E6   98C4               CBI     0x18, 0x04
   \   000000E8   E000               LDI     R16, 0
   \   000000EA   9300....           STS     ??til, R16
   \                     ??main_logic_20:
   \   000000EE   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_352:
   \   000000F0   E70F               LDI     R16, 127
   \   000000F2   E318               LDI     R17, 56
   \   000000F4   E021               LDI     R18, 1
   \   000000F6   5001               SUBI    R16, 1
   \   000000F8   4010               SBCI    R17, 0
   \   000000FA   4020               SBCI    R18, 0
   \   000000FC   F7E1               BRNE    $-6
   \   000000FE   C000               RJMP    $+2
   \   00000100   0000               NOP
    274               
    275                                                               }
    276             }//если есть команда с пульта
    277             
    278            //--------------- mute -------------------
    279            //if (mute==1) AC_OFF; else { if (zader==0) AC_ON; }
    280            if (zader==1) {timerzad++;  if (timerzad> tON)  {zader=0;timerzad=0; mute(1);} }//задержка включения
   \                     ??main_logic_0:
   \   00000102   9100....           LDS     R16, zader
   \   00000106   2300               TST     R16
   \   00000108   F0B1               BREQ    ??main_logic_21
   \   0000010A   ....               LDI     R30, LOW(timerzad)
   \   0000010C   ....               LDI     R31, (timerzad) >> 8
   \   0000010E   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_180:
   \   00000110   5F0F               SUBI    R16, 255
   \   00000112   4F1F               SBCI    R17, 255
   \   00000114   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_341:
   \   00000116   ....               LDI     R30, LOW(tON)
   \   00000118   ....               LDI     R31, (tON) >> 8
   \   0000011A   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_181:
   \   0000011C   ....               LDI     R30, LOW(timerzad)
   \   0000011E   ....               LDI     R31, (timerzad) >> 8
   \   00000120   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_100:
   \   00000122   1702               CP      R16, R18
   \   00000124   0713               CPC     R17, R19
   \   00000126   F438               BRCC    ??main_logic_21
   \   00000128   E000               LDI     R16, 0
   \   0000012A   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_218:
   \   0000012C   E010               LDI     R17, 0
   \   0000012E   8310               ST      Z, R17
   \   00000130   8311               STD     Z+1, R17
   \   00000132   E001               LDI     R16, 1
   \   00000134   ....               RCALL   mute
    281            
    282            if (keyMUTE ||pultadr==35 || pultadr==100)  
   \                     ??main_logic_21:
   \   00000136   9981               SBIC    0x10, 0x01
   \   00000138   C002               RJMP    ??main_logic_22
   \   0000013A   9B85               SBIS    0x10, 0x05
   \   0000013C   C005               RJMP    ??main_logic_23
   \                     ??main_logic_22:
   \   0000013E   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_127:
   \   00000140   3203               CPI     R16, 35
   \   00000142   F011               BREQ    ??main_logic_23
   \   00000144   3604               CPI     R16, 100
   \   00000146   F419               BRNE    ??main_logic_24
    283            {
    284              mute(-1); //инверсия состояния
   \                     ??main_logic_23:
   \   00000148   EF0F               LDI     R16, 255
   \   0000014A   EF1F               LDI     R17, 255
   \   0000014C   ....               RCALL   mute
    285            }
    286             
    287             
    288             
    289            //--------------- aoff --------------------
    290           
    291             if (keyAOFF || pultadr==30 || pultadr==95) 
   \                     ??main_logic_24:
   \   0000014E   9980               SBIC    0x10, 0x00
   \   00000150   C002               RJMP    ??main_logic_25
   \   00000152   9B85               SBIS    0x10, 0x05
   \   00000154   C005               RJMP    ??main_logic_26
   \                     ??main_logic_25:
   \   00000156   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_128:
   \   00000158   310E               CPI     R16, 30
   \   0000015A   F011               BREQ    ??main_logic_26
   \   0000015C   350F               CPI     R16, 95
   \   0000015E   F5A9               BRNE    ??main_logic_27
    292             {
    293               
    294            if ( aoff==1 && regaoff>=3)  {  RES(PORTB,5);  p5; aoff=0; regaoff=0; pultadr=0;}//отмена aoff 
   \                     ??main_logic_26:
   \   00000160   9100....           LDS     R16, aoff
   \   00000164   2300               TST     R16
   \   00000166   F049               BREQ    ??main_logic_28
   \   00000168   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_145:
   \   0000016A   3003               CPI     R16, 3
   \   0000016C   F030               BRCS    ??main_logic_28
   \   0000016E   98C5               CBI     0x18, 0x05
   \   00000170   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_276:
   \   00000172   9300....           STS     aoff, R16
   \   00000176   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_353:
   \   00000178   C003               RJMP    ??main_logic_29
    295            if ( regaoff==0) { aoff=1; regaoff++;  TimerSet(&tm1, 120000)/*2 часа*/; pultadr=0;  for (uchar i=0; i<3; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??main_logic_28:
   \   0000017A   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_146:
   \   0000017C   2300               TST     R16
   \   0000017E   F451               BRNE    ??main_logic_30
   \                     ??main_logic_29:
   \   00000180   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_15:
   \   00000182   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_225:
   \   00000184   EC40               LDI     R20, 192
   \   00000186   ED54               LDI     R21, 212
   \   00000188   E061               LDI     R22, 1
   \   0000018A   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_349:
   \   0000018C   E003               LDI     R16, 3
   \                     ??main_logic_31:
   \   0000018E   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_106:
   \   00000190   F7F1               BRNE    ??main_logic_31
   \   00000192   9AC5               SBI     0x18, 0x05
    296            if (regaoff==1) { aoff=1; regaoff++; TimerSet(&tm1, 60000)/*1 часа*/; pultadr=0; for (uchar i=0; i<2; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??main_logic_30:
   \   00000194   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_147:
   \   00000196   3001               CPI     R16, 1
   \   00000198   F451               BRNE    ??main_logic_32
   \   0000019A   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_16:
   \   0000019C   E002               LDI     R16, 2
   \   0000019E   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_226:
   \   000001A0   E640               LDI     R20, 96
   \   000001A2   EE5A               LDI     R21, 234
   \   000001A4   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_347:
   \   000001A6   E002               LDI     R16, 2
   \                     ??main_logic_33:
   \   000001A8   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_107:
   \   000001AA   F7F1               BRNE    ??main_logic_33
   \   000001AC   9AC5               SBI     0x18, 0x05
    297            if (regaoff==2) { aoff=1; regaoff++; TimerSet(&tm1, 30000)/*0.5 часа*/; pultadr=0; for (uchar i=0; i<1; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??main_logic_32:
   \   000001AE   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_148:
   \   000001B0   3002               CPI     R16, 2
   \   000001B2   F459               BRNE    ??main_logic_27
   \   000001B4   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_17:
   \   000001B6   E003               LDI     R16, 3
   \   000001B8   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_227:
   \   000001BA   E340               LDI     R20, 48
   \   000001BC   E755               LDI     R21, 117
   \   000001BE   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_348:
   \   000001C0   9AC5               SBI     0x18, 0x05
   \   000001C2   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_113:
   \   000001C4   98C5               CBI     0x18, 0x05
   \   000001C6   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_114:
   \   000001C8   9AC5               SBI     0x18, 0x05
    298            
    299             }
    300          
    301             
    302           //  if ((keyAOFF || pultadr==30 || pultadr==95) && aoff==0) 
    303           //     {   aoff=1;  iniT1(60*60*2)/*2 часа*/; pultadr=0;
    304           //         for (uchar i=0; i<2; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5);
    305            //   
    306            //        
    307           //         for (uint i=0; i<1000; i++)
    308           //         {   char rez=du_main(0);  if (rez==1) { pultadr=analizCOD();break; }}
    309           //         
    310            //    //если user продолжает удерживать
    311            //    if ((keyAOFF || pultadr==30 || pultadr==95) ) { iniT1(60*30);/*30 мин*/
    312           //      for (uchar i=0; i<4; i++)  {SET(PORTB,5);p2;p2;p2;p2;p2;RES(PORTB,5);p2;}  SET(PORTB,5);
    313            //                                    }
    314            //    
    315             //   }
    316                                                                  
    317             
    318            
    319           
    320            if (aoff==1)  {   TimerTick(&tm1); if (tm1.out) { on=0; onok=0;  aoff=0; p5; zader=0; regaoff=0;}
   \                     ??main_logic_27:
   \   000001CA   9100....           LDS     R16, aoff
   \   000001CE   2300               TST     R16
   \   000001D0   F049               BREQ    ??CrossCallReturnLabel_36
   \   000001D2   ....               LDI     R16, LOW(tm1)
   \   000001D4   ....               LDI     R17, (tm1) >> 8
   \   000001D6   ....               RCALL   TimerTick
   \   000001D8   9100....           LDS     R16, (tm1 + 8)
   \   000001DC   2300               TST     R16
   \   000001DE   F011               BREQ    ??CrossCallReturnLabel_36
   \   000001E0   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_35:
   \   000001E2   ....               RCALL   ?Subroutine17
    321                          } 
    322                          
    323           //--------------- select -------------------
    324                          if ( u!=1) {//что бы во время работы UART не срабатывал
   \                     ??CrossCallReturnLabel_36:
   \   000001E4   9100....           LDS     R16, ??u
   \   000001E8   2300               TST     R16
   \   000001EA   F5C1               BRNE    ??main_logic_34
    325             uchar kol;  if  (mode==1) kol=4; else kol=5;
   \   000001EC   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_284:
   \   000001EE   F411               BRNE    ??main_logic_35
   \   000001F0   E004               LDI     R16, 4
   \   000001F2   C001               RJMP    ??main_logic_36
   \                     ??main_logic_35:
   \   000001F4   E005               LDI     R16, 5
    326             if (keySEL ||pultadr==40 || pultadr==105) 
   \                     ??main_logic_36:
   \   000001F6   9981               SBIC    0x10, 0x01
   \   000001F8   C002               RJMP    ??main_logic_37
   \   000001FA   9985               SBIC    0x10, 0x05
   \   000001FC   C006               RJMP    ??main_logic_38
   \                     ??main_logic_37:
   \   000001FE   9110....           LDS     R17, pultadr
   \   00000202   3218               CPI     R17, 40
   \   00000204   F011               BREQ    ??main_logic_38
   \   00000206   3619               CPI     R17, 105
   \   00000208   F4A9               BRNE    ??CrossCallReturnLabel_139
    327                          { 
    328                                  if (sel<=(kol-1)) { mute(0); p2; RES(PORTB,(sel-1));lastsel=sel; sel++; pult(); } 
   \                     ??main_logic_38:
   \   0000020A   950A               DEC     R16
   \   0000020C   9110....           LDS     R17, ??sel
   \   00000210   1701               CP      R16, R17
   \   00000212   E000               LDI     R16, 0
   \   00000214   E010               LDI     R17, 0
   \   00000216   F038               BRCS    ??main_logic_39
   \   00000218   ....               RCALL   mute
   \   0000021A   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_115:
   \   0000021C   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_251:
   \   0000021E   9300....           STS     ??lastsel, R16
   \   00000222   9503               INC     R16
   \   00000224   C006               RJMP    ??main_logic_40
    329                                 else {  mute(0);  RES(PORTB,(sel-1)); sel=1; pult(); }
   \                     ??main_logic_39:
   \   00000226   ....               RCALL   mute
   \   00000228   9140....           LDS     R20, ??sel
   \   0000022C   954A               DEC     R20
   \   0000022E   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_288:
   \   00000230   E001               LDI     R16, 1
    330                        
    331                          }
   \                     ??main_logic_40:
   \   00000232   ....               RCALL   ?Subroutine80
    332                                   
    333            //--------------- return sel -------------------  возврат в предыдущий source                 
    334             if ( pultadr==55 || pultadr==85) {
   \                     ??CrossCallReturnLabel_139:
   \   00000234   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_129:
   \   00000236   3307               CPI     R16, 55
   \   00000238   F011               BREQ    ??main_logic_41
   \   0000023A   3505               CPI     R16, 85
   \   0000023C   F479               BRNE    ??main_logic_34
    335               
    336               if (sel!=lastsel) {
   \                     ??main_logic_41:
   \   0000023E   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_258:
   \   00000240   9110....           LDS     R17, ??lastsel
   \   00000244   1701               CP      R16, R17
   \   00000246   F051               BREQ    ??main_logic_34
    337                 mute(0);  RES(PORTB,(sel-1)); uchar tmp1=sel; sel=lastsel;  lastsel=tmp1; pultadr=0;  pult();
   \   00000248   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_241:
   \   0000024A   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_252:
   \   0000024C   9110....           LDS     R17, ??lastsel
   \   00000250   9310....           STS     ??sel, R17
   \   00000254   9300....           STS     ??lastsel, R16
   \   00000258   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_355:
   \   0000025A   ....               RCALL   pult
    338               }
    339                                                }
    340                        
    341                                    }//что бы во время работы UART не срабатывал
    342                                     
    343                                    
    344                           
    345           //--------------- ГРОМКОСТЬ -------------------
    346             if (pultadr==45 || pultadr==110) { gro(1); p5;  pultadr=0; }  
   \                     ??main_logic_34:
   \   0000025C   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_130:
   \   0000025E   320D               CPI     R16, 45
   \   00000260   F011               BREQ    ??main_logic_42
   \   00000262   360E               CPI     R16, 110
   \   00000264   F411               BRNE    ??main_logic_43
   \                     ??main_logic_42:
   \   00000266   E001               LDI     R16, 1
   \   00000268   C005               RJMP    ??main_logic_44
    347             if (pultadr==50 || pultadr==115) { gro(2); p5;  pultadr=0; }  
   \                     ??main_logic_43:
   \   0000026A   3302               CPI     R16, 50
   \   0000026C   F011               BREQ    ??main_logic_45
   \   0000026E   3703               CPI     R16, 115
   \   00000270   F421               BRNE    ??CrossCallReturnLabel_356
   \                     ??main_logic_45:
   \   00000272   E002               LDI     R16, 2
   \                     ??main_logic_44:
   \   00000274   ....               RCALL   gro
   \   00000276   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_248:
   \   00000278   ....               RCALL   ??Subroutine143_0
    348             
    349             
    350                          
    351           
    352                                    
    353                                    
    354             last_pultadr=pultadr;
   \                     ??CrossCallReturnLabel_356:
   \   0000027A   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_131:
   \   0000027C   9300....           STS     ??last_pultadr, R16
    355             
    356          }
   \   00000280   9508               RET
   \   00000282                      REQUIRE _A_PORTC
   \   00000282                      REQUIRE _A_PORTB
   \   00000282                      REQUIRE _A_PIND

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   9100....           LDS     R16, ??regaoff
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   EF4F               LDI     R20, 255
   \   00000002   E750               LDI     R21, 112
   \   00000004   E062               LDI     R22, 2
   \   00000006   5041               SUBI    R20, 1
   \   00000008   4050               SBCI    R21, 0
   \   0000000A   4060               SBCI    R22, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   9300....           STS     ??sel, R16
   \   00000004   ....               RJMP    pult

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine71:
   \   00000000   9AC5               SBI     0x18, 0x05
   \   00000002   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_223:
   \   00000004   98C5               CBI     0x18, 0x05
   \   00000006   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_224:
   \   00000008   950A               DEC     R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   E020               LDI     R18, 0
   \   00000002   E013               LDI     R17, 3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   E060               LDI     R22, 0
   \   00000002                      REQUIRE ??Subroutine142_0
   \   00000002                      ;               // Fall through to label ??Subroutine142_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine142_0:
   \   00000000   E070               LDI     R23, 0
   \   00000002   ....               LDI     R16, LOW(tm1)
   \   00000004   ....               LDI     R17, (tm1) >> 8
   \   00000006   ....               RCALL   TimerSet
   \   00000008                      REQUIRE ??Subroutine143_0
   \   00000008                      ;               // Fall through to label ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_242:
   \   00000002   9100....           LDS     R16, ??sel
   \   00000006   9300....           STS     ??lastsel, R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E001               LDI     R16, 1
   \   00000002   9300....           STS     aoff, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9140....           LDS     R20, ??sel
   \   00000004   954A               DEC     R20
   \   00000006   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_290:
   \   00000008                      REQUIRE ?Subroutine123
   \   00000008                      ;               // Fall through to label ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   9100....           LDS     R16, ??sel
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine70:
   \   00000000   9100....           LDS     R16, ??mode
   \   00000004   ....               RJMP    ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   BB18               OUT     0x18, R17
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine88:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_239:
   \   00000002   9500               COM     R16
   \   00000004   B318               IN      R17, 0x18
   \   00000006   2310               AND     R17, R16
   \   00000008   ....               RJMP    ?Subroutine128

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??last_pultadr:
   \   00000000                      DS8 1
    357           //------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    358          void source()
   \                     source:
    359          {  
    360            if (sel==1){ resOUT(); resled(); SET(PORTC,1);}
   \   00000000   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_259:
   \   00000002   3001               CPI     R16, 1
   \   00000004   F411               BRNE    ??source_0
   \   00000006   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_138:
   \   00000008   9AA9               SBI     0x15, 0x01
    361            if (sel==2){ resOUT(); resled(); SET(PORTC,2);}
   \                     ??source_0:
   \   0000000A   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_260:
   \   0000000C   3002               CPI     R16, 2
   \   0000000E   F411               BRNE    ??source_1
   \   00000010   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_137:
   \   00000012   9AAA               SBI     0x15, 0x02
    362            if (sel==3){ resOUT(); resled(); SET(PORTC,3);}
   \                     ??source_1:
   \   00000014   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_261:
   \   00000016   3003               CPI     R16, 3
   \   00000018   F411               BRNE    ??source_2
   \   0000001A   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_136:
   \   0000001C   9AAB               SBI     0x15, 0x03
    363            if (sel==4){ resOUT(); resled();SET(PORTC,4);}
   \                     ??source_2:
   \   0000001E   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_262:
   \   00000020   3004               CPI     R16, 4
   \   00000022   F411               BRNE    ??source_3
   \   00000024   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_135:
   \   00000026   9AAC               SBI     0x15, 0x04
    364            if (sel==5 && mode==0 ){  resOUT(); resled();SET(PORTC,5);}
   \                     ??source_3:
   \   00000028   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_263:
   \   0000002A   3005               CPI     R16, 5
   \   0000002C   F421               BRNE    ??source_4
   \   0000002E   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_269:
   \   00000030   F411               BRNE    ??source_4
   \   00000032   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_134:
   \   00000034   9AAD               SBI     0x15, 0x05
    365            
    366            //if (mute(100)!=1 )
    367             //if (mute(100)!=1 ) mute(1);// /*if (zader==0)  */AC_ON;//вкл АС
    368          
    369             migINI(sel-1, 5 ,0); 
   \                     ??source_4:
   \   00000036   E020               LDI     R18, 0
   \   00000038   E015               LDI     R17, 5
   \   0000003A   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_264:
   \   0000003C   950A               DEC     R16
   \   0000003E   ....               RCALL   migINI
    370             zader==1;
                         ^
Warning[Pa130]: value is not used
   \   00000040   9100....           LDS     R16, zader
    371           
    372          }
   \   00000044   9508               RET
   \   00000046                      REQUIRE _A_PORTC

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   ....               RCALL   resOUT
   \   00000002   ....               RJMP    resled
    373          
    374          
    375          
    376          
    377          
    378          
    379          
    380          
    381          
    382          
    383          
    384          
    385          

   \                                 In  segment CODE, align 2, keep-with-next
    386          bool proverka(uchar adr)//защита от дублирования функции на кнопке
   \                     proverka:
    387          { 
   \   00000000   2F70               MOV     R23, R16
    388             for (uchar i=0; i<adr; i++)
   \   00000002   E060               LDI     R22, 0
   \   00000004   C001               RJMP    ??proverka_0
   \                     ??proverka_1:
   \   00000006   9563               INC     R22
   \                     ??proverka_0:
   \   00000008   1767               CP      R22, R23
   \   0000000A   F450               BRCC    ??proverka_2
    389             {
    390               if (k[i]==cod1)
   \   0000000C   E002               LDI     R16, 2
   \   0000000E   9F60               MUL     R22, R16
   \   00000010   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_149:
   \   00000012   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_231:
   \   00000014   F7C1               BRNE    ??proverka_1
    391                 if (k[i+1]==cod2)
   \   00000016   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_56:
   \   00000018   F7B1               BRNE    ??proverka_1
    392                   if (k[i+2]==cod3) return 0;
   \   0000001A   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_58:
   \   0000001C   F7A1               BRNE    ??proverka_1
   \   0000001E   ....               RJMP    ?Subroutine126
    393             }
    394          
    395             return 1;
   \                     ??proverka_2:
   \   00000020   E001               LDI     R16, 1
   \   00000022   9508               RET
    396          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine84:
   \   00000000   ....               LDI     R18, LOW(k)
   \   00000002   ....               LDI     R19, (k) >> 8
   \   00000004   0D20               ADD     R18, R0
   \   00000006   1D31               ADC     R19, R1
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   5F2C               SUBI    R18, 252
   \   00000002   4F3F               SBCI    R19, 255
   \   00000004   01A9               MOVW    R21:R20, R19:R18
   \   00000006   ....               RCALL   __eeget16_16
   \   00000008   ....               LDI     R30, LOW(cod3)
   \   0000000A   ....               LDI     R31, (cod3) >> 8
   \   0000000C   8120               LD      R18, Z
   \   0000000E   8131               LDD     R19, Z+1
   \   00000010   1702               CP      R16, R18
   \   00000012   0713               CPC     R17, R19
   \   00000014   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   01A9               MOVW    R21:R20, R19:R18
   \   00000002   5F4E               SUBI    R20, 254
   \   00000004   4F5F               SBCI    R21, 255
   \   00000006   ....               RCALL   __eeget16_16
   \   00000008   ....               LDI     R30, LOW(cod2)
   \   0000000A   ....               LDI     R31, (cod2) >> 8
   \   0000000C   ....               RJMP    ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   01A9               MOVW    R21:R20, R19:R18
   \   00000002   ....               RCALL   __eeget16_16
   \   00000004   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_208:
   \   00000006                      REQUIRE ?Subroutine112
   \   00000006                      ;               // Fall through to label ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004   1704               CP      R16, R20
   \   00000006   0715               CPC     R17, R21
   \   00000008   9508               RET
    397          
    398          

   \                                 In  segment CODE, align 2, keep-with-next
    399          void programming (uchar rez)
   \                     programming:
    400          {  
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    401            uchar adr;
    402             if (tekfunc==255) return;
   \   00000004   9110....           LDS     R17, ??tekfunc
   \   00000008   3F1F               CPI     R17, 255
   \   0000000A   F131               BREQ    ??CrossCallReturnLabel_9
    403             if (!get)  { adr=getadr(); get=1; }//получаем адрес и зажигаем программируемую функцию
   \   0000000C   9110....           LDS     R17, ??get
   \   00000010   2311               TST     R17
   \   00000012   F421               BRNE    ??programming_0
   \   00000014   ....               RCALL   getadr
   \   00000016   E011               LDI     R17, 1
   \   00000018   9310....           STS     ??get, R17
    404             if (rez==1)
   \                     ??programming_0:
   \   0000001C   3081               CPI     R24, 1
   \   0000001E   F4E1               BRNE    ??CrossCallReturnLabel_9
    405             {
    406               if (proverka(adr)) 
   \   00000020   ....               RCALL   proverka
   \   00000022   2300               TST     R16
   \   00000024   F0C9               BREQ    ??CrossCallReturnLabel_9
    407               {
    408                   writeCOD();
   \   00000026   ....               RCALL   writeCOD
    409                   led_all(1); delay_s(1); led_all(0); 
   \   00000028   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   0000002A   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_133:
   \   0000002C   ....               RCALL   ?Subroutine13
    410                          
    411                   tekfunc++;  get=0;
   \                     ??CrossCallReturnLabel_31:
   \   0000002E   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_330:
   \   00000030   E000               LDI     R16, 0
   \   00000032   9300....           STS     ??get, R16
    412                   if (tekfunc==12) {  for (uchar i=0; i<10;i++) 
   \   00000036   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_111:
   \   00000038   300C               CPI     R16, 12
   \   0000003A   F439               BRNE    ??programming_1
   \   0000003C   E08A               LDI     R24, 10
    413                                         {led_all(1); p4; led_all(0);p4; }
   \                     ??programming_2:
   \   0000003E   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   00000040   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_151:
   \   00000042   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_30:
   \   00000044   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_152:
   \   00000046   958A               DEC     R24
   \   00000048   F7D1               BRNE    ??programming_2
    414                                    }
    415                   if (tekfunc>MAXFUNC) {tekfunc=255;led_all(1);}
   \                     ??programming_1:
   \   0000004A   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_112:
   \   0000004C   3108               CPI     R16, 24
   \   0000004E   F020               BRCS    ??CrossCallReturnLabel_9
   \   00000050   EF0F               LDI     R16, 255
   \   00000052   9300....           STS     ??tekfunc, R16
   \   00000056   ....               RCALL   ?Subroutine4
    416               
    417               }
    418             }
    419             
    420            /* 
    421             if (keyONsm) { 
    422                          led_all(1); delay_s(1); 
    423                          led_all(0); 
    424                          tekfunc++;  get=0;
    425                             if (tekfunc==12) {  for (uchar i=0; i<10;i++) 
    426                                     {led_all(1); p4; led_all(0);p4; }
    427                                }
    428                          if (tekfunc>MAXFUNC) {tekfunc=255;led_all(1);}
    429                         
    430                           }
    431              */ 
    432          }
   \                     ??CrossCallReturnLabel_9:
   \   00000058   ....               RJMP    ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   EE11               LDI     R17, 225
   \   00000004   E024               LDI     R18, 4
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET
    433          //--------------------------------------------------------------------
    434          

   \                                 In  segment CODE, align 2, keep-with-next
    435          void writeCOD()
   \                     writeCOD:
    436          {
    437            rprintfStr("write ..");
   \   00000000   ....               LDI     R16, LOW(`?<Constant "write ..">`)
   \   00000002   ....               LDI     R17, (`?<Constant "write ..">`) >> 8
   \   00000004   ....               RCALL   rprintfStr
    438            led_all(1);delay_s(3);
   \   00000006   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   00000008   EF0F               LDI     R16, 255
   \   0000000A   E91E               LDI     R17, 158
   \   0000000C   E224               LDI     R18, 36
   \   0000000E   5001               SUBI    R16, 1
   \   00000010   4010               SBCI    R17, 0
   \   00000012   4020               SBCI    R18, 0
   \   00000014   F7E1               BRNE    $-6
   \   00000016   C000               RJMP    $+2
   \   00000018   0000               NOP
    439            uchar adr=getadr();
   \   0000001A   ....               RCALL   getadr
    440           
    441            
    442                 
    443                 k[adr]=cod1; delay_ms(30);
   \   0000001C   E012               LDI     R17, 2
   \   0000001E   9F01               MUL     R16, R17
   \   00000020   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_150:
   \   00000022   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_205:
   \   00000024   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_182:
   \   00000026   ....               RCALL   ?Subroutine83
    444                 k[adr+1]=cod2; delay_ms(30);
   \                     ??CrossCallReturnLabel_229:
   \   00000028   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_374:
   \   0000002A   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_183:
   \   0000002C   01A9               MOVW    R21:R20, R19:R18
   \   0000002E   5F4E               SUBI    R20, 254
   \   00000030   4F5F               SBCI    R21, 255
   \   00000032   ....               RCALL   ?Subroutine111
    445                 k[adr+2]=cod3; delay_ms(30);
   \                     ??CrossCallReturnLabel_228:
   \   00000034   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_364:
   \   00000036   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_184:
   \   00000038   5F2C               SUBI    R18, 252
   \   0000003A   4F3F               SBCI    R19, 255
   \   0000003C   ....               RCALL   ?Subroutine83
    446              led_all(0);
   \                     ??CrossCallReturnLabel_230:
   \   0000003E   ....               RCALL   ?Subroutine13
    447                 rprintfStr("OK !   "); ent;
   \                     ??CrossCallReturnLabel_29:
   \   00000040   ....               LDI     R16, LOW(`?<Constant "OK !   ">`)
   \   00000042   ....               LDI     R17, (`?<Constant "OK !   ">`) >> 8
   \   00000044   ....               RCALL   rprintfStr
   \   00000046                      REQUIRE ?Subroutine131
   \   00000046                      ;               // Fall through to label ?Subroutine131
    448             
    449          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   01A9               MOVW    R21:R20, R19:R18
   \   00000002                      REQUIRE ?Subroutine111
   \   00000002                      ;               // Fall through to label ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   ....               RCALL   __eeput16_16
   \   00000002   E20F               LDI     R16, 47
   \   00000004   E715               LDI     R17, 117
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   F7E9               BRNE    $-4
   \   0000000C   C000               RJMP    $+2
   \   0000000E   0000               NOP
   \   00000010   9508               RET
    450          
    451          
    452          
    453           

   \                                 In  segment CODE, align 2, keep-with-next
    454          uchar analizCOD ()
   \                     analizCOD:
    455          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
    456           
    457           uint i;
    458            for (i=0; i<MAXEEP-4; i++) 
   \   00000002   E080               LDI     R24, 0
   \   00000004   E090               LDI     R25, 0
    459            {
    460             // if ((kbuf[i])==cod1)  if ((kbuf[i+1])==cod2) if ((kbuf[i+2])==cod3) return(i);
    461              if ((k[i])==cod1)  if ((k[i+1])==cod2) if ((k[i+2])==cod3) return(i);   
   \                     ??analizCOD_0:
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   0F00               LSL     R16
   \   0000000A   1F11               ROL     R17
   \   0000000C   ....               LDI     R18, LOW(k)
   \   0000000E   ....               LDI     R19, (k) >> 8
   \   00000010   0F20               ADD     R18, R16
   \   00000012   1F31               ADC     R19, R17
   \   00000014   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_232:
   \   00000016   F431               BRNE    ??analizCOD_1
   \   00000018   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_57:
   \   0000001A   F421               BRNE    ??analizCOD_1
   \   0000001C   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_59:
   \   0000001E   F411               BRNE    ??analizCOD_1
   \   00000020   2F08               MOV     R16, R24
   \   00000022   C005               RJMP    ??analizCOD_2
    462            }
   \                     ??analizCOD_1:
   \   00000024   9601               ADIW    R25:R24, 1
   \   00000026   3784               CPI     R24, 116
   \   00000028   E000               LDI     R16, 0
   \   0000002A   0790               CPC     R25, R16
   \   0000002C   F360               BRCS    ??analizCOD_0
    463          
    464          return(0);
   \                     ??analizCOD_2:
   \   0000002E                      REQUIRE ?Subroutine132
   \   0000002E                      ;               // Fall through to label ?Subroutine132
    465          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   E0E2               LDI     R30, 2
   \   00000002   ....               RJMP    ?EPILOGUE_B2_L09
    466          
    467          
    468          

   \                                 In  segment CODE, align 2, keep-with-next
    469          void resled(void)
   \                     resled:
    470          {
    471            RES(PORTB,0);RES(PORTB,1);RES(PORTB,2);RES(PORTB,3); if (mode==0)RES(PORTB,4);
   \   00000000   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_153:
   \   00000002   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_270:
   \   00000004   F409               BRNE    ??resled_0
   \   00000006   98C4               CBI     0x18, 0x04
    472          }
   \                     ??resled_0:
   \   00000008   9508               RET
   \   0000000A                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine86:
   \   00000000   98C0               CBI     0x18, 0x00
   \   00000002   98C1               CBI     0x18, 0x01
   \   00000004   98C2               CBI     0x18, 0x02
   \   00000006   98C3               CBI     0x18, 0x03
   \   00000008   9508               RET
    473          
    474          

   \                                 In  segment CODE, align 2, keep-with-next
    475          void resOUT(void)
   \                     resOUT:
    476          {
    477            RES(PORTC,1);RES(PORTC,2);RES(PORTC,3);RES(PORTC,4); if (mode==0)RES(PORTC,5);
   \   00000000   98A9               CBI     0x15, 0x01
   \   00000002   98AA               CBI     0x15, 0x02
   \   00000004   98AB               CBI     0x15, 0x03
   \   00000006   98AC               CBI     0x15, 0x04
   \   00000008   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_271:
   \   0000000A   F409               BRNE    ??resOUT_0
   \   0000000C   98AD               CBI     0x15, 0x05
    478            p2;//что бы не было перекрытия источников
   \                     ??resOUT_0:
   \   0000000E                      REQUIRE ?Subroutine75
   \   0000000E                      REQUIRE _A_PORTC
   \   0000000E                      ;               // Fall through to label ?Subroutine75
    479          }
    480          
    481          
    482           

   \                                 In  segment CODE, align 2, keep-with-next
    483          void led_all(bool a)
   \                     led_all:
    484          {
    485           if (a)
   \   00000000   2300               TST     R16
   \   00000002   F041               BREQ    ??led_all_0
    486           {
    487             SET(PORTB,0);SET(PORTB,1);SET(PORTB,2);SET(PORTB,3);SET(PORTB,4);SET(PORTB,5);
   \   00000004   9AC0               SBI     0x18, 0x00
   \   00000006   9AC1               SBI     0x18, 0x01
   \   00000008   9AC2               SBI     0x18, 0x02
   \   0000000A   9AC3               SBI     0x18, 0x03
   \   0000000C   9AC4               SBI     0x18, 0x04
   \   0000000E   9AC5               SBI     0x18, 0x05
    488             /*AC_ON; */SET(PORTD,7);
   \   00000010   9A97               SBI     0x12, 0x07
   \   00000012   9508               RET
    489           }
    490           else
    491            {
    492             RES(PORTB,0);RES(PORTB,1);RES(PORTB,2);RES(PORTB,3);RES(PORTB,4);RES(PORTB,5);
   \                     ??led_all_0:
   \   00000014   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_154:
   \   00000016   98C4               CBI     0x18, 0x04
   \   00000018   98C5               CBI     0x18, 0x05
    493             AC_OFF; RES(PORTD,7);
   \   0000001A   9896               CBI     0x12, 0x06
   \   0000001C   9897               CBI     0x12, 0x07
    494           } 
    495          }
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_PORTB
   \   00000020                      REQUIRE _A_PORTD
    496          
    497          

   \                                 In  segment CODE, align 2, keep-with-next
    498          void gro(uchar a)
   \                     gro:
    499          {
   \   00000000   2F10               MOV     R17, R16
    500            if (modegro!=1) {
   \   00000002   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_281:
   \   00000004   F051               BREQ    ??gro_0
    501            if (a==1) {SET(PORTC,0); delay_us(100);RES(PORTC,0);}
   \   00000006   3011               CPI     R17, 1
   \   00000008   F419               BRNE    ??gro_1
   \   0000000A   9AA8               SBI     0x15, 0x00
   \   0000000C   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_155:
   \   0000000E   C00E               RJMP    ??gro_2
    502            if (a==2) {SET(PORTD,3); delay_us(100);RES(PORTD,3);}  
   \                     ??gro_1:
   \   00000010   3012               CPI     R17, 2
   \   00000012   F511               BRNE    ??gro_3
   \   00000014   9A93               SBI     0x12, 0x03
   \   00000016   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_156:
   \   00000018   C019               RJMP    ??gro_4
    503                            }
    504            else  { 
    505              if (a==1) { if (gro1)  { gro1=0; RES(PORTC,0);  } else { gro1=1; SET(PORTC,0);  } }
   \                     ??gro_0:
   \   0000001A   3011               CPI     R17, 1
   \   0000001C   F471               BRNE    ??gro_5
   \   0000001E   9100....           LDS     R16, ??gro1
   \   00000022   2300               TST     R16
   \   00000024   F029               BREQ    ??gro_6
   \   00000026   E000               LDI     R16, 0
   \   00000028   9300....           STS     ??gro1, R16
   \                     ??gro_2:
   \   0000002C   98A8               CBI     0x15, 0x00
   \   0000002E   9508               RET
   \                     ??gro_6:
   \   00000030   E001               LDI     R16, 1
   \   00000032   9300....           STS     ??gro1, R16
   \   00000036   9AA8               SBI     0x15, 0x00
   \   00000038   9508               RET
    506              if (a==2) { if (gro2)  { gro2=0; RES(PORTD,3);  } else { gro2=1; SET(PORTD,3);  } }
   \                     ??gro_5:
   \   0000003A   3012               CPI     R17, 2
   \   0000003C   F469               BRNE    ??gro_3
   \   0000003E   9100....           LDS     R16, ??gro2
   \   00000042   2300               TST     R16
   \   00000044   F029               BREQ    ??gro_7
   \   00000046   E000               LDI     R16, 0
   \   00000048   9300....           STS     ??gro2, R16
   \                     ??gro_4:
   \   0000004C   9893               CBI     0x12, 0x03
   \   0000004E   9508               RET
   \                     ??gro_7:
   \   00000050   E001               LDI     R16, 1
   \   00000052   9300....           STS     ??gro2, R16
   \   00000056   9A93               SBI     0x12, 0x03
    507                  }
    508          }
   \                     ??gro_3:
   \   00000058   9508               RET
   \   0000005A                      REQUIRE _A_PORTC
   \   0000005A                      REQUIRE _A_PORTD

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   E805               LDI     R16, 133
   \   00000002   950A               DEC     R16
   \   00000004   F7F1               BRNE    $-2
   \   00000006   0000               NOP
   \   00000008   9508               RET
    509          
    510          
    511          
    512          
    513          
    514          
    515          //инициализация портов

   \                                 In  segment CODE, align 2, keep-with-next
    516          void iniPORTS()
   \                     iniPORTS:
    517          {
    518            
    519           
    520            //DDRx=0 - ВХОДЫ   PORTx = 0xFF; //подключаем нагрузочные резисторы
    521           //---------------------------------------------------------------
    522           //DDRx=0xFF - ВЫХОДЫ    PORTx = 0; //устанавливаем 0 на выходе
    523           
    524            
    525           DDRD = b(11011000);// 0xD8;  //PD3 4 6 7 ВЫХОДЫ  b11011000
   \   00000000   ED08               LDI     R16, 216
   \   00000002   BB01               OUT     0x11, R16
    526           PORTD = (uchar)~(b(11011000)); 
   \   00000004   E207               LDI     R16, 39
   \   00000006   BB02               OUT     0x12, R16
    527          
    528           
    529           DDRB = 0x3F; //порт B - выход    6,7-кварц
   \   00000008   E30F               LDI     R16, 63
   \   0000000A   BB07               OUT     0x17, R16
    530           PORTB = 0x00; 
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   BB08               OUT     0x18, R16
    531            
    532            
    533            DDRC =0xFF; 
   \   00000010   EF0F               LDI     R16, 255
   \   00000012   BB04               OUT     0x14, R16
    534            PORTC = 0x00; //устанавливаем 0 на выходе
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB05               OUT     0x15, R16
    535            
    536           
    537          // Timer(s)/Counter(s) Interrupt(s) initialization
    538          TIMSK=0x00;  
   \   00000018   BF09               OUT     0x39, R16
    539          TCNT0=0x00;
   \   0000001A   BF02               OUT     0x32, R16
    540          OCR1A=0x00;
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   BD0B               OUT     0x2B, R16
   \   00000020   BD0A               OUT     0x2A, R16
    541          OCR1B=0x00;
   \   00000022   BD09               OUT     0x29, R16
   \   00000024   BD08               OUT     0x28, R16
    542          TCCR1A=0x00;
   \   00000026   BD0F               OUT     0x2F, R16
    543            SET(TIMSK,TOIE1);//разреш прерывание при переполнении
   \   00000028   B709               IN      R16, 0x39
   \   0000002A   6004               ORI     R16, 0x04
   \   0000002C   BF09               OUT     0x39, R16
    544             TCCR1B=0; TIFR = 0xFF;  
   \   0000002E   BD1E               OUT     0x2E, R17
   \   00000030   EF0F               LDI     R16, 255
   \   00000032   BF08               OUT     0x38, R16
    545          TCNT1H=0x00;
   \   00000034   BD1D               OUT     0x2D, R17
    546          TCNT1L=0x00;
   \   00000036   BD1C               OUT     0x2C, R17
    547          ICR1H=0x00;
   \   00000038   BD17               OUT     0x27, R17
    548          ICR1L=0x00;
   \   0000003A   BD16               OUT     0x26, R17
    549          OCR1AH=0;
   \   0000003C   BD1B               OUT     0x2B, R17
    550          OCR1AL=0x00;
   \   0000003E   BD1A               OUT     0x2A, R17
    551          OCR1BH=0x00;
   \   00000040   BD19               OUT     0x29, R17
    552          OCR1BL=0x00;
   \   00000042   BD18               OUT     0x28, R17
    553          
    554          
    555          // External Interrupt(s) initialization
    556          // INT0: Off
    557          // INT1: Off
    558          // Interrupt on any change on pins PCINT0-7: Off
    559          //GIMSK=0x00;
    560          //MCUCR=0x00;
    561          
    562          SET(MCUCR,0); RES(MCUCR,1);//ПРЕРЫВАНИЕ ПО ИЗМЕНЕНИЮ УРОВНЯ INT0
   \   00000044   B705               IN      R16, 0x35
   \   00000046   6001               ORI     R16, 0x01
   \   00000048   BF05               OUT     0x35, R16
   \   0000004A   B705               IN      R16, 0x35
   \   0000004C   7F0D               ANDI    R16, 0xFD
   \   0000004E   BF05               OUT     0x35, R16
    563          SET(GICR,6);//РАЗРЕШАЕМ ПРЕРЫВАНИЕ INT0
   \   00000050   B70B               IN      R16, 0x3B
   \   00000052   6400               ORI     R16, 0x40
   \   00000054   BF0B               OUT     0x3B, R16
    564          
    565          
    566          //timer2
    567          SET(TCCR2, CS20 );
   \   00000056   B505               IN      R16, 0x25
   \   00000058   6001               ORI     R16, 0x01
   \   0000005A   BD05               OUT     0x25, R16
    568          RES(TCCR2, CS21 );
   \   0000005C   B505               IN      R16, 0x25
   \   0000005E   7F0D               ANDI    R16, 0xFD
   \   00000060   BD05               OUT     0x25, R16
    569          RES(TCCR2, CS22 );//делитель 1/1
   \   00000062   B505               IN      R16, 0x25
   \   00000064   7F0B               ANDI    R16, 0xFB
   \   00000066   BD05               OUT     0x25, R16
    570          // initialize counter
    571              TCNT2 = 0;
   \   00000068   BD14               OUT     0x24, R17
    572              // enable overflow interrupt
    573              TIMSK |= (1 << TOIE2);
   \   0000006A   B709               IN      R16, 0x39
   \   0000006C   6400               ORI     R16, 0x40
   \   0000006E   BF09               OUT     0x39, R16
    574          
    575              
    576          // Analog Comparator initialization
    577          // Analog Comparator: Off
    578          // Analog Comparator Input Capture by Timer/Counter 1: Off
    579          ACSR=0x80;
   \   00000070   E800               LDI     R16, 128
   \   00000072   B908               OUT     0x08, R16
    580          //DIDR=0x00;
    581          
    582          } 
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_DDRD
   \   00000076                      REQUIRE _A_PORTD
   \   00000076                      REQUIRE _A_DDRB
   \   00000076                      REQUIRE _A_PORTB
   \   00000076                      REQUIRE _A_DDRC
   \   00000076                      REQUIRE _A_PORTC
   \   00000076                      REQUIRE _A_TIMSK
   \   00000076                      REQUIRE _A_TCNT0
   \   00000076                      REQUIRE _A_OCR1A
   \   00000076                      REQUIRE _A_OCR1B
   \   00000076                      REQUIRE _A_TCCR1A
   \   00000076                      REQUIRE _A_TCCR1B
   \   00000076                      REQUIRE _A_TIFR
   \   00000076                      REQUIRE _A_TCNT1
   \   00000076                      REQUIRE _A_ICR1
   \   00000076                      REQUIRE _A_MCUCR
   \   00000076                      REQUIRE _A_GICR
   \   00000076                      REQUIRE _A_TCCR2
   \   00000076                      REQUIRE _A_TCNT2
   \   00000076                      REQUIRE _A_ACSR
    583          //************************************************************************
    584           
    585          

   \                                 In  segment CODE, align 2, keep-with-next
    586          void diag()
   \                     diag:
    587          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
    588            
    589            uchar sym = USART_GetChar(); //читаем буфер
   \   00000002   ....               RCALL   USART_GetChar
   \   00000004   2F90               MOV     R25, R16
    590            if (sym=='0') { pr=1;  rprintfStr("- vkluchen kratkiy viviod -");  ent;   }
   \   00000006   3300               CPI     R16, 48
   \   00000008   F439               BRNE    ??diag_0
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   9300....           STS     pr, R16
   \   00000010   ....               LDI     R16, LOW(`?<Constant "- vkluchen kratkiy vi...">`)
   \   00000012   ....               LDI     R17, (`?<Constant "- vkluchen kratkiy vi...">`) >> 8
   \   00000014   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_60:
   \   00000016   C01D               RJMP    ??diag_1
    591          
    592            if (sym=='e') {
   \                     ??diag_0:
   \   00000018   3605               CPI     R16, 101
   \   0000001A   F4C9               BRNE    ??diag_2
    593              ent;rprintfStr(" ==  EEPROM read == ");ent;
   \   0000001C   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_293:
   \   0000001E   ....               LDI     R16, LOW(`?<Constant " ==  EEPROM read == ">`)
   \   00000020   ....               LDI     R17, (`?<Constant " ==  EEPROM read == ">`) >> 8
   \   00000022   ....               RCALL   ?Subroutine46
    594              for (uchar i=0; i<MAXEEP-1; i++) { 
   \                     ??CrossCallReturnLabel_61:
   \   00000024   E080               LDI     R24, 0
    595                rprintfFloat(4, i );   rprintfStr(" > ");
   \                     ??diag_3:
   \   00000026   2F08               MOV     R16, R24
   \   00000028   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_319:
   \   0000002A   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_314:
   \   0000002C   E004               LDI     R16, 4
   \   0000002E   ....               RCALL   rprintfFloat
   \   00000030   ....               LDI     R16, LOW(`?<Constant " > ">`)
   \   00000032   ....               LDI     R17, (`?<Constant " > ">`) >> 8
   \   00000034   ....               RCALL   rprintfStr
    596                 rprintfFloat(9, k[i] ); ent;
   \   00000036   E002               LDI     R16, 2
   \   00000038   9F80               MUL     R24, R16
   \   0000003A   ....               LDI     R20, LOW(k)
   \   0000003C   ....               LDI     R21, (k) >> 8
   \   0000003E   0D40               ADD     R20, R0
   \   00000040   1D51               ADC     R21, R1
   \   00000042   ....               RCALL   __eeget16_16
   \   00000044   ....               RCALL   ?Subroutine45
    597                                                }
   \                     ??CrossCallReturnLabel_196:
   \   00000046   9583               INC     R24
   \   00000048   3787               CPI     R24, 119
   \   0000004A   F418               BRCC    ??diag_1
   \   0000004C   CFEC               RJMP    ??diag_3
    598                          }
    599            
    600            if (sym) 
   \                     ??diag_2:
   \   0000004E   2300               TST     R16
   \   00000050   F0A1               BREQ    ??CrossCallReturnLabel_62
    601            {             //если что-то приняли, то 
    602                rprintfStr(" get: ");
   \                     ??diag_1:
   \   00000052   ....               LDI     R16, LOW(`?<Constant " get: ">`)
   \   00000054   ....               LDI     R17, (`?<Constant " get: ">`) >> 8
   \   00000056   ....               RCALL   rprintfStr
    603                USART_SendChar(sym); 
   \   00000058   2F09               MOV     R16, R25
   \   0000005A   ....               RCALL   USART_SendChar
    604          
    605                if (mode==1) rprintfStr("  regim  no source5 >");  
   \   0000005C   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_285:
   \   0000005E   F419               BRNE    ??diag_4
   \   00000060   ....               LDI     R16, LOW(`?<Constant "  regim  no source5 >">`)
   \   00000062   ....               LDI     R17, (`?<Constant "  regim  no source5 >">`) >> 8
   \   00000064   ....               RCALL   rprintfStr
    606                if (mode_programming==1) rprintfStr("  regim  PROGRAMMING !!  READY >");  
   \                     ??diag_4:
   \   00000066   9100....           LDS     R16, ??mode_programming
   \   0000006A   2300               TST     R16
   \   0000006C   F019               BREQ    ??diag_5
   \   0000006E   ....               LDI     R16, LOW(`?<Constant "  regim  PROGRAMMING ...">`)
   \   00000070   ....               LDI     R17, (`?<Constant "  regim  PROGRAMMING ...">`) >> 8
   \   00000072   C002               RJMP    ??diag_6
    607                else rprintfStr("  regim  normal  READY >");  
   \                     ??diag_5:
   \   00000074   ....               LDI     R16, LOW(`?<Constant "  regim  normal  READY >">`)
   \   00000076   ....               LDI     R17, (`?<Constant "  regim  normal  READY >">`) >> 8
    608                 ent;   
    609            }
   \                     ??diag_6:
   \   00000078   ....               RCALL   ?Subroutine46
    610          }
   \                     ??CrossCallReturnLabel_62:
   \   0000007A   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002   ....               RJMP    ?Subroutine131
    611          
F:\Dulov\RemoteAMP\SoftTimers.c
      1          
      2          #include <stdbool.h>//поддержка bool
      3          #include "iom8.h"//<ioavr.h>
      4          #include <inavr.h>
      5          #include <intrinsics.h>
      6          #include "init.h"
      7          #include "SoftTimers.h"

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   static unsigned char port
   \                     ??port:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for port>`
      8          #include "main.h"
      9          //***************************************************************************
     10          //
     11          //***************************************************************************

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     12          timers tm1,tm2,tm3;
   \                     tm1:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     tm2:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     tm3:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     13          static uchar raz;
   \                     ??raz:
   \   00000000                      DS8 1
     14          static uchar port;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     15          static uchar razct;
   \                     ??razct:
   \   00000000                      DS8 1
     16          
     17          
     18          #pragma vector = TIMER2_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     19          __interrupt void TIMER2ovf(void)
   \                     TIMER2ovf:
     20          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   93FA               ST      -Y, R31
   \   00000004   93EA               ST      -Y, R30
   \   00000006   923A               ST      -Y, R3
   \   00000008   922A               ST      -Y, R2
   \   0000000A   921A               ST      -Y, R1
   \   0000000C   920A               ST      -Y, R0
   \   0000000E   937A               ST      -Y, R23
   \   00000010   936A               ST      -Y, R22
   \   00000012   935A               ST      -Y, R21
   \   00000014   934A               ST      -Y, R20
   \   00000016   933A               ST      -Y, R19
   \   00000018   932A               ST      -Y, R18
   \   0000001A   931A               ST      -Y, R17
   \   0000001C   930A               ST      -Y, R16
   \   0000001E   B78F               IN      R24, 0x3F
     21            
     22             TCNT2 = 0;
   \   00000020   E000               LDI     R16, 0
   \   00000022   BD04               OUT     0x24, R16
     23             
     24            TimerTick(&tm3); // Work
   \   00000024   ....               LDI     R16, LOW(tm3)
   \   00000026   ....               LDI     R17, (tm3) >> 8
   \   00000028   ....               RCALL   TimerTick
     25            TimerTick(&tm2);
   \   0000002A   ....               LDI     R16, LOW(tm2)
   \   0000002C   ....               LDI     R17, (tm2) >> 8
   \   0000002E   ....               RCALL   TimerTick
     26           
     27           
     28          // if (tm3.out ) { 
     29           //if (!state) {RES(PORTB,5); state=1; }   else {SET(PORTB,5); state=0;}
     30           //       TimerSet(&tm3,3000);       
     31           //             }
     32          }
   \   00000030   BF8F               OUT     0x3F, R24
   \   00000032   9109               LD      R16, Y+
   \   00000034   9119               LD      R17, Y+
   \   00000036   9129               LD      R18, Y+
   \   00000038   9139               LD      R19, Y+
   \   0000003A   9149               LD      R20, Y+
   \   0000003C   9159               LD      R21, Y+
   \   0000003E   9169               LD      R22, Y+
   \   00000040   9179               LD      R23, Y+
   \   00000042   9009               LD      R0, Y+
   \   00000044   9019               LD      R1, Y+
   \   00000046   9029               LD      R2, Y+
   \   00000048   9039               LD      R3, Y+
   \   0000004A   91E9               LD      R30, Y+
   \   0000004C   91F9               LD      R31, Y+
   \   0000004E   9189               LD      R24, Y+
   \   00000050   9518               RETI
   \   00000052                      REQUIRE _A_TCNT2
     33          
     34          
     35          
     36          
     37          

   \                                 In  segment CODE, align 2, keep-with-next
     38          void TimerSet(timers *t, long tm)
   \                     TimerSet:
     39          {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   018A               MOVW    R17:R16, R21:R20
   \   00000004   019B               MOVW    R19:R18, R23:R22
     40            t->out=0;
   \   00000006   E040               LDI     R20, 0
   \   00000008   8740               STD     Z+8, R20
     41            t->ct=0;
   \   0000000A   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_376:
   \   0000000C   8350               ST      Z, R21
   \   0000000E   8351               STD     Z+1, R21
   \   00000010   8352               STD     Z+2, R21
   \   00000012   8353               STD     Z+3, R21
     42            //F_CPU/4/100; 1-сек
     43            t->time=F_CPU/4/100000   *tm;
   \   00000014   E04A               LDI     R20, 10
   \   00000016   ....               RCALL   ?L_EC_MUL_L03
   \   00000018   8304               STD     Z+4, R16
   \   0000001A   8315               STD     Z+5, R17
   \   0000001C   8326               STD     Z+6, R18
   \   0000001E   8337               STD     Z+7, R19
     44            //t->x=0;
     45          }
   \   00000020   9508               RET
     46          

   \                                 In  segment CODE, align 2, keep-with-next
     47          void TimerTick( timers *t)
   \                     TimerTick:
     48          {
     49            if (t->out) return;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8520               LDD     R18, Z+8
   \   00000004   2322               TST     R18
   \   00000006   F4D9               BRNE    ??TimerTick_0
     50           // t->x++;
     51            //if (t->x>=CALIBR) { t->x=0; t->ct++;}
     52            t->ct++;
   \   00000008   8140               LD      R20, Z
   \   0000000A   8151               LDD     R21, Z+1
   \   0000000C   8162               LDD     R22, Z+2
   \   0000000E   8173               LDD     R23, Z+3
   \   00000010   5F4F               SUBI    R20, 255
   \   00000012   4F5F               SBCI    R21, 255
   \   00000014   4F6F               SBCI    R22, 255
   \   00000016   4F7F               SBCI    R23, 255
   \   00000018   8340               ST      Z, R20
   \   0000001A   8351               STD     Z+1, R21
   \   0000001C   8362               STD     Z+2, R22
   \   0000001E   8373               STD     Z+3, R23
     53            if (t->ct  >  t->time ) t->out=1;
   \   00000020   8144               LDD     R20, Z+4
   \   00000022   8155               LDD     R21, Z+5
   \   00000024   8166               LDD     R22, Z+6
   \   00000026   8177               LDD     R23, Z+7
   \   00000028   8000               LD      R0, Z
   \   0000002A   8011               LDD     R1, Z+1
   \   0000002C   8022               LDD     R2, Z+2
   \   0000002E   8033               LDD     R3, Z+3
   \   00000030   1540               CP      R20, R0
   \   00000032   0551               CPC     R21, R1
   \   00000034   0562               CPC     R22, R2
   \   00000036   0573               CPC     R23, R3
   \   00000038   F414               BRGE    ??TimerTick_0
   \   0000003A   E021               LDI     R18, 1
   \   0000003C   8720               STD     Z+8, R18
     54          }
   \                     ??TimerTick_0:
   \   0000003E   9508               RET
     55          //**************************************************************
     56          //**************************************************************
     57          
     58          

   \                                 In  segment CODE, align 2, keep-with-next
     59          void migINI(uchar sel,  uchar razp, bool prton)//мигание sel - кол-во раз
   \                     migINI:
     60          {
   \   00000000   2F30               MOV     R19, R16
   \   00000002   01A8               MOVW    R21:R20, R17:R16
     61            SET(PORTB,sel);//вкл-ем для ускорения индикации
   \   00000004   ....               RCALL   ?Subroutine6
     62            
     63            
     64            if (port!=255) {  //если все еще мигает
   \                     ??CrossCallReturnLabel_286:
   \   00000006   9100....           LDS     R16, ??port
   \   0000000A   3F0F               CPI     R16, 255
   \   0000000C   F061               BREQ    ??migINI_0
     65               
     66              if (prton)SET(PORTB,port); //фиксируем чтобы горел
   \   0000000E   9140....           LDS     R20, ??port
   \   00000012   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_235:
   \   00000014   2322               TST     R18
   \   00000016   F019               BREQ    ??migINI_1
   \   00000018   B318               IN      R17, 0x18
   \   0000001A   2B10               OR      R17, R16
   \   0000001C   C003               RJMP    ??migINI_2
     67              else RES(PORTB,port);
   \                     ??migINI_1:
   \   0000001E   9500               COM     R16
   \   00000020   B318               IN      R17, 0x18
   \   00000022   2310               AND     R17, R16
   \                     ??migINI_2:
   \   00000024   BB18               OUT     0x18, R17
     68                          }
     69            
     70            
     71            raz=razp;  port=sel; razct=0;
   \                     ??migINI_0:
   \   00000026   9350....           STS     ??raz, R21
   \   0000002A   9330....           STS     ??port, R19
   \   0000002E   E000               LDI     R16, 0
   \   00000030   9300....           STS     ??razct, R16
     72            
     73            
     74            TimerSet(&tm2,5);
   \   00000034   E045               LDI     R20, 5
   \   00000036   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_377:
   \   00000038   ....               RCALL   ?Subroutine113
     75            tm2.out=1;
   \                     ??CrossCallReturnLabel_234:
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   9300....           STS     (tm2 + 8), R16
     76            //iniT2(5);
     77            //T2out=1;
     78            
     79          }
   \   00000040   9508               RET
   \   00000042                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   ....               LDI     R16, LOW(tm2)
   \   00000002   ....               LDI     R17, (tm2) >> 8
   \   00000004   ....               RJMP    TimerSet

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_238:
   \   00000002   B318               IN      R17, 0x18
   \   00000004   2B10               OR      R17, R16
   \   00000006                      REQUIRE ?Subroutine128
   \   00000006                      ;               // Fall through to label ?Subroutine128
     80          

   \                                 In  segment CODE, align 2, keep-with-next
     81          void migWORK(void)//мигание 
   \                     migWORK:
     82          {
     83            static bool sost=0;
     84           // TimerTick(&tm2); // WorkT2();
     85            if (tm2.out==1 && port!=255)  {
   \   00000000   9100....           LDS     R16, (tm2 + 8)
   \   00000004   2300               TST     R16
   \   00000006   F091               BREQ    ??CrossCallReturnLabel_289
   \   00000008   9100....           LDS     R16, ??port
   \   0000000C   3F0F               CPI     R16, 255
   \   0000000E   F071               BREQ    ??CrossCallReturnLabel_289
     86                 if (sost!=1)  {sost=1; TimerSet(&tm2,200); SET(PORTB,port); razct++;}
   \   00000010   9100....           LDS     R16, ??sost
   \   00000014   2300               TST     R16
   \   00000016   F439               BRNE    ??migWORK_0
   \   00000018   E001               LDI     R16, 1
   \   0000001A   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_68:
   \   0000001C   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_287:
   \   0000001E   ....               LDI     R30, LOW(??razct)
   \   00000020   ....               LDI     R31, (??razct) >> 8
   \   00000022   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_328:
   \   00000024   C003               RJMP    ??CrossCallReturnLabel_289
     87            else if (sost!=0)  {sost=0; TimerSet(&tm2,200); RES(PORTB,port);}
   \                     ??migWORK_0:
   \   00000026   E000               LDI     R16, 0
   \   00000028   ....               RCALL   ?Subroutine49
     88                                        }
   \                     ??CrossCallReturnLabel_69:
   \   0000002A   ....               RCALL   ?Subroutine88
     89            if (razct>=raz) {  tm2.out=1; port=255;}
   \                     ??CrossCallReturnLabel_289:
   \   0000002C   9100....           LDS     R16, ??razct
   \   00000030   9110....           LDS     R17, ??raz
   \   00000034   1701               CP      R16, R17
   \   00000036   F030               BRCS    ??migWORK_1
   \   00000038   E001               LDI     R16, 1
   \   0000003A   9300....           STS     (tm2 + 8), R16
   \   0000003E   EF0F               LDI     R16, 255
   \   00000040   9300....           STS     ??port, R16
     90          }
   \                     ??migWORK_1:
   \   00000044   9508               RET
   \   00000046                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   9300....           STS     ??sost, R16
   \   00000004   EC48               LDI     R20, 200
   \   00000006   E050               LDI     R21, 0
   \   00000008   E060               LDI     R22, 0
   \   0000000A   E070               LDI     R23, 0
   \   0000000C   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_233:
   \   0000000E   9140....           LDS     R20, ??port
   \   00000012   9508               RET

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??sost:
   \   00000000                      DS8 1
     91          //uchar migSEL(void){ return(port);} //возвращает текущий мигающий порт
     92          //**************************************************************
     93          //**************************************************************
F:\Dulov\RemoteAMP\usart.c
      1          #include "usart.h"
      2          //#include <math.h>
      3          //#include <intrinsics.h>
      4          
      5          #include "init.h"
      6          
      7          //однобайтный буфер

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          volatile unsigned char usartRxBuf = 0;
   \                     usartRxBuf:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      9          volatile static bool usarton;
   \                     ??usarton:
   \   00000000                      DS8 1
     10          
     11          //инициализация usart`a

   \                                 In  segment CODE, align 2, keep-with-next
     12          void USART_Init()
   \                     USART_Init:
     13          {
     14            UBRRH = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   BD00               OUT     0x20, R16
     15            UBRRL = ((F_CPU/9600UL)-1)/16;//    26;//78; //скорость обмена 9600 бод
   \   00000004   E109               LDI     R16, 25
   \   00000006   B909               OUT     0x09, R16
     16            UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме, разр приема, разр передачи.
   \   00000008   E908               LDI     R16, 152
   \   0000000A   B90A               OUT     0x0A, R16
     17            UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разрядов
   \   0000000C   E806               LDI     R16, 134
   \   0000000E   BD00               OUT     0x20, R16
     18          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_UBRRH
   \   00000012                      REQUIRE _A_UBRRL
   \   00000012                      REQUIRE _A_UCSRB
     19          
     20          //отправка символа по usart`у

   \                                 In  segment CODE, align 2, keep-with-next
     21          void USART_SendChar(unsigned char sym)
   \                     USART_SendChar:
     22          {
     23            if (!usarton) return;
   \   00000000   9110....           LDS     R17, ??usarton
   \   00000004   2311               TST     R17
   \   00000006   F019               BREQ    ??USART_SendChar_0
     24            while(!(UCSRA & (1<<UDRE)));
   \                     ??USART_SendChar_1:
   \   00000008   9B5D               SBIS    0x0B, 0x05
   \   0000000A   CFFE               RJMP    ??USART_SendChar_1
     25            UDR = sym;
   \   0000000C   B90C               OUT     0x0C, R16
     26          }
   \                     ??USART_SendChar_0:
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_UCSRA
   \   00000010                      REQUIRE _A_UDR
     27          
     28          //чтение буфера

   \                                 In  segment CODE, align 2, keep-with-next
     29          __monitor unsigned char USART_GetChar(void)
   \                     USART_GetChar:
     30          {
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
     31            unsigned char tmp = usartRxBuf;
   \   00000004   9100....           LDS     R16, usartRxBuf
     32            usartRxBuf = 0;
   \   00000008   E010               LDI     R17, 0
   \   0000000A   9310....           STS     usartRxBuf, R17
     33            return tmp;  
   \   0000000E   BF2F               OUT     0x3F, R18
   \   00000010   9508               RET
     34          }
     35          
     36          //прием символа по usart`у в буфер
     37          #pragma vector=USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     38          __interrupt void usart_rxc_my(void) 
   \                     usart_rxc_my:
     39          {
   \   00000000   930A               ST      -Y, R16
     40            usartRxBuf = UDR; 
   \   00000002   B10C               IN      R16, 0x0C
   \   00000004   9300....           STS     usartRxBuf, R16
     41          } 
   \   00000008   ....               RJMP    ?Subroutine129
   \   0000000A                      REQUIRE _A_UDR
     42          
     43          // *** rprintfStr ***
     44          // prints a null-terminated string stored in RAM

   \                                 In  segment CODE, align 2, keep-with-next
     45          void rprintfStr(char str[])
   \                     rprintfStr:
     46          {        
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01D8               MOVW    R27:R26, R17:R16
     47              if (!usarton) return;
   \   00000004   9100....           LDS     R16, ??usarton
   \   00000008   2300               TST     R16
   \   0000000A   F041               BREQ    ??rprintfStr_0
     48          	// send a string stored in RAM
     49          	// check to make sure we have a good pointer
     50          	if (!str) return;
   \   0000000C   2F0A               MOV     R16, R26
   \   0000000E   2B01               OR      R16, R17
   \   00000010   F411               BRNE    ??rprintfStr_1
   \   00000012   C004               RJMP    ??rprintfStr_0
     51          
     52          	// print the string until a null-terminator
     53          	while (*str)
     54          		USART_SendChar(*str++);
   \                     ??rprintfStr_2:
   \   00000014   ....               RCALL   USART_SendChar
   \                     ??rprintfStr_1:
   \   00000016   910D               LD      R16, X+
   \   00000018   2300               TST     R16
   \   0000001A   F7E1               BRNE    ??rprintfStr_2
     55          }
   \                     ??rprintfStr_0:
   \   0000001C   E0E4               LDI     R30, 4
   \   0000001E   ....               RJMP    ?EPILOGUE_B4_L09
     56          
     57          // *** rprintfFloat ***Pascal Stang - Copyright (C) 2000-2002
     58          // floating-point print

   \                                 In  segment CODE, align 2, keep-with-next
     59          void rprintfFloat(char numDigits, double x)
   \                     rprintfFloat:
     60          {
   \   00000000   ....               RCALL   ?PROLOGUE12_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002   2EB0               MOV     R11, R16
   \   00000004   012A               MOVW    R5:R4, R21:R20
   \   00000006   013B               MOVW    R7:R6, R23:R22
     61              if (!usarton) return;
   \   00000008   9100....           LDS     R16, ??usarton
   \   0000000C   2300               TST     R16
   \   0000000E   F409               BRNE    $+2+2
   \   00000010   C04E               RJMP    ??rprintfFloat_0
     62          	unsigned char firstplace = 0;
   \   00000012   24AA               CLR     R10
     63          	unsigned char negative;
     64          	unsigned char i, digit;
     65          	double place = 1.0;
   \   00000014   E080               LDI     R24, 0
   \   00000016   E090               LDI     R25, 0
   \   00000018   E8A0               LDI     R26, 128
   \   0000001A   E3BF               LDI     R27, 63
     66          	
     67          	// save sign
     68          	negative = (x<0);
   \   0000001C   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_379:
   \   0000001E   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_188:
   \   00000020   ....               RCALL   ?F_CMP_LT_L04
   \   00000022   2488               CLR     R8
   \   00000024   F408               BRCC    ??rprintfFloat_1
   \   00000026   9483               INC     R8
     69          	// convert to absolute value
     70          	x = (x>0)?(x):(-x);
   \                     ??rprintfFloat_1:
   \   00000028   E041               LDI     R20, 1
   \   0000002A   ....               RCALL   ?F_CMP_GE_L04
   \   0000002C   F008               BRCS    ??rprintfFloat_2
   \   0000002E   267A               EOR     R7, R26
     71          	
     72          	// find starting digit place
     73          	for(i=0; i<15; i++)
   \                     ??rprintfFloat_2:
   \   00000030   E00F               LDI     R16, 15
   \   00000032   2E90               MOV     R9, R16
     74          	{
     75          		if((x/place) < 10.0)
   \                     ??rprintfFloat_3:
   \   00000034   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_75:
   \   00000036   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_86:
   \   00000038   ....               RCALL   ?F_CMP_LT_L04
   \   0000003A   F038               BRCS    ??rprintfFloat_4
     76          			break;
     77          		else
     78          			place *= 10.0;
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   019D               MOVW    R19:R18, R27:R26
   \   00000040   ....               RCALL   ?F_MUL_L04
   \   00000042   01C8               MOVW    R25:R24, R17:R16
   \   00000044   01D9               MOVW    R27:R26, R19:R18
     79          	}
   \   00000046   949A               DEC     R9
   \   00000048   F7A9               BRNE    ??rprintfFloat_3
     80          	// print polarity character
     81          	if(negative)
   \                     ??rprintfFloat_4:
   \   0000004A   FA80               BST     R8, 0
   \   0000004C   F416               BRTC    ??rprintfFloat_5
     82          		USART_SendChar('-');
   \   0000004E   E20D               LDI     R16, 45
   \   00000050   C001               RJMP    ??rprintfFloat_6
     83          	else
     84          		USART_SendChar('+');
   \                     ??rprintfFloat_5:
   \   00000052   E20B               LDI     R16, 43
   \                     ??rprintfFloat_6:
   \   00000054   ....               RCALL   USART_SendChar
     85          
     86          	// print digits
     87          	for(i=0; i<numDigits; i++)
   \   00000056   2499               CLR     R9
   \   00000058   C017               RJMP    ??rprintfFloat_7
     88          	{
     89          		digit = (unsigned char)(x/place);
     90          
     91          		if(digit | firstplace | (place == 1.0))
     92          		{
     93          			firstplace = 1;
     94          			USART_SendChar(digit+0x30);
     95          		}
     96          		else
     97          			USART_SendChar(' ');
   \                     ??rprintfFloat_8:
   \   0000005A   E200               LDI     R16, 32
   \                     ??rprintfFloat_9:
   \   0000005C   ....               RCALL   USART_SendChar
     98          		
     99          		if(place == 1.0)
   \   0000005E   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_70:
   \   00000060   F411               BRNE    ??rprintfFloat_10
    100          		{
    101          			USART_SendChar('.');
   \   00000062   E20E               LDI     R16, 46
   \   00000064   ....               RCALL   USART_SendChar
    102          		}
    103          		
    104          		x -= (digit*place);
   \                     ??rprintfFloat_10:
   \   00000066   2D08               MOV     R16, R8
   \   00000068   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_320:
   \   0000006A   01AC               MOVW    R21:R20, R25:R24
   \   0000006C   01BD               MOVW    R23:R22, R27:R26
   \   0000006E   ....               RCALL   ?F_MUL_L04
   \   00000070   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_315:
   \   00000072   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_189:
   \   00000074   ....               RCALL   ?F_SUB_L04
   \   00000076   0128               MOVW    R5:R4, R17:R16
   \   00000078   0139               MOVW    R7:R6, R19:R18
    105          		place /= 10.0;
   \   0000007A   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_87:
   \   0000007C   018C               MOVW    R17:R16, R25:R24
   \   0000007E   019D               MOVW    R19:R18, R27:R26
   \   00000080   ....               RCALL   ?F_DIV_L04
   \   00000082   01C8               MOVW    R25:R24, R17:R16
   \   00000084   01D9               MOVW    R27:R26, R19:R18
   \   00000086   9493               INC     R9
   \                     ??rprintfFloat_7:
   \   00000088   149B               CP      R9, R11
   \   0000008A   F488               BRCC    ??rprintfFloat_0
   \   0000008C   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_76:
   \   0000008E   ....               RCALL   ?F2SL_L04
   \   00000090   2E80               MOV     R8, R16
   \   00000092   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_71:
   \   00000094   F411               BRNE    ??rprintfFloat_11
   \   00000096   E001               LDI     R16, 1
   \   00000098   C001               RJMP    ??rprintfFloat_12
   \                     ??rprintfFloat_11:
   \   0000009A   E000               LDI     R16, 0
   \                     ??rprintfFloat_12:
   \   0000009C   2D18               MOV     R17, R8
   \   0000009E   291A               OR      R17, R10
   \   000000A0   2B10               OR      R17, R16
   \   000000A2   F2D9               BREQ    ??rprintfFloat_8
   \   000000A4   24AA               CLR     R10
   \   000000A6   94A3               INC     R10
   \   000000A8   2D08               MOV     R16, R8
   \   000000AA   5D00               SUBI    R16, 208
   \   000000AC   CFD7               RJMP    ??rprintfFloat_9
    106          	}
    107          }
   \                     ??rprintfFloat_0:
   \   000000AE   E0EC               LDI     R30, 12
   \   000000B0   ....               RJMP    ?EPILOGUE_B12_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   E260               LDI     R22, 32
   \   00000006   E471               LDI     R23, 65
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   01AC               MOVW    R21:R20, R25:R24
   \   00000002   01BD               MOVW    R23:R22, R27:R26
   \   00000004   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_192:
   \   00000006   ....               RJMP    ?F_DIV_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   E860               LDI     R22, 128
   \   00000006   E37F               LDI     R23, 63
   \   00000008   018C               MOVW    R17:R16, R25:R24
   \   0000000A   019D               MOVW    R19:R18, R27:R26
   \   0000000C   ....               RJMP    ?F_CMP_EQ_L04

   \                                 In  segment INTVEC, offset 0x2, root
   \                     `??funINT0_vect??INTVEC 2`:
   \   00000002   ....               RJMP    funINT0_vect

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??TIMER2ovf??INTVEC 8`:
   \   00000008   ....               RJMP    TIMER2ovf

   \                                 In  segment INTVEC, offset 0x10, root
   \                     `??funTIMER1_OVF_vect??INTVEC 16`:
   \   00000010   ....               RJMP    funTIMER1_OVF_vect

   \                                 In  segment INTVEC, offset 0x16, root
   \                     `??usart_rxc_my??INTVEC 22`:
   \   00000016   ....               RJMP    usart_rxc_my

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " error ct big =">`:
   \   00000000   65207272726F       DC8 " error ct big ="
   \              632020746962
   \              2067003D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  /   cod1= ">>`:
   \   00000000   2020202F2020       DC8 "  /   cod1= "
   \              6F633164203D
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/   cod2= ">>`:
   \   00000000   202F20206F63       DC8 "/   cod2= "
   \              3264203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/   cod3= ">>`:
   \   00000000   202F20206F63       DC8 "/   cod3= "
   \              3364203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / abslen= ">>`:
   \   00000000   2020202F6261       DC8 "  / abslen= "
   \              6C736E65203D
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / len= ">>`:
   \   00000000   2020202F656C       DC8 "  / len= "
   \              3D6E0020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  ">>`:
   \   00000000   202000             DC8 "  "

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / cod1= ">>`:
   \   00000000   2020202F6F63       DC8 "  / cod1= "
   \              3164203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " / cod2= ">>`:
   \   00000000   2F206320646F       DC8 " / cod2= "
   \              3D320020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " / cod3= ">>`:
   \   00000000   2F206320646F       DC8 " / cod3= "
   \              3D330020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/ minlen=">>`:
   \   00000000   202F696D6C6E       DC8 "/ minlen="
   \              6E65003D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "OFF>adr=">>`:
   \   00000000   464F3E466461       DC8 "OFF>adr="
   \              3D7200      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ON>adr=">>`:
   \   00000000   4E4F613E7264       DC8 "ON>adr="
   \              003D        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "normal>command fi`:
   \   00000000   6F6E6D726C61       DC8 "normal>command find  adr="
   \              633E6D6F616D
   \              646E66206E69
   \              206461207264
   \              003D        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "write ..">>`:
   \   00000000   727774692065       DC8 "write .."
   \              2E2E00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "OK !   ">>`:
   \   00000000   4B4F21202020       DC8 "OK !   "
   \              0020        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "- vkluchen kratki`:
   \   00000000   202D6B76756C       DC8 "- vkluchen kratkiy viviod -"
   \              68636E656B20
   \              61726B747969
   \              762076696F69
   \              2064002D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " ==  EEPROM read `:
   \   00000000   3D20203D4520       DC8 " ==  EEPROM read == "
   \              50454F52204D
   \              657264613D20
   \              203D00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " > ">>`:
   \   00000000   3E200020           DC8 " > "

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " get: ">>`:
   \   00000000   67207465203A       DC8 " get: "
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  no sourc`:
   \   00000000   202065726967       DC8 "  regim  no source5 >"
   \              206D6E20206F
   \              6F7372756563
   \              2035003E    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  PROGRAMM`:
   \   00000000   202065726967       DC8 "  regim  PROGRAMMING !!  READY >"
   \              206D50204F52
   \              52474D41494D
   \              474E21202021
   \              522041455944
   \              3E2000      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  normal  `:
   \   00000000   202065726967       DC8 "  regim  normal  READY >"
   \              206D6E20726F
   \              616D206C5220
   \              414559443E20
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for ind>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for tON>`:
   \   00000000   4E20               DC16 20000

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for lastsel>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sel>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for port>`:
   \   00000000   FF                 DC8 255

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " error ct big =">`:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for <Constant " error ct big =">`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  /   cod1= ">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "  /   cod1= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/   cod2= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "/   cod2= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/   cod3= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "/   cod3= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / abslen= ">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "  / abslen= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / len= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "  / len= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  ">`:
   \   00000000                      DS8 3
   \   00000003                      REQUIRE `?<Initializer for <Constant "  ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / cod1= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "  / cod1= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " / cod2= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant " / cod2= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " / cod3= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant " / cod3= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/ minlen=">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "/ minlen=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "OFF>adr=">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "OFF>adr=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "ON>adr=">`:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for <Constant "ON>adr=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "normal>command find  ...">`:
   \   00000000                      DS8 26
   \   0000001A                      REQUIRE `?<Initializer for <Constant "normal>command fi`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "write ..">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "write ..">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "OK !   ">`:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for <Constant "OK !   ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "- vkluchen kratkiy vi...">`:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for <Constant "- vkluchen kratki`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " ==  EEPROM read == ">`:
   \   00000000                      DS8 21
   \   00000015                      REQUIRE `?<Initializer for <Constant " ==  EEPROM read `

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " > ">`:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for <Constant " > ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " get: ">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant " get: ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  no source5 >">`:
   \   00000000                      DS8 22
   \   00000016                      REQUIRE `?<Initializer for <Constant "  regim  no sourc`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  PROGRAMMING ...">`:
   \   00000000                      DS8 33
   \   00000021                      REQUIRE `?<Initializer for <Constant "  regim  PROGRAMM`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  normal  READY >">`:
   \   00000000                      DS8 25
   \   00000019                      REQUIRE `?<Initializer for <Constant "  regim  normal  `

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      8      4   PEREP
        8      2   -> USART_SendChar
        8      2   -> coding
        8      2   -> rprintfFloat
        8      2   -> rprintfStr
     15      2   TIMER2ovf
       15      2   -> TimerTick
      0      4   TimerSet
      0      2   TimerTick
      0      2   USART_GetChar
      0      2   USART_Init
      0      2   USART_SendChar
      2      4   analizCOD
      0      2   analiz_INT
     10      4   coding
       10      2   -> USART_SendChar
       10      2   -> rprintfFloat
       10      2   -> rprintfStr
      2      4   diag
        2      2   -> USART_GetChar
        2      2   -> USART_SendChar
        2      2   -> rprintfFloat
        2      2   -> rprintfStr
      0      2   du_init
      2      2   funINT0_vect
      2      2   funTIMER1_OVF_vect
      1      2   getadr
        1      2   -> mute
      0      4   gro
      0      2   iniPORTS
      0      2   led_all
      1      2   led_test
        1      2   -> led_all
      1      4   main
        1      2   -> TimerSet
        1      2   -> USART_Init
        1      2   -> analizCOD
        1      2   -> diag
        1      2   -> getadr
        1      2   -> iniPORTS
        1      2   -> led_all
        1      2   -> led_test
        1      2   -> main_logic
        1      2   -> main_power
        1      2   -> programming
        1      2   -> remote_main
        1      2   -> writeCOD
      0      4   main_logic
        0      2   -> TimerSet
        0      2   -> TimerTick
        0      2   -> USART_SendChar
        0      2   -> gro
        0      2   -> migINI
        0      2   -> migWORK
        0      2   -> mute
        0      2   -> pult
        0      2   -> rprintfFloat
        0      2   -> rprintfStr
      0      4   main_power
        0      2   -> USART_SendChar
        0      2   -> mute
        0      2   -> resOUT
        0      2   -> rprintfFloat
        0      2   -> rprintfStr
        0      2   -> source
      0      4   migINI
        0      2   -> TimerSet
      0      4   migWORK
        0      2   -> TimerSet
      0      2   mute
      1      2   programming
        1      2   -> getadr
        1      2   -> led_all
        1      2   -> proverka
        1      2   -> writeCOD
      0      4   proverka
      0      2   pult
        0      2   -> source
      0      2   remote_main
        0      2   -> PEREP
        0      2   -> analiz_INT
        0      2   -> du_init
      0      2   resOUT
      0      2   resled
     12      4   rprintfFloat
       12      2   -> USART_SendChar
      4      2   rprintfStr
        4      2   -> USART_SendChar
      0      2   source
        0      2   -> migINI
        0      2   -> resOUT
        0      2   -> resled
      2      2   usart_rxc_my
      0      4   writeCOD
        0      2   -> USART_SendChar
        0      2   -> getadr
        0      2   -> led_all
        0      2   -> rprintfStr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant "  ">
      13  ?<Constant "  /   cod1= ">
      13  ?<Constant "  / abslen= ">
      11  ?<Constant "  / cod1= ">
      10  ?<Constant "  / len= ">
      33  ?<Constant "  regim  PROGRAMMING ...">
      22  ?<Constant "  regim  no source5 >">
      25  ?<Constant "  regim  normal  READY >">
      10  ?<Constant " / cod2= ">
      10  ?<Constant " / cod3= ">
      21  ?<Constant " ==  EEPROM read == ">
       4  ?<Constant " > ">
      16  ?<Constant " error ct big =">
       7  ?<Constant " get: ">
      28  ?<Constant "- vkluchen kratkiy vi...">
      11  ?<Constant "/   cod2= ">
      11  ?<Constant "/   cod3= ">
      10  ?<Constant "/ minlen=">
       9  ?<Constant "OFF>adr=">
       8  ?<Constant "OK !   ">
       8  ?<Constant "ON>adr=">
      26  ?<Constant "normal>command find  ...">
       9  ?<Constant "write ..">
       3  ?<Initializer for <Constant "  ">>
      13  ?<Initializer for <Constant "  /   cod1= ">>
      13  ?<Initializer for <Constant "  / abslen= ">>
      11  ?<Initializer for <Constant "  / cod1= ">>
      10  ?<Initializer for <Constant "  / len= ">>
      33  ?<Initializer for <Constant "  regim  PROGRAMM
      22  ?<Initializer for <Constant "  regim  no sourc
      25  ?<Initializer for <Constant "  regim  normal
      10  ?<Initializer for <Constant " / cod2= ">>
      10  ?<Initializer for <Constant " / cod3= ">>
      21  ?<Initializer for <Constant " ==  EEPROM read
       4  ?<Initializer for <Constant " > ">>
      16  ?<Initializer for <Constant " error ct big =">
       7  ?<Initializer for <Constant " get: ">>
      28  ?<Initializer for <Constant "- vkluchen kratki
      11  ?<Initializer for <Constant "/   cod2= ">>
      11  ?<Initializer for <Constant "/   cod3= ">>
      10  ?<Initializer for <Constant "/ minlen=">>
       9  ?<Initializer for <Constant "OFF>adr=">>
       8  ?<Initializer for <Constant "OK !   ">>
       8  ?<Initializer for <Constant "ON>adr=">>
      26  ?<Initializer for <Constant "normal>command fi
       9  ?<Initializer for <Constant "write ..">>
       1  ?<Initializer for ind>
       1  ?<Initializer for lastsel>
       1  ?<Initializer for port>
       1  ?<Initializer for sel>
       2  ?<Initializer for tON>
       2  ??Subroutine133_0
       4  ??Subroutine134_0
       8  ??Subroutine135_0
       6  ??Subroutine136_0
       2  ??Subroutine137_0
       4  ??Subroutine138_0
       6  ??Subroutine139_0
       4  ??Subroutine140_0
       6  ??Subroutine141_0
       8  ??Subroutine142_0
       4  ??Subroutine143_0
       6  ??Subroutine144_0
       6  ??Subroutine145_0
       8  ??Subroutine146_0
       2  ??TIMER2ovf??INTVEC 8
       2  ??funINT0_vect??INTVEC 2
       2  ??funTIMER1_OVF_vect??INTVEC 16
       2  ??usart_rxc_my??INTVEC 22
      18  ?Subroutine0
      16  ?Subroutine1
      12  ?Subroutine10
      10  ?Subroutine100
       6  ?Subroutine101
       6  ?Subroutine102
       2  ?Subroutine103
       6  ?Subroutine105
       6  ?Subroutine106
       6  ?Subroutine107
       6  ?Subroutine108
      20  ?Subroutine109
      16  ?Subroutine11
       6  ?Subroutine110
      18  ?Subroutine111
      10  ?Subroutine112
       6  ?Subroutine113
       6  ?Subroutine114
       4  ?Subroutine115
       4  ?Subroutine116
       6  ?Subroutine117
      20  ?Subroutine118
       2  ?Subroutine12
       4  ?Subroutine120
       4  ?Subroutine121
       6  ?Subroutine122
       6  ?Subroutine123
       4  ?Subroutine124
       4  ?Subroutine125
       4  ?Subroutine126
       4  ?Subroutine127
       4  ?Subroutine128
       4  ?Subroutine129
       4  ?Subroutine13
       4  ?Subroutine130
       4  ?Subroutine131
       4  ?Subroutine132
       2  ?Subroutine14
       2  ?Subroutine15
      12  ?Subroutine16
       8  ?Subroutine17
      10  ?Subroutine18
      14  ?Subroutine2
      10  ?Subroutine20
       4  ?Subroutine21
       6  ?Subroutine22
      24  ?Subroutine24
      10  ?Subroutine25
       8  ?Subroutine26
       2  ?Subroutine27
       2  ?Subroutine28
       8  ?Subroutine3
       4  ?Subroutine30
       8  ?Subroutine31
       4  ?Subroutine32
      10  ?Subroutine33
       4  ?Subroutine34
       2  ?Subroutine36
       6  ?Subroutine38
       4  ?Subroutine4
       4  ?Subroutine40
      14  ?Subroutine41
       2  ?Subroutine42
      22  ?Subroutine43
       2  ?Subroutine44
       2  ?Subroutine45
       4  ?Subroutine46
       6  ?Subroutine47
      20  ?Subroutine49
       2  ?Subroutine50
      14  ?Subroutine51
       6  ?Subroutine52
       8  ?Subroutine53
       8  ?Subroutine54
       6  ?Subroutine55
       6  ?Subroutine56
      10  ?Subroutine57
       4  ?Subroutine59
       6  ?Subroutine6
       4  ?Subroutine60
       4  ?Subroutine61
       6  ?Subroutine62
      20  ?Subroutine63
       8  ?Subroutine64
       2  ?Subroutine65
       2  ?Subroutine68
       6  ?Subroutine69
       8  ?Subroutine7
       6  ?Subroutine70
      12  ?Subroutine71
       6  ?Subroutine72
       6  ?Subroutine73
      20  ?Subroutine75
       6  ?Subroutine76
      20  ?Subroutine77
       4  ?Subroutine78
      10  ?Subroutine8
       6  ?Subroutine80
       6  ?Subroutine82
       2  ?Subroutine83
      10  ?Subroutine84
      20  ?Subroutine85
      10  ?Subroutine86
      10  ?Subroutine87
      10  ?Subroutine88
       4  ?Subroutine9
       2  ?Subroutine90
       2  ?Subroutine91
       8  ?Subroutine92
       8  ?Subroutine93
       6  ?Subroutine94
       6  ?Subroutine95
       4  ?Subroutine96
      10  ?Subroutine97
       6  ?Subroutine98
       6  ?Subroutine99
     254  PEREP
      82  TIMER2ovf
      34  TimerSet
      64  TimerTick
      18  USART_GetChar
      18  USART_Init
      16  USART_SendChar
       1  _A_ACSR
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_GICR
       2  _A_ICR1
       1  _A_MCUCR
       2  _A_OCR1A
       2  _A_OCR1B
       1  _A_PIND
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TCCR2
       1  _A_TCNT0
       2  _A_TCNT1
       1  _A_TCNT2
       1  _A_TIFR
       1  _A_TIMSK
       1  _A_UBRRH
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UDR
      46  analizCOD
      44  analiz_INT
       1  aoff
       1  big
       1  c1
       1  c2
       1  c3
       2  cod1
       2  cod2
       2  cod3
       2  cod4
       1  cod_ok
     522  coding
       1  ct
     124  diag
     100  dim1
     100  dim2
      24  du_init
       1  fmode
      46  funINT0_vect
       8  funTIMER1_OVF_vect
       1  get
     222  getadr
      90  gro
       1  gro1
       1  gro2
       1  ind
       1  ini
     118  iniPORTS
       1  intok
     240  k
       1  last_pultadr
       1  lastsel
      32  led_all
      30  led_test
     200  len
     292  main
     642  main_logic
     168  main_power
      66  migINI
      70  migWORK
       2  minimallen
       1  mode
       1  mode_programming
       1  modegro
      50  mute
       1  on
       1  onok
       1  perepoln
       1  port
       1  pr
      90  programming
      36  proverka
      14  pult
       1  pultadr
       1  raz
       1  razct
       1  regaoff
      42  remote_main
      14  resOUT
      10  resled
     178  rprintfFloat
      32  rprintfStr
       1  sel
       1  sost
      70  source
       1  state
       1  t1
       1  t2
       2  tON
       1  tekfunc
       1  til
       2  timerzad
       9  tm1
       9  tm2
       9  tm3
       1  u
       1  usartRxBuf
      10  usart_rxc_my
       1  usarton
      70  writeCOD
       1  zader
      12  -- Other

 
    30 bytes in segment ABSOLUTE
 4 588 bytes in segment CODE
   242 bytes in segment EEPROM_N
    12 bytes in segment INITTAB
     8 bytes in segment INTVEC
   324 bytes in segment NEAR_I
   324 bytes in segment NEAR_ID
   472 bytes in segment NEAR_Z
 
 4 912 bytes of CODE  memory (+ 20 bytes shared)
   796 bytes of DATA  memory (+ 30 bytes shared)
   242 bytes of XDATA memory

Errors: none
Warnings: 1
