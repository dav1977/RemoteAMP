###############################################################################
#
# IAR C/C++ Compiler V6.40.1.741 for Atmel AVR            07/Feb/2017  14:09:15
# Copyright 1996-2014 IAR Systems AB.
#
#    Source file  =  F:\Dulov\remoteamp\main.c
#    Command line =  
#        F:\Dulov\remoteamp\main.c --cpu=m8 -ms -o
#        F:\Dulov\remoteamp\Release\Obj\ -D NDEBUG -lC
#        F:\Dulov\remoteamp\Release\List\ -lA F:\Dulov\remoteamp\Release\List\
#        --initializers_in_flash --no_clustering -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 512 --dlib --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 6.5\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h" -Ohz
#        --mfc F:\Dulov\remoteamp\SoftTimers.c F:\Dulov\RemoteAMP\usart.c
#    List file    =  F:\Dulov\remoteamp\Release\List\main.lst
#    Object file  =  F:\Dulov\remoteamp\Release\Obj\main.r90
#
###############################################################################

F:\Dulov\remoteamp\main.c
      1          //***************************************************************************
      2          //  
      3          //  Author(s)...: dav COBRA 
      4          //  Target(s)...: ATMega8
      5          //  Compiler....: 6 40
      6          //  ТЕСТ1
      7          //  Description.: Система  управления  для  Усилителя  Мощности   V-ниже
      8          //  v1.1 - добавлена поддержка включения усилителя тыловых колонок вместо Source5
      9          //       - изменена установка auto off
     10          //  v1.2 - теперь во время мигания(только Source) светодиодов  команды пульта обрабатываются
     11          //       - новая команда пульта - возврат в предыдущий source
     12          //       - команды пульта можно продублировать на втором пульте, т.е. на каждую функцию 2 кнопки пульта
     13          //       - вместо импульсов громкости можно формировать постоянный сигнал
     14          //       - подправлены задержки
     15          //       - обновлен алгоритм кодирования
     16          // v1.22 - исправлена ошибка задержки вкл AC
     17          // v1.23 - исправлен при включении включается SOURCE1 
     18          // v1.24 - исправлен баг AUTOOFF на 30 минут 
     19          // v1.25 - исправлен баг AUTOOFF при выключениии питания 
     20          // v1.26 - refactoring 
     21          //  Data........: 02 2017
     22          //
     23          //   - ВЫКЛЮЧИТЬ ОПЦИЮ clustering of variables В optimization compilator !!!!
     24          //***************************************************************************
     25          #include <iom8.h>//<ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_ACSR
   \                     _A_ACSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x48
   \   union <unnamed> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x58
   \   union <unnamed> volatile __io _A_TIFR
   \                     _A_TIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_GICR
   \                     _A_GICR:
   \   00000000                      DS8 1
     26          //#include <inavr.h>  
     27          #include <intrinsics.h>
     28          #include "init.h"
     29          #include "du.h"  

   \                                 In  segment EEPROM_N, align 1, keep-with-next
   \   unsigned int __eeprom k[120]
   \                     k:
   \   00000000                      DS8 240

   \                                 In  segment EEPROM_N, align 1, keep-with-next
   \   unsigned char __eeprom fmode
   \                     fmode:
   \   00000000                      DS8 1

   \                                 In  segment EEPROM_N, align 1, keep-with-next
   \   unsigned char __eeprom modegro
   \                     modegro:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod1
   \                     cod1:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod2
   \                     cod2:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod3
   \                     cod3:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int cod4
   \                     cod4:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char perepoln
   \                     perepoln:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char t1
   \                     t1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char t2
   \                     t2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static bool ini
   \                     ??ini:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int dim1[50]
   \                     dim1:
   \   00000000                      DS8 100

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int dim2[50]
   \                     dim2:
   \   00000000                      DS8 100

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char ct
   \                     ct:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int minimallen
   \                     minimallen:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   float len[50]
   \                     len:
   \   00000000                      DS8 200

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static bool intok
   \                     ??intok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static bool big
   \                     ??big:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char cod_ok
   \                     cod_ok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char c1
   \                     c1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char c2
   \                     c2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char c3
   \                     c3:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   char ind
   \                     ind:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for ind>`

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void du_init(void)
   \                     du_init:
   \   00000000   E001               LDI     R16, 1
   \   00000002   9300....           STS     ??ini, R16
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     ??intok, R16
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   BD0E               OUT     0x2E, R16
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     ct, R16
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_TCCR1B

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 __interrupt void funINT0_vect(void)
   \                     funINT0_vect:
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     ??intok, R16
   \   0000000C   B50C               IN      R16, 0x2C
   \   0000000E   9300....           STS     t1, R16
   \   00000012   B50D               IN      R16, 0x2D
   \   00000014   9300....           STS     t2, R16
   \   00000018   9100....           LDS     R16, t1
   \   0000001C   2300               TST     R16
   \   0000001E   F019               BREQ    ??funINT0_vect_0
   \   00000020   E000               LDI     R16, 0
   \   00000022   BD0D               OUT     0x2D, R16
   \   00000024   BD0C               OUT     0x2C, R16
   \                     ??funINT0_vect_0:
   \   00000026   BF1F               OUT     0x3F, R17
   \   00000028   9109               LD      R16, Y+
   \   0000002A   9119               LD      R17, Y+
   \   0000002C   9518               RETI
   \   0000002E                      REQUIRE _A_TCNT1

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 char du_main(unsigned char)
   \                     du_main:
   \   00000000   ....               RCALL   ?PROLOGUE8_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   2F90               MOV     R25, R16
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     cod_ok, R16
   \   0000000A   9100....           LDS     R16, ??ini
   \   0000000E   2300               TST     R16
   \   00000010   F409               BRNE    ??du_main_0
   \   00000012   ....               RCALL   du_init
   \                     ??du_main_0:
   \   00000014   9100....           LDS     R16, ??intok
   \   00000018   2300               TST     R16
   \   0000001A   F101               BREQ    ??du_main_1
   \   0000001C   9100....           LDS     R16, ??state
   \   00000020   2300               TST     R16
   \   00000022   F019               BREQ    ??du_main_2
   \   00000024   98C5               CBI     0x18, 0x05
   \   00000026   E000               LDI     R16, 0
   \   00000028   C002               RJMP    ??du_main_3
   \                     ??du_main_2:
   \   0000002A   9AC5               SBI     0x18, 0x05
   \   0000002C   E001               LDI     R16, 1
   \                     ??du_main_3:
   \   0000002E   9300....           STS     ??state, R16
   \   00000032   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_18:
   \   00000034   E012               LDI     R17, 2
   \   00000036   9F01               MUL     R16, R17
   \   00000038   9100....           LDS     R16, t1
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_301:
   \   00000040   8311               STD     Z+1, R17
   \   00000042   9100....           LDS     R16, t2
   \   00000046   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_303:
   \   00000048   8311               STD     Z+1, R17
   \   0000004A   ....               LDI     R30, LOW(ct)
   \   0000004C   ....               LDI     R31, (ct) >> 8
   \   0000004E   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_307:
   \   00000050   3301               CPI     R16, 49
   \   00000052   F010               BRCS    ??du_main_4
   \   00000054   950A               DEC     R16
   \   00000056   8300               ST      Z, R16
   \                     ??du_main_4:
   \   00000058   9310....           STS     ??intok, R17
   \                     ??du_main_1:
   \   0000005C   9100....           LDS     R16, perepoln
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    $+2+2
   \   00000064   C081               RJMP    ??CrossCallReturnLabel_242
   \   00000066   9100....           LDS     R16, ??state2
   \   0000006A   2300               TST     R16
   \   0000006C   F019               BREQ    ??du_main_5
   \   0000006E   98C2               CBI     0x18, 0x02
   \   00000070   E000               LDI     R16, 0
   \   00000072   C002               RJMP    ??du_main_6
   \                     ??du_main_5:
   \   00000074   9AC2               SBI     0x18, 0x02
   \   00000076   E001               LDI     R16, 1
   \                     ??du_main_6:
   \   00000078   9300....           STS     ??state2, R16
   \   0000007C   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_11:
   \   0000007E   9300....           STS     c1, R16
   \   00000082   9300....           STS     c2, R16
   \   00000086   9300....           STS     c3, R16
   \   0000008A   EF0F               LDI     R16, 255
   \   0000008C   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_161:
   \   0000008E   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_153:
   \   00000090   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_19:
   \   00000092   3302               CPI     R16, 50
   \   00000094   F028               BRCS    ??CrossCallReturnLabel_339
   \   00000096   ....               LDI     R16, LOW(`?<Constant " error ct big =">`)
   \   00000098   ....               LDI     R17, (`?<Constant " error ct big =">`) >> 8
   \   0000009A   ....               RCALL   rprintfStr
   \   0000009C   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_20:
   \   0000009E   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_339:
   \   000000A0   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_21:
   \   000000A2   3006               CPI     R16, 6
   \   000000A4   F020               BRCS    ??du_main_7
   \   000000A6   9100....           LDS     R16, ??big
   \   000000AA   2300               TST     R16
   \   000000AC   F021               BREQ    ??du_main_8
   \                     ??du_main_7:
   \   000000AE   9100....           LDS     R16, ??big
   \   000000B2   2300               TST     R16
   \   000000B4   F171               BREQ    ??du_main_9
   \                     ??du_main_8:
   \   000000B6   E081               LDI     R24, 1
   \   000000B8   C016               RJMP    ??du_main_10
   \                     ??du_main_11:
   \   000000BA   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_24:
   \   000000BC   E004               LDI     R16, 4
   \   000000BE   9F80               MUL     R24, R16
   \   000000C0   01F0               MOVW    R31:R30, R1:R0
   \   000000C2   ....               SUBI    R30, LOW((-(len) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(len) & 0xFFFF) >> 8
   \   000000C6   8240               ST      Z, R4
   \   000000C8   ....               RCALL   ??Subroutine160_0
   \                     ??CrossCallReturnLabel_413:
   \   000000CA   E041               LDI     R20, 1
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   E661               LDI     R22, 97
   \   000000D0   E474               LDI     R23, 68
   \   000000D2   2D04               MOV     R16, R4
   \   000000D4   ....               RCALL   ?F_CMP_GE_L04
   \   000000D6   F430               BRCC    ??CrossCallReturnLabel_372
   \   000000D8   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_181:
   \   000000DA   ....               RCALL   ?F_CMP_LT_L04
   \   000000DC   F418               BRCC    ??CrossCallReturnLabel_372
   \   000000DE   ....               RCALL   ?F2SL_L04
   \   000000E0   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_162:
   \   000000E2   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_372:
   \   000000E4   9583               INC     R24
   \                     ??du_main_10:
   \   000000E6   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_22:
   \   000000E8   1780               CP      R24, R16
   \   000000EA   F338               BRCS    ??du_main_11
   \   000000EC   E081               LDI     R24, 1
   \   000000EE   C00E               RJMP    ??du_main_12
   \                     ??du_main_13:
   \   000000F0   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_25:
   \   000000F2   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_182:
   \   000000F4   ....               RCALL   ?F_DIV_L04
   \   000000F6   E044               LDI     R20, 4
   \   000000F8   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_305:
   \   000000FA   ....               RCALL   ??Subroutine160_0
   \                     ??CrossCallReturnLabel_414:
   \   000000FC   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_71:
   \   000000FE   ....               RCALL   ?F_CMP_EQ_L04
   \   00000100   F021               BREQ    ??du_main_14
   \   00000102   2F29               MOV     R18, R25
   \   00000104   2F08               MOV     R16, R24
   \   00000106   E010               LDI     R17, 0
   \   00000108   ....               RCALL   coding
   \                     ??du_main_14:
   \   0000010A   9583               INC     R24
   \                     ??du_main_12:
   \   0000010C   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_23:
   \   0000010E   1780               CP      R24, R16
   \   00000110   F378               BRCS    ??du_main_13
   \                     ??du_main_9:
   \   00000112   E080               LDI     R24, 0
   \   00000114   E044               LDI     R20, 4
   \                     ??du_main_15:
   \   00000116   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_165:
   \   00000118   E000               LDI     R16, 0
   \   0000011A   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_302:
   \   0000011C   8301               STD     Z+1, R16
   \   0000011E   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_304:
   \   00000120   8301               STD     Z+1, R16
   \   00000122   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_306:
   \   00000124   8301               STD     Z+1, R16
   \   00000126   8302               STD     Z+2, R16
   \   00000128   8303               STD     Z+3, R16
   \   0000012A   9583               INC     R24
   \   0000012C   3382               CPI     R24, 50
   \   0000012E   F398               BRCS    ??du_main_15
   \   00000130   9300....           STS     perepoln, R16
   \   00000134   9300....           STS     t1, R16
   \   00000138   9300....           STS     t2, R16
   \   0000013C   9300....           STS     ct, R16
   \   00000140   9300....           STS     ??big, R16
   \   00000144   3091               CPI     R25, 1
   \   00000146   F481               BRNE    ??CrossCallReturnLabel_242
   \   00000148   9100....           LDS     R16, cod_ok
   \   0000014C   2300               TST     R16
   \   0000014E   F061               BREQ    ??CrossCallReturnLabel_242
   \   00000150   ....               LDI     R16, LOW(`?<Constant "  /   cod1= ">`)
   \   00000152   ....               LDI     R17, (`?<Constant "  /   cod1= ">`) >> 8
   \   00000154   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_345:
   \   00000156   ....               LDI     R16, LOW(`?<Constant "/   cod2= ">`)
   \   00000158   ....               LDI     R17, (`?<Constant "/   cod2= ">`) >> 8
   \   0000015A   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_403:
   \   0000015C   ....               RCALL   ??Subroutine149_0
   \                     ??CrossCallReturnLabel_343:
   \   0000015E   ....               LDI     R16, LOW(`?<Constant "/   cod3= ">`)
   \   00000160   ....               LDI     R17, (`?<Constant "/   cod3= ">`) >> 8
   \   00000162   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_397:
   \   00000164   ....               RCALL   ??Subroutine149_0
   \                     ??CrossCallReturnLabel_342:
   \   00000166   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_242:
   \   00000168   9100....           LDS     R16, cod_ok
   \   0000016C   E0E8               LDI     R30, 8
   \   0000016E   ....               RJMP    ?EPILOGUE_B8_L09
   \   00000170                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_164:
   \   00000002   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_316:
   \   00000004                      REQUIRE ?Subroutine109
   \   00000004                      ;               // Fall through to label ?Subroutine109

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   0182               MOVW    R17:R16, R5:R4
   \   00000002   0193               MOVW    R19:R18, R7:R6
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   ....               LDI     R30, LOW(minimallen)
   \   00000002   ....               LDI     R31, (minimallen) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   9F84               MUL     R24, R20
   \   00000002   01F0               MOVW    R31:R30, R1:R0
   \   00000004   ....               SUBI    R30, LOW((-(len) & 0xFFFF))
   \   00000006   ....               SBCI    R31, (-(len) & 0xFFFF) >> 8
   \   00000008   ....               RJMP    ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               SUBI    R30, LOW((-(dim2) & 0xFFFF))
   \   00000004   ....               SBCI    R31, (-(dim2) & 0xFFFF) >> 8
   \   00000006   ....               RJMP    ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine147_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               SUBI    R30, LOW((-(dim1) & 0xFFFF))
   \   00000004   ....               SBCI    R31, (-(dim1) & 0xFFFF) >> 8
   \   00000006   ....               RJMP    ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_168:
   \   00000002   01F0               MOVW    R31:R30, R1:R0
   \   00000004   ....               SUBI    R30, LOW((-(dim1) & 0xFFFF))
   \   00000006   ....               SBCI    R31, (-(dim1) & 0xFFFF) >> 8
   \   00000008   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_324:
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_178:
   \   0000000E   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_233:
   \   00000010   0128               MOVW    R5:R4, R17:R16
   \   00000012   0139               MOVW    R7:R6, R19:R18
   \   00000014   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   9100....           LDS     R16, ct
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   ....               SUBI    R30, LOW((-(dim2) & 0xFFFF))
   \   00000002   ....               SBCI    R31, (-(dim2) & 0xFFFF) >> 8
   \   00000004   8130               LD      R19, Z
   \   00000006   E020               LDI     R18, 0
   \   00000008   0F13               ADD     R17, R19
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
   \   00000002   01B9               MOVW    R23:R22, R19:R18
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002   ....               LDI     R30, LOW(cod1)
   \   00000004   ....               LDI     R31, (cod1) >> 8
   \   00000006                      REQUIRE ?Subroutine144
   \   00000006                      REQUIRE ??Subroutine149_0
   \   00000006                      ;               // Fall through to label ??Subroutine149_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine149_0:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_317:
   \   00000002                      REQUIRE ?Subroutine144
   \   00000002                      ;               // Fall through to label ?Subroutine144

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine144:
   \   00000000   E006               LDI     R16, 6
   \   00000002   ....               RJMP    rprintfFloat

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_330:
   \   00000002   ....               RJMP    ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   8100               LD      R16, Z
   \   00000002   9503               INC     R16
   \   00000004   ....               RJMP    ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R30, LOW(cod1)
   \   00000004   ....               LDI     R31, (cod1) >> 8
   \   00000006   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_158:
   \   00000008   ....               LDI     R30, LOW(cod2)
   \   0000000A   ....               LDI     R31, (cod2) >> 8
   \   0000000C   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_159:
   \   0000000E   ....               LDI     R30, LOW(cod3)
   \   00000010   ....               LDI     R31, (cod3) >> 8
   \   00000012   ....               RJMP    ?Subroutine98

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine154_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_337:
   \   00000002   ....               RJMP    ?Subroutine144

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine127
   \   00000002                      ;               // Fall through to label ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
   \   00000004   ....               RCALL   ?UL2F_L04
   \   00000006   ....               RJMP    ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   E002               LDI     R16, 2
   \   00000002   9F80               MUL     R24, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002                      REQUIRE ??Subroutine157_0
   \   00000002                      ;               // Fall through to label ??Subroutine157_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine157_0:
   \   00000000   ....               LDI     R30, LOW(cod3)
   \   00000002   ....               LDI     R31, (cod3) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002                      REQUIRE ??Subroutine158_0
   \   00000002                      ;               // Fall through to label ??Subroutine158_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine158_0:
   \   00000000   ....               LDI     R30, LOW(cod2)
   \   00000002   ....               LDI     R31, (cod2) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   E00D               LDI     R16, 13
   \   00000002   ....               RJMP    USART_SendChar

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine98:
   \   00000000   8300               ST      Z, R16
   \   00000002   8301               STD     Z+1, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine160_0:
   \   00000000   8311               STD     Z+1, R17
   \   00000002   8322               STD     Z+2, R18
   \   00000004   8333               STD     Z+3, R19
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_196:
   \   00000002   E060               LDI     R22, 0
   \   00000004   E070               LDI     R23, 0
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   E030               LDI     R19, 0
   \   00000002   ....               RJMP    ?UL2F_L04

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool du_main::state
   \                     ??state:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool du_main::state2
   \                     ??state2:
   \   00000000                      DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   8100               LD      R16, Z
   \   00000002   5F0E               SUBI    R16, 254
   \   00000004                      REQUIRE ??Subroutine147_0
   \   00000004                      ;               // Fall through to label ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void coding(unsigned int, unsigned char)
   \                     coding:
   \   00000000   ....               RCALL   ?PROLOGUE10_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002   01C8               MOVW    R25:R24, R17:R16
   \   00000004   2E62               MOV     R6, R18
   \   00000006   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_184:
   \   00000008   ....               LDI     R26, LOW(len)
   \   0000000A   ....               LDI     R27, (len) >> 8
   \   0000000C   0FA0               ADD     R26, R16
   \   0000000E   1FB1               ADC     R27, R17
   \   00000010   900D               LD      R0, X+
   \   00000012   901D               LD      R1, X+
   \   00000014   902D               LD      R2, X+
   \   00000016   903C               LD      R3, X
   \   00000018   9713               SBIW    R27:R26, 3
   \   0000001A   3082               CPI     R24, 2
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   0790               CPC     R25, R16
   \   00000020   F408               BRCC    $+2+2
   \   00000022   C0EC               RJMP    ??CrossCallReturnLabel_188
   \   00000024   012C               MOVW    R5:R4, R25:R24
   \   00000026   0C44               LSL     R4
   \   00000028   1C55               ROL     R5
   \   0000002A   9100....           LDS     R16, ind
   \   0000002E   3003               CPI     R16, 3
   \   00000030   F009               BREQ    $+2+2
   \   00000032   C040               RJMP    ??coding_0
   \   00000034   9140....           LDS     R20, c3
   \   00000038   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   0000003A   F4B0               BRCC    ??coding_1
   \   0000003C   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_399:
   \   0000003E   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_384:
   \   00000040   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_60:
   \   00000042   F410               BRCC    ??coding_2
   \   00000044   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_75:
   \   00000046   F058               BRCS    ??coding_3
   \                     ??coding_2:
   \   00000048   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_78:
   \   0000004A   F4A8               BRCC    ??coding_4
   \   0000004C   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_81:
   \   0000004E   F498               BRCC    ??coding_4
   \   00000050   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_400:
   \   00000052   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_30:
   \   00000054   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_373:
   \   00000056   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_314:
   \   00000058   8300               ST      Z, R16
   \   0000005A   300F               CPI     R16, 15
   \   0000005C   F4B0               BRCC    ??coding_5
   \                     ??coding_3:
   \   0000005E   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_192:
   \   00000060   9140....           LDS     R20, c3
   \   00000064   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   00000066   C005               RJMP    ??CrossCallReturnLabel_374
   \                     ??coding_1:
   \   00000068   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_66:
   \   0000006A   F750               BRCC    ??CrossCallReturnLabel_384
   \   0000006C   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_401:
   \   0000006E   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_169:
   \   00000070   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_374:
   \   00000072   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_315:
   \   00000074   C009               RJMP    ??coding_6
   \                     ??coding_4:
   \   00000076   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_55:
   \   00000078   F440               BRCC    ??coding_5
   \   0000007A   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_63:
   \   0000007C   F430               BRCC    ??coding_5
   \   0000007E   ....               LDI     R30, LOW(c3)
   \   00000080   ....               LDI     R31, (c3) >> 8
   \   00000082   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_33:
   \   00000084   F410               BRCC    ??coding_5
   \   00000086   9503               INC     R16
   \                     ??coding_6:
   \   00000088   8300               ST      Z, R16
   \                     ??coding_5:
   \   0000008A   9100....           LDS     R16, c3
   \   0000008E   3100               CPI     R16, 16
   \   00000090   F408               BRCC    $+2+2
   \   00000092   C07F               RJMP    ??coding_7
   \   00000094   E001               LDI     R16, 1
   \   00000096   9300....           STS     ind, R16
   \   0000009A   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_39:
   \   0000009C   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_185:
   \   0000009E   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_375:
   \   000000A0   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_405:
   \   000000A2   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_186:
   \   000000A4   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_376:
   \   000000A6   9350....           STS     c1, R21
   \   000000AA   9350....           STS     c2, R21
   \   000000AE   9350....           STS     c3, R21
   \   000000B2   C039               RJMP    ??coding_8
   \                     ??coding_0:
   \   000000B4   3002               CPI     R16, 2
   \   000000B6   F5A9               BRNE    ??coding_9
   \   000000B8   9140....           LDS     R20, c2
   \   000000BC   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   000000BE   F4C0               BRCC    ??coding_10
   \   000000C0   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_406:
   \   000000C2   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_385:
   \   000000C4   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_61:
   \   000000C6   F410               BRCC    ??coding_11
   \   000000C8   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_76:
   \   000000CA   F048               BRCS    ??coding_12
   \                     ??coding_11:
   \   000000CC   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_79:
   \   000000CE   F4C8               BRCC    ??coding_13
   \   000000D0   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_82:
   \   000000D2   F4B8               BRCC    ??coding_13
   \   000000D4   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_407:
   \   000000D6   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_31:
   \   000000D8   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_297:
   \   000000DA   300F               CPI     R16, 15
   \   000000DC   F4E0               BRCC    ??coding_14
   \                     ??coding_12:
   \   000000DE   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_408:
   \   000000E0   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_189:
   \   000000E2   9140....           LDS     R20, c2
   \   000000E6   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   000000E8   ....               LDI     R30, LOW(c2)
   \   000000EA   ....               LDI     R31, (c2) >> 8
   \   000000EC   ....               RCALL   ??Subroutine148_0
   \                     ??CrossCallReturnLabel_312:
   \   000000EE   C012               RJMP    ??coding_15
   \                     ??coding_10:
   \   000000F0   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_67:
   \   000000F2   F740               BRCC    ??CrossCallReturnLabel_385
   \   000000F4   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_409:
   \   000000F6   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_170:
   \   000000F8   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_298:
   \   000000FA   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_410:
   \   000000FC   8100               LD      R16, Z
   \   000000FE   ....               RCALL   ??Subroutine153_0
   \                     ??CrossCallReturnLabel_382:
   \   00000100   C00A               RJMP    ??coding_14
   \                     ??coding_13:
   \   00000102   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_56:
   \   00000104   F440               BRCC    ??coding_14
   \   00000106   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_64:
   \   00000108   F430               BRCC    ??coding_14
   \   0000010A   ....               LDI     R30, LOW(c2)
   \   0000010C   ....               LDI     R31, (c2) >> 8
   \   0000010E   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_34:
   \   00000110   F410               BRCC    ??coding_14
   \   00000112   9503               INC     R16
   \                     ??coding_15:
   \   00000114   8300               ST      Z, R16
   \                     ??coding_14:
   \   00000116   9100....           LDS     R16, c2
   \   0000011A   3100               CPI     R16, 16
   \   0000011C   F1D0               BRCS    ??coding_7
   \   0000011E   E003               LDI     R16, 3
   \   00000120   C036               RJMP    ??coding_16
   \                     ??coding_9:
   \   00000122   3001               CPI     R16, 1
   \   00000124   F5B1               BRNE    ??coding_7
   \                     ??coding_8:
   \   00000126   9140....           LDS     R20, c1
   \   0000012A   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_4:
   \   0000012C   F4C0               BRCC    ??coding_17
   \   0000012E   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_40:
   \   00000130   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_386:
   \   00000132   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_62:
   \   00000134   F410               BRCC    ??coding_18
   \   00000136   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_77:
   \   00000138   F048               BRCS    ??coding_19
   \                     ??coding_18:
   \   0000013A   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_80:
   \   0000013C   F4C8               BRCC    ??coding_20
   \   0000013E   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_83:
   \   00000140   F4B8               BRCC    ??coding_20
   \   00000142   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_41:
   \   00000144   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_32:
   \   00000146   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_299:
   \   00000148   300F               CPI     R16, 15
   \   0000014A   F4E0               BRCC    ??coding_21
   \                     ??coding_19:
   \   0000014C   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_42:
   \   0000014E   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_190:
   \   00000150   9140....           LDS     R20, c1
   \   00000154   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_7:
   \   00000156   ....               LDI     R30, LOW(c1)
   \   00000158   ....               LDI     R31, (c1) >> 8
   \   0000015A   ....               RCALL   ??Subroutine148_0
   \                     ??CrossCallReturnLabel_313:
   \   0000015C   C012               RJMP    ??coding_22
   \                     ??coding_17:
   \   0000015E   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_68:
   \   00000160   F740               BRCC    ??CrossCallReturnLabel_386
   \   00000162   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_43:
   \   00000164   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_171:
   \   00000166   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_300:
   \   00000168   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_44:
   \   0000016A   8100               LD      R16, Z
   \   0000016C   ....               RCALL   ??Subroutine153_0
   \                     ??CrossCallReturnLabel_383:
   \   0000016E   C00A               RJMP    ??coding_21
   \                     ??coding_20:
   \   00000170   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_57:
   \   00000172   F440               BRCC    ??coding_21
   \   00000174   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_65:
   \   00000176   F430               BRCC    ??coding_21
   \   00000178   ....               LDI     R30, LOW(c1)
   \   0000017A   ....               LDI     R31, (c1) >> 8
   \   0000017C   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_35:
   \   0000017E   F410               BRCC    ??coding_21
   \   00000180   9503               INC     R16
   \                     ??coding_22:
   \   00000182   8300               ST      Z, R16
   \                     ??coding_21:
   \   00000184   9100....           LDS     R16, c1
   \   00000188   3100               CPI     R16, 16
   \   0000018A   F018               BRCS    ??coding_7
   \   0000018C   E002               LDI     R16, 2
   \                     ??coding_16:
   \   0000018E   9300....           STS     ind, R16
   \                     ??coding_7:
   \   00000192   E001               LDI     R16, 1
   \   00000194   9300....           STS     cod_ok, R16
   \   00000198   2066               TST     R6
   \   0000019A   F581               BRNE    ??CrossCallReturnLabel_188
   \   0000019C   018C               MOVW    R17:R16, R25:R24
   \   0000019E   E020               LDI     R18, 0
   \   000001A0   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_334:
   \   000001A2   E002               LDI     R16, 2
   \   000001A4   ....               RCALL   rprintfFloat
   \   000001A6   ....               LDI     R16, LOW(`?<Constant "  / abslen= ">`)
   \   000001A8   ....               LDI     R17, (`?<Constant "  / abslen= ">`) >> 8
   \   000001AA   ....               RCALL   rprintfStr
   \   000001AC   0F88               LSL     R24
   \   000001AE   1F99               ROL     R25
   \   000001B0   01FC               MOVW    R31:R30, R25:R24
   \   000001B2   ....               SUBI    R30, LOW((-(dim1) & 0xFFFF))
   \   000001B4   ....               SBCI    R31, (-(dim1) & 0xFFFF) >> 8
   \   000001B6   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_318:
   \   000001B8   01FC               MOVW    R31:R30, R25:R24
   \   000001BA   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_177:
   \   000001BC   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_335:
   \   000001BE   E009               LDI     R16, 9
   \   000001C0   ....               RCALL   rprintfFloat
   \   000001C2   ....               LDI     R16, LOW(`?<Constant "  / len= ">`)
   \   000001C4   ....               LDI     R17, (`?<Constant "  / len= ">`) >> 8
   \   000001C6   ....               RCALL   rprintfStr
   \   000001C8   914D               LD      R20, X+
   \   000001CA   915D               LD      R21, X+
   \   000001CC   916D               LD      R22, X+
   \   000001CE   917C               LD      R23, X
   \   000001D0   E004               LDI     R16, 4
   \   000001D2   ....               RCALL   rprintfFloat
   \   000001D4   ....               LDI     R16, LOW(`?<Constant "  ">`)
   \   000001D6   ....               LDI     R17, (`?<Constant "  ">`) >> 8
   \   000001D8   ....               RCALL   rprintfStr
   \   000001DA   ....               LDI     R16, LOW(`?<Constant "  / cod1= ">`)
   \   000001DC   ....               LDI     R17, (`?<Constant "  / cod1= ">`) >> 8
   \   000001DE   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_344:
   \   000001E0   ....               LDI     R16, LOW(`?<Constant " / cod2= ">`)
   \   000001E2   ....               LDI     R17, (`?<Constant " / cod2= ">`) >> 8
   \   000001E4   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_404:
   \   000001E6   ....               RCALL   ??Subroutine149_0
   \                     ??CrossCallReturnLabel_341:
   \   000001E8   ....               LDI     R16, LOW(`?<Constant " / cod3= ">`)
   \   000001EA   ....               LDI     R17, (`?<Constant " / cod3= ">`) >> 8
   \   000001EC   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_398:
   \   000001EE   ....               RCALL   ??Subroutine149_0
   \                     ??CrossCallReturnLabel_340:
   \   000001F0   ....               LDI     R16, LOW(`?<Constant "/ minlen=">`)
   \   000001F2   ....               LDI     R17, (`?<Constant "/ minlen=">`) >> 8
   \   000001F4   ....               RCALL   rprintfStr
   \   000001F6   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_163:
   \   000001F8   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_319:
   \   000001FA   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_188:
   \   000001FC   E0EA               LDI     R30, 10
   \   000001FE   ....               RJMP    ?EPILOGUE_B10_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   EA60               LDI     R22, 160
   \   00000002   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   E460               LDI     R22, 64
   \   00000002   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   E460               LDI     R22, 64
   \   00000002   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   E060               LDI     R22, 0
   \   00000002   E470               LDI     R23, 64
   \   00000004   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   E040               LDI     R20, 0
   \   00000002   EE60               LDI     R22, 224
   \   00000004   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   E060               LDI     R22, 0
   \   00000002   E470               LDI     R23, 64
   \   00000004   0180               MOVW    R17:R16, R1:R0
   \   00000006   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   E041               LDI     R20, 1
   \   00000002   EA60               LDI     R22, 160
   \   00000004   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_234:
   \   00000002                      REQUIRE ?Subroutine133
   \   00000002                      ;               // Fall through to label ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   ....               LDI     R30, LOW(c3)
   \   00000002   ....               LDI     R31, (c3) >> 8
   \   00000004                      REQUIRE ??Subroutine148_0
   \   00000004                      ;               // Fall through to label ??Subroutine148_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine148_0:
   \   00000000   8100               LD      R16, Z
   \   00000002   5F0E               SUBI    R16, 254
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_327:
   \   00000002                      REQUIRE ?Subroutine110
   \   00000002                      ;               // Fall through to label ?Subroutine110

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   0F00               LSL     R16
   \   00000002   1F11               ROL     R17
   \   00000004   0F00               LSL     R16
   \   00000006   1F11               ROL     R17
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_328:
   \   00000002   2908               OR      R16, R8
   \   00000004   2919               OR      R17, R9
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_311:
   \   00000002   3100               CPI     R16, 16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_172:
   \   00000002   0D04               ADD     R16, R4
   \   00000004   1D15               ADC     R17, R5
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   ....               LDI     R30, LOW(c1)
   \   00000006   ....               LDI     R31, (c1) >> 8
   \   00000008   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   ....               LDI     R30, LOW(c2)
   \   00000006   ....               LDI     R31, (c2) >> 8
   \   00000008   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_149:
   \   00000002   2B20               OR      R18, R16
   \   00000004   2B31               OR      R19, R17
   \   00000006   0F28               ADD     R18, R24
   \   00000008   1F39               ADC     R19, R25
   \   0000000A   8320               ST      Z, R18
   \   0000000C   8331               STD     Z+1, R19
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_148:
   \   00000002   0148               MOVW    R9:R8, R17:R16
   \   00000004   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_194:
   \   00000006   EC60               LDI     R22, 192
   \   00000008   E37F               LDI     R23, 63
   \   0000000A   0180               MOVW    R17:R16, R1:R0
   \   0000000C   0191               MOVW    R19:R18, R3:R2
   \   0000000E   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_325:
   \   00000002                      REQUIRE ??Subroutine153_0
   \   00000002                      ;               // Fall through to label ??Subroutine153_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine153_0:
   \   00000000   0F08               ADD     R16, R24
   \   00000002   1F19               ADC     R17, R25
   \   00000004                      REQUIRE ??Subroutine154_0
   \   00000004                      ;               // Fall through to label ??Subroutine154_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   ....               LDI     R30, LOW(cod1)
   \   00000002   ....               LDI     R31, (cod1) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   ....               LDI     R30, LOW(cod3)
   \   00000002   ....               LDI     R31, (cod3) >> 8
   \   00000004                      REQUIRE ?Subroutine112
   \   00000004                      ;               // Fall through to label ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   8120               LD      R18, Z
   \   00000002   8131               LDD     R19, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_237:
   \   00000002   ....               RCALL   ?Subroutine133
   \                     ??CrossCallReturnLabel_333:
   \   00000004                      REQUIRE ?Subroutine111
   \   00000004                      ;               // Fall through to label ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   E009               LDI     R16, 9
   \   00000002   ....               RCALL   rprintfFloat
   \   00000004   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   E001               LDI     R16, 1
   \   00000002   E010               LDI     R17, 0
   \   00000004   ....               RJMP    ?S_SHL_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   E020               LDI     R18, 0
   \   00000002                      REQUIRE ?Subroutine128
   \   00000002                      ;               // Fall through to label ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 __interrupt void funTIMER1_OVF_vect(void)
   \                     funTIMER1_OVF_vect:
   \   00000000   930A               ST      -Y, R16
   \   00000002   E001               LDI     R16, 1
   \   00000004   9300....           STS     perepoln, R16
   \   00000008                      REQUIRE ?Subroutine143
   \   00000008                      ;               // Fall through to label ?Subroutine143

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine143:
   \   00000000   9109               LD      R16, Y+
   \   00000002   9518               RETI
     30          #include "SoftTimers.h" 

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T1
   \                     T1:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T2
   \                     T2:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T3
   \                     T3:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool T1out
   \                     T1out:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool T2out
   \                     T2out:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool T3out
   \                     T3out:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T1max
   \                     T1max:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T2max
   \                     T2max:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T3max
   \                     T3max:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int T1x
   \                     T1x:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int T2x
   \                     T2x:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int T3x
   \                     T3x:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   unsigned long Calibr
   \                     Calibr:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for Calibr>`
     31          #include "keys.h"
     32          //#include <stdlib.h>
     33          //#include <math.h> 
     34          #include "usart.h"
     35          //#include <stdarg.h>
     36          //************************************************************************* 
     37          #define AC_ON    SET(PORTD,6)
     38          #define AC_OFF   RES(PORTD,6)
     39          void diag(void);
     40          void led_all(bool a);
     41          void resled(void);
     42          void source(void);
     43          void resOUT(void);  
     44          void gro(uchar a);
     45          void normal(uchar rez);
     46          void writeCOD(void);
     47          uchar analizCOD(void);
     48          void programming(uchar rez);
     49          uchar getadr(void);
     50          #define acon 20000;//время включения АС при подаче питания

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     51          uint tON=acon; 
   \                     tON:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for tON>`
     52          #define MAXFUNC 23  //последний(включительно)действующий tekfunc(кол-во фукций)

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     53          uchar pr;
   \                     pr:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     54          static bool get=0;
   \                     ??get:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     55          bool onok;  
   \                     onok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     56          bool on,mute;
   \                     on:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     mute:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     57          bool zader,aoff;
   \                     zader:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     aoff:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     58          uint timerzad; 
   \                     timerzad:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     59          uchar pultadr; uchar rez;
   \                     pultadr:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     rez:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     60          extern   bool u=0,til=0,write=0; 
   \                     u:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     til:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     `write`:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     61          extern  uchar mode=0,tekfunc=0; 
   \                     mode:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     tekfunc:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     62          static uchar lastsel=1,sel=1,gro1=0,gro2=0,regaoff=0;
   \                     ??lastsel:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for lastsel>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     ??sel:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for sel>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??gro1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??gro2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??regaoff:
   \   00000000                      DS8 1
     63          

   \                                 In  segment CODE, align 2, keep-with-next
     64          void led_test()
   \                     led_test:
     65          {
     66              led_all(1); p9; p9;  led_all(0);
   \   00000000   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_391:
   \   00000002   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_88:
   \   00000004   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_89:
   \   00000006                      REQUIRE ?Subroutine145
   \   00000006                      ;               // Fall through to label ?Subroutine145
     67          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine145:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    led_all

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine66:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   EF1C               LDI     R17, 252
   \   00000004   E02A               LDI     R18, 10
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine155_0:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    led_all
     68          //***************************************************************************
     69          //                  M  A  I  N
     70          //***************************************************************************

   \                                 In  segment CODE, align 2, keep-with-next
     71          int main( void )
   \                     main:
     72          {//main
   \   00000000   938A               ST      -Y, R24
     73            p3;//установление при включении
   \   00000002   ....               RCALL   ?Subroutine65
     74            
     75             aoff=0; onok=0; pr=0; on=0; mute=0; zader=0;  til=0;
   \                     ??CrossCallReturnLabel_84:
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_198:
   \   00000008   9300....           STS     onok, R16
   \   0000000C   9300....           STS     pr, R16
   \   00000010   ....               RCALL   ??Subroutine150_0
   \                     ??CrossCallReturnLabel_346:
   \   00000012   9300....           STS     mute, R16
   \   00000016   ....               RCALL   ?Subroutine76
     76            iniPORTS();   
   \                     ??CrossCallReturnLabel_93:
   \   00000018   ....               RCALL   iniPORTS
     77            p3;//установление при включении
   \   0000001A   ....               RCALL   ?Subroutine65
     78           //----------------------------------
     79            if (keyONsm) u=1;//включаем UART
   \                     ??CrossCallReturnLabel_85:
   \   0000001C   9985               SBIC    0x10, 0x05
   \   0000001E   C004               RJMP    ??main_0
   \   00000020   E001               LDI     R16, 1
   \   00000022   9300....           STS     u, R16
   \   00000026   C002               RJMP    ??main_1
     80            if(u) USART_Init();
   \                     ??main_0:
   \   00000028   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_274:
   \   0000002A   F009               BREQ    ??main_2
   \                     ??main_1:
   \   0000002C   ....               RCALL   USART_Init
     81          //----------------------------------
     82            mode=fmode; //смена режима работы
   \                     ??main_2:
   \   0000002E   ....               LDI     R20, LOW(fmode)
   \   00000030   ....               LDI     R21, (fmode) >> 8
   \   00000032   ....               RCALL   __eeget8_16
   \   00000034   9300....           STS     mode, R16
     83            if (mode!=1 && mode!=0) { fmode=0; mode=0;   }//ini
   \   00000038   3001               CPI     R16, 1
   \   0000003A   F029               BREQ    ??main_3
   \   0000003C   2300               TST     R16
   \   0000003E   F019               BREQ    ??main_3
   \   00000040   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_205:
   \   00000042   9300....           STS     mode, R16
     84            if (modegro!=1 && modegro!=0) { modegro=0; p1;   }//ini
   \                     ??main_3:
   \   00000046   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_286:
   \   00000048   F021               BREQ    ??CrossCallReturnLabel_90
   \   0000004A   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_267:
   \   0000004C   F011               BREQ    ??CrossCallReturnLabel_90
   \   0000004E   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_208:
   \   00000050   ....               RCALL   ?Subroutine67
     85            
     86            if (keyMUTE && !keyAOFFsm) {  led_test();
   \                     ??CrossCallReturnLabel_90:
   \   00000052   9981               SBIC    0x10, 0x01
   \   00000054   C022               RJMP    ??main_4
   \   00000056   9985               SBIC    0x10, 0x05
   \   00000058   C020               RJMP    ??main_4
   \   0000005A   9B80               SBIS    0x10, 0x00
   \   0000005C   C01E               RJMP    ??main_4
   \   0000005E   ....               RCALL   led_test
     87            if (mode==0 && modegro==0)   {  fmode=1; p5;   SET(PORTB,4);  while(1) {}   }
   \   00000060   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_270:
   \   00000062   F439               BRNE    ??main_5
   \   00000064   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_268:
   \   00000066   F499               BRNE    ??main_6
   \   00000068   E001               LDI     R16, 1
   \   0000006A   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_204:
   \   0000006C   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_350:
   \   0000006E   9AC4               SBI     0x18, 0x04
   \                     ??main_7:
   \   00000070   CFFF               RJMP    ??main_7
     88            if (mode==1 && modegro==0)   {  modegro=1; p5; SET(PORTB,2);  SET(PORTB,3);  SET(PORTB,4);  while(1) {}  }
   \                     ??main_5:
   \   00000072   3001               CPI     R16, 1
   \   00000074   F491               BRNE    ??main_4
   \   00000076   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_269:
   \   00000078   F429               BRNE    ??main_8
   \   0000007A   E001               LDI     R16, 1
   \   0000007C   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_207:
   \   0000007E   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_284:
   \   00000080   9AC4               SBI     0x18, 0x04
   \                     ??main_9:
   \   00000082   CFFF               RJMP    ??main_9
   \                     ??main_8:
   \   00000084   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_287:
   \   00000086   F449               BRNE    ??main_4
     89            if (mode==1 && modegro==1)   {  fmode=0; p5; SET(PORTB,2);  SET(PORTB,3);    while(1) {}  } 
   \   00000088   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_206:
   \   0000008A   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_285:
   \   0000008C   CFFF               RJMP    ??CrossCallReturnLabel_285
   \                     ??main_6:
   \   0000008E   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_288:
   \   00000090   F421               BRNE    ??main_4
     90            if (mode==0 && modegro==1)   {  modegro=0; p5;  led_all(1);    while(1) {}   }
   \   00000092   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_209:
   \   00000094   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_351:
   \   00000096   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_390:
   \   00000098   CFFF               RJMP    ??CrossCallReturnLabel_390
     91            
     92                                        }
     93            
     94           // modegro=1; mode=1;
     95          //-----------------------------------
     96            
     97             if (keySELsm) {write=1; led_test();}//включаем программирование пульта
   \                     ??main_4:
   \   0000009A   9981               SBIC    0x10, 0x01
   \   0000009C   C004               RJMP    ??main_10
   \   0000009E   E001               LDI     R16, 1
   \   000000A0   9300....           STS     `write`, R16
   \   000000A4   ....               RCALL   led_test
     98             if (keySELsm==1 && keyAOFFsm==1)//очистка
   \                     ??main_10:
   \   000000A6   9981               SBIC    0x10, 0x01
   \   000000A8   C00F               RJMP    ??main_11
   \   000000AA   9980               SBIC    0x10, 0x00
   \   000000AC   C00D               RJMP    ??main_11
     99                {
    100                  write=1; cod1=0;cod2=0;cod3=0;
   \   000000AE   E001               LDI     R16, 1
   \   000000B0   9300....           STS     `write`, R16
   \   000000B4   ....               RCALL   ?Subroutine10
    101                  for (uchar i=0; i<=MAXFUNC; i++) {writeCOD();tekfunc++;}
   \                     ??CrossCallReturnLabel_10:
   \   000000B6   E188               LDI     R24, 24
   \                     ??main_12:
   \   000000B8   ....               RCALL   writeCOD
   \   000000BA   ....               LDI     R30, LOW(tekfunc)
   \   000000BC   ....               LDI     R31, (tekfunc) >> 8
   \   000000BE   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_308:
   \   000000C0   958A               DEC     R24
   \   000000C2   F7D1               BRNE    ??main_12
    102                  tekfunc=0;
    103                  led_all(1); while(1) {} //зависаем
   \   000000C4   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_389:
   \   000000C6   CFFF               RJMP    ??CrossCallReturnLabel_389
    104                }
    105          
    106             if (write==1) //мигание первого программируемого
   \                     ??main_11:
   \   000000C8   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_277:
   \   000000CA   F041               BREQ    ??main_13
    107             {
    108               for (uchar i=0; i<3; i++) {getadr(); p3;led_all(0); p3;}
   \   000000CC   E083               LDI     R24, 3
   \                     ??main_14:
   \   000000CE   ....               RCALL   getadr
   \   000000D0   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_86:
   \   000000D2   ....               RCALL   ?Subroutine145
   \                     ??CrossCallReturnLabel_296:
   \   000000D4   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_87:
   \   000000D6   958A               DEC     R24
   \   000000D8   F7D1               BRNE    ??main_14
    109              
    110               getadr();
   \   000000DA   ....               RCALL   getadr
    111             }
    112                     
    113          
    114              __enable_interrupt();   
   \                     ??main_13:
   \   000000DC   9478               SEI
   \   000000DE   C006               RJMP    ??main_15
    115            while(1)
    116            {
    117               rez=du_main(pr);//вызов обработчика пульта 
    118               if (write==0)  
    119               {    
    120                 pultadr=0; 
    121                 if (rez) pultadr=analizCOD();      
    122               }
    123               else programming(rez);
   \                     ??main_16:
   \   000000E0   9100....           LDS     R16, rez
   \   000000E4   ....               RCALL   programming
    124               if(u) diag();  
   \                     ??main_17:
   \   000000E6   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_275:
   \   000000E8   F009               BREQ    ??main_15
   \   000000EA   ....               RCALL   diag
   \                     ??main_15:
   \   000000EC   9100....           LDS     R16, pr
   \   000000F0   ....               RCALL   du_main
   \   000000F2   9300....           STS     rez, R16
   \   000000F6   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_278:
   \   000000F8   F799               BRNE    ??main_16
   \   000000FA   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_364:
   \   000000FC   9100....           LDS     R16, rez
   \   00000100   2300               TST     R16
   \   00000102   F389               BREQ    ??main_17
   \   00000104   ....               RCALL   ?Subroutine80
    125            }
   \                     ??CrossCallReturnLabel_356:
   \   00000106   CFEF               RJMP    ??main_17
   \   00000108                      REQUIRE _A_PIND
   \   00000108                      REQUIRE _A_PORTB
    126          }//main

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_211:
   \   00000002   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_353:
   \   00000002   9AC2               SBI     0x18, 0x02
   \   00000004                      REQUIRE ?Subroutine139
   \   00000004                      ;               // Fall through to label ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine139:
   \   00000000   9AC3               SBI     0x18, 0x03
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   EA19               LDI     R17, 169
   \   00000004   E023               LDI     R18, 3
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine117
   \   00000002                      ;               // Fall through to label ?Subroutine117

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   ....               LDI     R20, LOW(modegro)
   \   00000002   ....               LDI     R21, (modegro) >> 8
   \   00000004   ....               RJMP    __eeput8_16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine116
   \   00000002                      ;               // Fall through to label ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   ....               LDI     R20, LOW(fmode)
   \   00000002   ....               LDI     R21, (fmode) >> 8
   \   00000004   ....               RJMP    __eeput8_16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine150_0:
   \   00000000   9300....           STS     on, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   ....               RCALL   ?Subroutine121
   \                     ??CrossCallReturnLabel_218:
   \   00000002   9300....           STS     til, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   E11A               LDI     R17, 26
   \   00000004   E026               LDI     R18, 6
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine152_0:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine134
   \   00000002                      ;               // Fall through to label ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   9300....           STS     pultadr, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   9300....           STS     zader, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   ....               RCALL   analizCOD
   \   00000002   ....               RJMP    ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   9100....           LDS     R16, u
   \   00000004                      REQUIRE ?Subroutine138
   \   00000004                      ;               // Fall through to label ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine138:
   \   00000000   2300               TST     R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   E318               LDI     R17, 56
   \   00000004   E021               LDI     R18, 1
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   9300....           STS     aoff, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   9100....           LDS     R16, mode
   \   00000004   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_210:
   \   00000002                      REQUIRE ?Subroutine142
   \   00000002                      ;               // Fall through to label ?Subroutine142

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine142:
   \   00000000   3001               CPI     R16, 1
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   ....               LDI     R20, LOW(modegro)
   \   00000002   ....               LDI     R21, (modegro) >> 8
   \   00000004   ....               RJMP    __eeget8_16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   9100....           LDS     R16, `write`
   \   00000004   ....               RJMP    ?Subroutine138
    127          //***************************************************************************
    128          
    129          
    130          

   \                                 In  segment CODE, align 2, keep-with-next
    131          void main_logic()
   \                     main_logic:
    132          {
    133          
    134           if ((keyON||pultadr==25 || pultadr==90) && on==1 && zader!=1) { rprintfStr("OFF>adr="); rprintfFloat(9, pultadr ); ent;
   \   00000000   9985               SBIC    0x10, 0x05
   \   00000002   C004               RJMP    ??main_logic_0
   \   00000004   9B80               SBIS    0x10, 0x00
   \   00000006   C002               RJMP    ??main_logic_0
   \   00000008   9981               SBIC    0x10, 0x01
   \   0000000A   C005               RJMP    ??main_logic_1
   \                     ??main_logic_0:
   \   0000000C   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_99:
   \   0000000E   3109               CPI     R16, 25
   \   00000010   F011               BREQ    ??main_logic_1
   \   00000012   350A               CPI     R16, 90
   \   00000014   F499               BRNE    ??CrossCallReturnLabel_361
   \                     ??main_logic_1:
   \   00000016   9110....           LDS     R17, on
   \   0000001A   9120....           LDS     R18, zader
   \   0000001E   E001               LDI     R16, 1
   \   00000020   2720               EOR     R18, R16
   \   00000022   2312               AND     R17, R18
   \   00000024   F059               BREQ    ??CrossCallReturnLabel_361
   \   00000026   ....               LDI     R16, LOW(`?<Constant "OFF>adr=">`)
   \   00000028   ....               LDI     R17, (`?<Constant "OFF>adr=">`) >> 8
   \   0000002A   ....               RCALL   ?Subroutine20
    135                              on=0;onok=0; p5; zader=0;  til=0; gro1=0; gro2=0; pultadr=0;  }//OFF
   \                     ??CrossCallReturnLabel_26:
   \   0000002C   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_14:
   \   0000002E   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_212:
   \   00000030   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_94:
   \   00000032   9300....           STS     ??gro1, R16
   \   00000036   9300....           STS     ??gro2, R16
   \   0000003A   ....               RCALL   ?Subroutine134
    136               if ((keyON||pultadr==25 || pultadr==90) && on==0) {rprintfStr("ON>adr="); rprintfFloat(9, pultadr ); ent;
   \                     ??CrossCallReturnLabel_361:
   \   0000003C   9985               SBIC    0x10, 0x05
   \   0000003E   C004               RJMP    ??main_logic_2
   \   00000040   9B80               SBIS    0x10, 0x00
   \   00000042   C002               RJMP    ??main_logic_2
   \   00000044   9981               SBIC    0x10, 0x01
   \   00000046   C005               RJMP    ??main_logic_3
   \                     ??main_logic_2:
   \   00000048   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_100:
   \   0000004A   3109               CPI     R16, 25
   \   0000004C   F011               BREQ    ??main_logic_3
   \   0000004E   350A               CPI     R16, 90
   \   00000050   F489               BRNE    ??CrossCallReturnLabel_365
   \                     ??main_logic_3:
   \   00000052   9100....           LDS     R16, on
   \   00000056   2300               TST     R16
   \   00000058   F469               BRNE    ??CrossCallReturnLabel_365
   \   0000005A   ....               LDI     R16, LOW(`?<Constant "ON>adr=">`)
   \   0000005C   ....               LDI     R17, (`?<Constant "ON>adr=">`) >> 8
   \   0000005E   ....               RCALL   ?Subroutine20
    137                              SET(PORTD,4); SET(PORTD,7);p5; on=1; mute=0; zader=1;timerzad=0;source();pultadr=0;  }//ON
   \                     ??CrossCallReturnLabel_27:
   \   00000060   9A94               SBI     0x12, 0x04
   \   00000062   9A97               SBI     0x12, 0x07
   \   00000064   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_352:
   \   00000066   E001               LDI     R16, 1
   \   00000068   ....               RCALL   ??Subroutine150_0
   \                     ??CrossCallReturnLabel_347:
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   9300....           STS     mute, R16
   \   00000070   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00000072   ....               RCALL   ??Subroutine152_0
    138               
    139              //выключение
    140              if (on==0 && onok==0) { on=0; aoff=0; p5; zader=0; regaoff=0; AC_OFF; delay_s(1); tON=acon; 
   \                     ??CrossCallReturnLabel_365:
   \   00000074   9100....           LDS     R16, on
   \   00000078   9110....           LDS     R17, onok
   \   0000007C   2B01               OR      R16, R17
   \   0000007E   F4A1               BRNE    ??main_logic_4
   \   00000080   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_348:
   \   00000082   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_245:
   \   00000084   9896               CBI     0x12, 0x06
   \   00000086   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_121:
   \   00000088   E200               LDI     R16, 32
   \   0000008A   E41E               LDI     R17, 78
   \   0000008C   ....               LDI     R30, LOW(tON)
   \   0000008E   ....               LDI     R31, (tON) >> 8
   \   00000090   ....               RCALL   ??Subroutine154_0
    141              						PORTB=0; RES(PORTD,7);RES(PORTD,4); resOUT(); RES(PORTC,5); RES(PORTC,0);RES(PORTD,3); onok=1;
   \                     ??CrossCallReturnLabel_377:
   \   00000092   E000               LDI     R16, 0
   \   00000094   BB08               OUT     0x18, R16
   \   00000096   9897               CBI     0x12, 0x07
   \   00000098   9894               CBI     0x12, 0x04
   \   0000009A   ....               RCALL   resOUT
   \   0000009C   98AD               CBI     0x15, 0x05
   \   0000009E   98A8               CBI     0x15, 0x00
   \   000000A0   9893               CBI     0x12, 0x03
   \   000000A2   E001               LDI     R16, 1
   \   000000A4   9300....           STS     onok, R16
    142                                    }
    143                                            
    144            
    145              pultadr=0;  if (on==1) normal(rez);
   \                     ??main_logic_4:
   \   000000A8   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_366:
   \   000000AA   9100....           LDS     R16, on
   \   000000AE   2300               TST     R16
   \   000000B0   F019               BREQ    ??main_logic_5
   \   000000B2   9100....           LDS     R16, rez
   \   000000B6   ....               RCALL   normal
    146             
    147                           
    148            
    149          
    150          }
   \                     ??main_logic_5:
   \   000000B8   9508               RET
   \   000000BA                      REQUIRE _A_PIND
   \   000000BA                      REQUIRE _A_PORTD
   \   000000BA                      REQUIRE _A_PORTB
   \   000000BA                      REQUIRE _A_PORTC

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ??Subroutine150_0
   \   00000002                      ;               // Fall through to label ??Subroutine150_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002   9100....           LDS     R16, pultadr
   \   00000006   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_336:
   \   00000008   ....               RJMP    ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RCALL   ?Subroutine121
   \                     ??CrossCallReturnLabel_216:
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               LDI     R30, LOW(timerzad)
   \   00000008   ....               LDI     R31, (timerzad) >> 8
   \   0000000A   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_157:
   \   0000000C   ....               RJMP    source

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine135:
   \   00000000   9300....           STS     ??regaoff, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   9100....           LDS     R16, pultadr
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_354:
   \   00000002   E000               LDI     R16, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_203:
   \   00000002   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_214:
   \   00000004   ....               RCALL   ?Subroutine121
   \                     ??CrossCallReturnLabel_217:
   \   00000006   ....               RJMP    ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_349:
   \   00000002   9300....           STS     onok, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   E314               LDI     R17, 52
   \   00000004   E02C               LDI     R18, 12
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET
    151          
    152          
    153          
    154          
    155          
    156          
    157          
    158           
    159          

   \                                 In  segment CODE, align 2, keep-with-next
    160          uchar getadr()//адреса  команд
   \                     getadr:
    161          {
    162            uchar adr=0;
   \   00000000   E000               LDI     R16, 0
    163            if (tekfunc==0) {adr=1; SET(PORTB,0);}//s1
   \   00000002   9110....           LDS     R17, tekfunc
   \   00000006   2311               TST     R17
   \   00000008   F411               BRNE    ??getadr_0
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   C02F               RJMP    ??getadr_1
    164            if (tekfunc==1) {adr=5; SET(PORTB,1);}
   \                     ??getadr_0:
   \   0000000E   3011               CPI     R17, 1
   \   00000010   F411               BRNE    ??getadr_2
   \   00000012   E005               LDI     R16, 5
   \   00000014   C030               RJMP    ??getadr_3
    165            if (tekfunc==2) {adr=10;SET(PORTB,2);}
   \                     ??getadr_2:
   \   00000016   3012               CPI     R17, 2
   \   00000018   F411               BRNE    ??getadr_4
   \   0000001A   E00A               LDI     R16, 10
   \   0000001C   C031               RJMP    ??getadr_5
    166            if (tekfunc==3) {adr=15;SET(PORTB,3);}
   \                     ??getadr_4:
   \   0000001E   3013               CPI     R17, 3
   \   00000020   F411               BRNE    ??getadr_6
   \   00000022   E00F               LDI     R16, 15
   \   00000024   C032               RJMP    ??getadr_7
    167            if (tekfunc==4) {adr=20;SET(PORTB,4);}//s5 или ONтыл
   \                     ??getadr_6:
   \   00000026   3014               CPI     R17, 4
   \   00000028   F411               BRNE    ??getadr_8
   \   0000002A   E104               LDI     R16, 20
   \   0000002C   C038               RJMP    ??getadr_9
    168            if (tekfunc==5) {adr=55;SET(PORTB,0);SET(PORTB,2);SET(PORTB,4);}//command return
   \                     ??getadr_8:
   \   0000002E   3015               CPI     R17, 5
   \   00000030   F411               BRNE    ??getadr_10
   \   00000032   E307               LDI     R16, 55
   \   00000034   C032               RJMP    ??getadr_11
    169            if (tekfunc==6) {adr=25;SET(PORTD,7);}//on standby
   \                     ??getadr_10:
   \   00000036   3016               CPI     R17, 6
   \   00000038   F411               BRNE    ??getadr_12
   \   0000003A   E109               LDI     R16, 25
   \   0000003C   C035               RJMP    ??getadr_13
    170            if (tekfunc==7) {adr=30;SET(PORTB,5);}//aoff
   \                     ??getadr_12:
   \   0000003E   3017               CPI     R17, 7
   \   00000040   F411               BRNE    ??getadr_14
   \   00000042   E10E               LDI     R16, 30
   \   00000044   C035               RJMP    ??getadr_15
    171            if (tekfunc==8) {adr=35;AC_ON;}//mute
   \                     ??getadr_14:
   \   00000046   3018               CPI     R17, 8
   \   00000048   F411               BRNE    ??getadr_16
   \   0000004A   E203               LDI     R16, 35
   \   0000004C   C036               RJMP    ??getadr_17
    172            if (tekfunc==9) {adr=40; }//select
   \                     ??getadr_16:
   \   0000004E   3019               CPI     R17, 9
   \   00000050   F411               BRNE    ??getadr_18
   \   00000052   E208               LDI     R16, 40
   \   00000054   9508               RET
    173            if (tekfunc==10) {adr=45; }//громкость увеличить
   \                     ??getadr_18:
   \   00000056   301A               CPI     R17, 10
   \   00000058   F411               BRNE    ??getadr_19
   \   0000005A   E20D               LDI     R16, 45
   \   0000005C   9508               RET
    174            if (tekfunc==11) {adr=50; }//громкость уменьшить
   \                     ??getadr_19:
   \   0000005E   301B               CPI     R17, 11
   \   00000060   F411               BRNE    ??getadr_20
   \   00000062   E302               LDI     R16, 50
   \   00000064   9508               RET
    175            
    176            //дублирование команд
    177             if (tekfunc==12) {adr=60; SET(PORTB,0);}//s1
   \                     ??getadr_20:
   \   00000066   301C               CPI     R17, 12
   \   00000068   F419               BRNE    ??getadr_21
   \   0000006A   E30C               LDI     R16, 60
   \                     ??getadr_1:
   \   0000006C   9AC0               SBI     0x18, 0x00
   \   0000006E   9508               RET
    178            if (tekfunc==13) {adr=65; SET(PORTB,1);}
   \                     ??getadr_21:
   \   00000070   301D               CPI     R17, 13
   \   00000072   F419               BRNE    ??getadr_22
   \   00000074   E401               LDI     R16, 65
   \                     ??getadr_3:
   \   00000076   9AC1               SBI     0x18, 0x01
   \   00000078   9508               RET
    179            if (tekfunc==14) {adr=70;SET(PORTB,2);}
   \                     ??getadr_22:
   \   0000007A   301E               CPI     R17, 14
   \   0000007C   F419               BRNE    ??getadr_23
   \   0000007E   E406               LDI     R16, 70
   \                     ??getadr_5:
   \   00000080   9AC2               SBI     0x18, 0x02
   \   00000082   9508               RET
    180            if (tekfunc==15) {adr=75;SET(PORTB,3);}
   \                     ??getadr_23:
   \   00000084   301F               CPI     R17, 15
   \   00000086   F411               BRNE    ??getadr_24
   \   00000088   E40B               LDI     R16, 75
   \                     ??getadr_7:
   \   0000008A   ....               RJMP    ?Subroutine139
    181            if (tekfunc==16) {adr=80;SET(PORTB,4);}//s5 или ONтыл
   \                     ??getadr_24:
   \   0000008C   3110               CPI     R17, 16
   \   0000008E   F411               BRNE    ??getadr_25
   \   00000090   E500               LDI     R16, 80
   \   00000092   C005               RJMP    ??getadr_9
    182            if (tekfunc==17) {adr=85;SET(PORTB,0);SET(PORTB,2);SET(PORTB,4);}//command return
   \                     ??getadr_25:
   \   00000094   3111               CPI     R17, 17
   \   00000096   F429               BRNE    ??getadr_26
   \   00000098   E505               LDI     R16, 85
   \                     ??getadr_11:
   \   0000009A   9AC0               SBI     0x18, 0x00
   \   0000009C   9AC2               SBI     0x18, 0x02
   \                     ??getadr_9:
   \   0000009E   9AC4               SBI     0x18, 0x04
   \   000000A0   9508               RET
    183            if (tekfunc==18) {adr=90;SET(PORTD,7);}//on standby
   \                     ??getadr_26:
   \   000000A2   3112               CPI     R17, 18
   \   000000A4   F411               BRNE    ??getadr_27
   \   000000A6   E50A               LDI     R16, 90
   \                     ??getadr_13:
   \   000000A8   ....               RJMP    ?Subroutine140
    184            if (tekfunc==19) {adr=95;SET(PORTB,5);}//aoff
   \                     ??getadr_27:
   \   000000AA   3113               CPI     R17, 19
   \   000000AC   F419               BRNE    ??getadr_28
   \   000000AE   E50F               LDI     R16, 95
   \                     ??getadr_15:
   \   000000B0   9AC5               SBI     0x18, 0x05
   \   000000B2   9508               RET
    185            if (tekfunc==20) {adr=100;AC_ON;}//mute
   \                     ??getadr_28:
   \   000000B4   3114               CPI     R17, 20
   \   000000B6   F419               BRNE    ??getadr_29
   \   000000B8   E604               LDI     R16, 100
   \                     ??getadr_17:
   \   000000BA   9A96               SBI     0x12, 0x06
   \   000000BC   9508               RET
    186            if (tekfunc==21) {adr=105; }//select
   \                     ??getadr_29:
   \   000000BE   3115               CPI     R17, 21
   \   000000C0   F411               BRNE    ??getadr_30
   \   000000C2   E609               LDI     R16, 105
   \   000000C4   9508               RET
    187            if (tekfunc==22) {adr=110; }//громкость увеличить
   \                     ??getadr_30:
   \   000000C6   3116               CPI     R17, 22
   \   000000C8   F411               BRNE    ??getadr_31
   \   000000CA   E60E               LDI     R16, 110
   \   000000CC   9508               RET
    188            if (tekfunc==23) {adr=115; }//громкость уменьшить
   \                     ??getadr_31:
   \   000000CE   3117               CPI     R17, 23
   \   000000D0   F409               BRNE    ??getadr_32
   \   000000D2   E703               LDI     R16, 115
    189            return(adr);
   \                     ??getadr_32:
   \   000000D4   9508               RET
   \   000000D6                      REQUIRE _A_PORTB
   \   000000D6                      REQUIRE _A_PORTD
    190          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine140:
   \   00000000   9A97               SBI     0x12, 0x07
   \   00000002   9508               RET
    191          
    192          

   \                                 In  segment CODE, align 2, keep-with-next
    193          void pult() 
   \                     pult:
    194          {
    195             tON=1500; zader=1;timerzad=0; source(); p2;   //время включения АС при переключениях
   \   00000000   ED0C               LDI     R16, 220
   \   00000002   E015               LDI     R17, 5
   \   00000004   ....               LDI     R30, LOW(tON)
   \   00000006   ....               LDI     R31, (tON) >> 8
   \   00000008   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_378:
   \   0000000A   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   0000000C   ....               RJMP    ?Subroutine81
    196          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   E710               LDI     R17, 112
   \   00000004   E022               LDI     R18, 2
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET
    197          

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   9300....           STS     mute, R16
   \   00000004                      REQUIRE ?Subroutine134
   \   00000004                      REQUIRE ??Subroutine151_0
   \   00000004                      ;               // Fall through to label ??Subroutine151_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine151_0:
   \   00000000   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_355:
   \   00000002                      REQUIRE ?Subroutine134
   \   00000002                      REQUIRE ??Subroutine152_0
   \   00000002                      ;               // Fall through to label ??Subroutine152_0

   \                                 In  segment CODE, align 2, keep-with-next
    198          void normal(uchar rez)//-----------------------главная логика --------------------
   \                     normal:
    199          {   
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    200             pultadr=0; 
   \   00000004   ....               RCALL   ??Subroutine152_0
    201            
    202             migWORK();
   \                     ??CrossCallReturnLabel_367:
   \   00000006   ....               RCALL   migWORK
    203             
    204            
    205             if (rez)
   \   00000008   2388               TST     R24
   \   0000000A   F409               BRNE    $+2+2
   \   0000000C   C07E               RJMP    ??CrossCallReturnLabel_92
    206             {//если есть команда с пульта
    207               
    208               pultadr=analizCOD();
   \   0000000E   ....               RCALL   ?Subroutine80
    209               
    210               if (pultadr==0){  RES(PORTD,7); delay_ms(100); SET(PORTD,7);
   \                     ??CrossCallReturnLabel_357:
   \   00000010   2300               TST     R16
   \   00000012   F439               BRNE    ??normal_0
   \   00000014   9897               CBI     0x12, 0x07
   \   00000016   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_91:
   \   00000018   9A97               SBI     0x12, 0x07
    211                rprintfStr("normal>no find command ");  ent;}
   \   0000001A   ....               LDI     R16, LOW(`?<Constant "normal>no find command ">`)
   \   0000001C   ....               LDI     R17, (`?<Constant "normal>no find command ">`) >> 8
   \   0000001E   ....               RCALL   rprintfStr
   \   00000020   C005               RJMP    ??CrossCallReturnLabel_338
    212               else { rprintfStr("normal>command find  adr= ");
   \                     ??normal_0:
   \   00000022   ....               LDI     R16, LOW(`?<Constant "normal>command find  ...">`)
   \   00000024   ....               LDI     R17, (`?<Constant "normal>command find  ...">`) >> 8
   \   00000026   ....               RCALL   rprintfStr
    213                rprintfFloat(6, pultadr ); ent;}
   \   00000028   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_101:
   \   0000002A   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_338:
   \   0000002C   ....               RCALL   ?Subroutine131
    214               
    215               if (pultadr==1 || pultadr==60) {if (sel!=1)  { AC_OFF; lastsel=sel; sel=1; pult(); } else   migINI(sel-1, 3 ,0); 
   \                     ??CrossCallReturnLabel_243:
   \   0000002E   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_102:
   \   00000030   3001               CPI     R16, 1
   \   00000032   F011               BREQ    ??normal_1
   \   00000034   330C               CPI     R16, 60
   \   00000036   F451               BRNE    ??normal_2
   \                     ??normal_1:
   \   00000038   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_253:
   \   0000003A   3001               CPI     R16, 1
   \   0000003C   F021               BREQ    ??normal_3
   \   0000003E   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_116:
   \   00000040   E001               LDI     R16, 1
   \   00000042   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_133:
   \   00000044   C003               RJMP    ??normal_2
   \                     ??normal_3:
   \   00000046   ....               RCALL   ?Subroutine51
    216           }
   \                     ??CrossCallReturnLabel_50:
   \   00000048   E000               LDI     R16, 0
   \   0000004A   ....               RCALL   migINI
    217               if (pultadr==5 || pultadr==65) {if (sel!=2)  {AC_OFF; lastsel=sel;sel=2; pult(); }  else  migINI(sel-1, 3 ,0); 
   \                     ??normal_2:
   \   0000004C   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_103:
   \   0000004E   3005               CPI     R16, 5
   \   00000050   F011               BREQ    ??normal_4
   \   00000052   3401               CPI     R16, 65
   \   00000054   F451               BRNE    ??normal_5
   \                     ??normal_4:
   \   00000056   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_254:
   \   00000058   3002               CPI     R16, 2
   \   0000005A   F021               BREQ    ??normal_6
   \   0000005C   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_117:
   \   0000005E   E002               LDI     R16, 2
   \   00000060   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_132:
   \   00000062   C003               RJMP    ??normal_5
   \                     ??normal_6:
   \   00000064   ....               RCALL   ?Subroutine51
    218          }
   \                     ??CrossCallReturnLabel_51:
   \   00000066   E001               LDI     R16, 1
   \   00000068   ....               RCALL   migINI
    219               if (pultadr==10 || pultadr==70) {if (sel!=3) {AC_OFF; lastsel=sel;sel=3; pult(); } else    migINI(sel-1, 3 ,0); 
   \                     ??normal_5:
   \   0000006A   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_104:
   \   0000006C   300A               CPI     R16, 10
   \   0000006E   F011               BREQ    ??normal_7
   \   00000070   3406               CPI     R16, 70
   \   00000072   F451               BRNE    ??normal_8
   \                     ??normal_7:
   \   00000074   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_255:
   \   00000076   3003               CPI     R16, 3
   \   00000078   F021               BREQ    ??normal_9
   \   0000007A   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_118:
   \   0000007C   E003               LDI     R16, 3
   \   0000007E   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_131:
   \   00000080   C003               RJMP    ??normal_8
   \                     ??normal_9:
   \   00000082   ....               RCALL   ?Subroutine51
    220          }
   \                     ??CrossCallReturnLabel_52:
   \   00000084   E002               LDI     R16, 2
   \   00000086   ....               RCALL   migINI
    221               if (pultadr==15 || pultadr==75) {if (sel!=4) {AC_OFF; lastsel=sel;sel=4; pult(); } else   migINI(sel-1, 3 ,0); 
   \                     ??normal_8:
   \   00000088   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_105:
   \   0000008A   300F               CPI     R16, 15
   \   0000008C   F011               BREQ    ??normal_10
   \   0000008E   340B               CPI     R16, 75
   \   00000090   F451               BRNE    ??normal_11
   \                     ??normal_10:
   \   00000092   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_256:
   \   00000094   3004               CPI     R16, 4
   \   00000096   F021               BREQ    ??normal_12
   \   00000098   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_119:
   \   0000009A   E004               LDI     R16, 4
   \   0000009C   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_130:
   \   0000009E   C003               RJMP    ??normal_11
   \                     ??normal_12:
   \   000000A0   ....               RCALL   ?Subroutine51
    222           }
   \                     ??CrossCallReturnLabel_53:
   \   000000A2   E003               LDI     R16, 3
   \   000000A4   ....               RCALL   migINI
    223               if ((pultadr==20  || pultadr==80) && mode!=1) { if (sel!=5) {AC_OFF; lastsel=sel;sel=5; pult();}  else  migINI(sel-1, 3 ,0); 
   \                     ??normal_11:
   \   000000A6   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_106:
   \   000000A8   3104               CPI     R16, 20
   \   000000AA   F011               BREQ    ??normal_13
   \   000000AC   3500               CPI     R16, 80
   \   000000AE   F479               BRNE    ??normal_14
   \                     ??normal_13:
   \   000000B0   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_290:
   \   000000B2   F051               BREQ    ??normal_15
   \   000000B4   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_257:
   \   000000B6   3005               CPI     R16, 5
   \   000000B8   F021               BREQ    ??normal_16
   \   000000BA   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_120:
   \   000000BC   E005               LDI     R16, 5
   \   000000BE   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_129:
   \   000000C0   C003               RJMP    ??normal_15
   \                     ??normal_16:
   \   000000C2   ....               RCALL   ?Subroutine51
    224          }
   \                     ??CrossCallReturnLabel_54:
   \   000000C4   E004               LDI     R16, 4
   \   000000C6   ....               RCALL   migINI
    225               
    226               
    227               //тыловые  ------------------------------------------------------
    228               if ((  pultadr==20  || pultadr==80) && mode==1) {  
   \                     ??normal_15:
   \   000000C8   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_107:
   \   000000CA   3104               CPI     R16, 20
   \   000000CC   F019               BREQ    ??normal_17
   \                     ??normal_14:
   \   000000CE   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_108:
   \   000000D0   3500               CPI     R16, 80
   \   000000D2   F4D9               BRNE    ??CrossCallReturnLabel_92
   \                     ??normal_17:
   \   000000D4   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_291:
   \   000000D6   F4C9               BRNE    ??CrossCallReturnLabel_92
    229                   
    230                 if (til==0) { SET(PORTC,5);til=1;  
   \   000000D8   9100....           LDS     R16, til
   \   000000DC   2300               TST     R16
   \   000000DE   F471               BRNE    ??normal_18
   \   000000E0   9AAD               SBI     0x15, 0x05
   \   000000E2   E001               LDI     R16, 1
   \   000000E4   9300....           STS     til, R16
    231                         for (uchar i=0; i<2; i++) {SET(PORTB,4);p2;RES(PORTB,4);p2;}  SET(PORTB,4);  pultadr=0;  p1;}
   \   000000E8   E002               LDI     R16, 2
   \                     ??normal_19:
   \   000000EA   9AC4               SBI     0x18, 0x04
   \   000000EC   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_221:
   \   000000EE   98C4               CBI     0x18, 0x04
   \   000000F0   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_222:
   \   000000F2   950A               DEC     R16
   \   000000F4   F7D1               BRNE    ??normal_19
   \   000000F6   9AC4               SBI     0x18, 0x04
   \   000000F8   E000               LDI     R16, 0
   \   000000FA   C005               RJMP    ??normal_20
    232                 else 
    233                 if (til==1) {   RES(PORTC,5); RES(PORTB,4); til=0; pultadr=0; p1; }
   \                     ??normal_18:
   \   000000FC   98AD               CBI     0x15, 0x05
   \   000000FE   98C4               CBI     0x18, 0x04
   \   00000100   E000               LDI     R16, 0
   \   00000102   9300....           STS     til, R16
   \                     ??normal_20:
   \   00000106   ....               RCALL   ?Subroutine134
   \                     ??CrossCallReturnLabel_362:
   \   00000108   ....               RCALL   ?Subroutine67
    234               
    235                                                               }
    236             }//если есть команда с пульта
    237             
    238            //--------------- mute -------------------
    239            if (mute==1) AC_OFF; else { if (zader==0) AC_ON; }
   \                     ??CrossCallReturnLabel_92:
   \   0000010A   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_280:
   \   0000010C   F409               BRNE    $+2+2
   \   0000010E   C09B               RJMP    ??normal_21
   \   00000110   9896               CBI     0x12, 0x06
    240            if (zader==1) {timerzad++;  if (timerzad> tON)  {zader=0;timerzad=0; if (mute!=1)AC_ON;} }//задержка включения
   \                     ??normal_22:
   \   00000112   9100....           LDS     R16, zader
   \   00000116   2300               TST     R16
   \   00000118   F099               BREQ    ??normal_23
   \   0000011A   ....               LDI     R30, LOW(timerzad)
   \   0000011C   ....               LDI     R31, (timerzad) >> 8
   \   0000011E   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_36:
   \   00000120   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_379:
   \   00000122   ....               LDI     R30, LOW(tON)
   \   00000124   ....               LDI     R31, (tON) >> 8
   \   00000126   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_320:
   \   00000128   ....               LDI     R30, LOW(timerzad)
   \   0000012A   ....               LDI     R31, (timerzad) >> 8
   \   0000012C   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_191:
   \   0000012E   1702               CP      R16, R18
   \   00000130   0713               CPC     R17, R19
   \   00000132   F430               BRCC    ??normal_23
   \   00000134   E000               LDI     R16, 0
   \   00000136   ....               RCALL   ?Subroutine121
   \                     ??CrossCallReturnLabel_215:
   \   00000138   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_154:
   \   0000013A   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_281:
   \   0000013C   F409               BRNE    ??normal_23
   \                     ??normal_24:
   \   0000013E   9A96               SBI     0x12, 0x06
    241            
    242             if ((keyMUTE ||pultadr==35 || pultadr==100) && mute==0) { AC_OFF; mute=1; p5; pultadr=0;}
   \                     ??normal_23:
   \   00000140   9981               SBIC    0x10, 0x01
   \   00000142   C002               RJMP    ??normal_25
   \   00000144   9B85               SBIS    0x10, 0x05
   \   00000146   C005               RJMP    ??normal_26
   \                     ??normal_25:
   \   00000148   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_109:
   \   0000014A   3203               CPI     R16, 35
   \   0000014C   F011               BREQ    ??normal_26
   \   0000014E   3604               CPI     R16, 100
   \   00000150   F429               BRNE    ??CrossCallReturnLabel_358
   \                     ??normal_26:
   \   00000152   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_282:
   \   00000154   F419               BRNE    ??CrossCallReturnLabel_358
   \   00000156   9896               CBI     0x12, 0x06
   \   00000158   E001               LDI     R16, 1
   \   0000015A   ....               RCALL   ?Subroutine9
    243             if ((keyMUTE ||pultadr==35 || pultadr==100) && mute==1) { AC_ON; mute=0; p5; pultadr=0; }   
   \                     ??CrossCallReturnLabel_358:
   \   0000015C   9981               SBIC    0x10, 0x01
   \   0000015E   C002               RJMP    ??normal_27
   \   00000160   9B85               SBIS    0x10, 0x05
   \   00000162   C005               RJMP    ??normal_28
   \                     ??normal_27:
   \   00000164   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_110:
   \   00000166   3203               CPI     R16, 35
   \   00000168   F011               BREQ    ??normal_28
   \   0000016A   3604               CPI     R16, 100
   \   0000016C   F429               BRNE    ??CrossCallReturnLabel_359
   \                     ??normal_28:
   \   0000016E   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_283:
   \   00000170   F019               BREQ    ??CrossCallReturnLabel_359
   \   00000172   9A96               SBI     0x12, 0x06
   \   00000174   E000               LDI     R16, 0
   \   00000176   ....               RCALL   ?Subroutine9
    244             
    245             
    246            //--------------- aoff --------------------
    247           
    248             
    249             if ((keyAOFF || pultadr==30 || pultadr==95) && aoff==1 && regaoff>=3)  {  RES(PORTB,5);  p5; aoff=0; regaoff=0; pultadr=0;}//отмена aoff 
   \                     ??CrossCallReturnLabel_359:
   \   00000178   9980               SBIC    0x10, 0x00
   \   0000017A   C002               RJMP    ??normal_29
   \   0000017C   9B85               SBIS    0x10, 0x05
   \   0000017E   C004               RJMP    ??normal_30
   \                     ??normal_29:
   \   00000180   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_95:
   \   00000182   F011               BREQ    ??normal_30
   \   00000184   350F               CPI     R16, 95
   \   00000186   F461               BRNE    ??CrossCallReturnLabel_363
   \                     ??normal_30:
   \   00000188   9100....           LDS     R16, aoff
   \   0000018C   2300               TST     R16
   \   0000018E   F041               BREQ    ??CrossCallReturnLabel_363
   \   00000190   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_134:
   \   00000192   3003               CPI     R16, 3
   \   00000194   F028               BRCS    ??CrossCallReturnLabel_363
   \   00000196   98C5               CBI     0x18, 0x05
   \   00000198   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_213:
   \   0000019A   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_199:
   \   0000019C   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_247:
   \   0000019E   ....               RCALL   ?Subroutine134
    250             
    251            if ((keyAOFF || pultadr==30 || pultadr==95) && regaoff==0) { aoff=1; regaoff++; iniT1(60*60*2)/*2 часа*/; pultadr=0;  for (uchar i=0; i<3; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??CrossCallReturnLabel_363:
   \   000001A0   9980               SBIC    0x10, 0x00
   \   000001A2   C002               RJMP    ??normal_31
   \   000001A4   9B85               SBIS    0x10, 0x05
   \   000001A6   C004               RJMP    ??normal_32
   \                     ??normal_31:
   \   000001A8   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_96:
   \   000001AA   F011               BREQ    ??normal_32
   \   000001AC   350F               CPI     R16, 95
   \   000001AE   F469               BRNE    ??normal_33
   \                     ??normal_32:
   \   000001B0   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_135:
   \   000001B2   2300               TST     R16
   \   000001B4   F451               BRNE    ??normal_33
   \   000001B6   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_200:
   \   000001B8   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_248:
   \   000001BA   E200               LDI     R16, 32
   \   000001BC   E11C               LDI     R17, 28
   \   000001BE   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_49:
   \   000001C0   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_368:
   \   000001C2   E003               LDI     R16, 3
   \                     ??normal_34:
   \   000001C4   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_16:
   \   000001C6   F7F1               BRNE    ??normal_34
   \   000001C8   9AC5               SBI     0x18, 0x05
    252            if ((keyAOFF || pultadr==30 || pultadr==95) && regaoff==1) { aoff=1; regaoff++; iniT1(60*60*1)/*1 часа*/; pultadr=0; for (uchar i=0; i<2; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??normal_33:
   \   000001CA   9980               SBIC    0x10, 0x00
   \   000001CC   C002               RJMP    ??normal_35
   \   000001CE   9B85               SBIS    0x10, 0x05
   \   000001D0   C004               RJMP    ??normal_36
   \                     ??normal_35:
   \   000001D2   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_97:
   \   000001D4   F011               BREQ    ??normal_36
   \   000001D6   350F               CPI     R16, 95
   \   000001D8   F471               BRNE    ??normal_37
   \                     ??normal_36:
   \   000001DA   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_136:
   \   000001DC   3001               CPI     R16, 1
   \   000001DE   F459               BRNE    ??normal_37
   \   000001E0   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_201:
   \   000001E2   E002               LDI     R16, 2
   \   000001E4   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_249:
   \   000001E6   E100               LDI     R16, 16
   \   000001E8   E01E               LDI     R17, 14
   \   000001EA   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_48:
   \   000001EC   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_369:
   \   000001EE   E002               LDI     R16, 2
   \                     ??normal_38:
   \   000001F0   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_17:
   \   000001F2   F7F1               BRNE    ??normal_38
   \   000001F4   9AC5               SBI     0x18, 0x05
    253            if ((keyAOFF || pultadr==30 || pultadr==95) && regaoff==2) { aoff=1; regaoff++; iniT1(60*60*0.5)/*0.5 часа*/; pultadr=0; for (uchar i=0; i<1; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??normal_37:
   \   000001F6   9980               SBIC    0x10, 0x00
   \   000001F8   C002               RJMP    ??normal_39
   \   000001FA   9B85               SBIS    0x10, 0x05
   \   000001FC   C004               RJMP    ??normal_40
   \                     ??normal_39:
   \   000001FE   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_98:
   \   00000200   F011               BREQ    ??normal_40
   \   00000202   350F               CPI     R16, 95
   \   00000204   F479               BRNE    ??normal_41
   \                     ??normal_40:
   \   00000206   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_137:
   \   00000208   3002               CPI     R16, 2
   \   0000020A   F461               BRNE    ??normal_41
   \   0000020C   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_202:
   \   0000020E   E003               LDI     R16, 3
   \   00000210   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_250:
   \   00000212   E008               LDI     R16, 8
   \   00000214   E017               LDI     R17, 7
   \   00000216   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_47:
   \   00000218   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_370:
   \   0000021A   9AC5               SBI     0x18, 0x05
   \   0000021C   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_113:
   \   0000021E   98C5               CBI     0x18, 0x05
   \   00000220   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_114:
   \   00000222   9AC5               SBI     0x18, 0x05
    254            
    255             
    256           //  if ((keyAOFF || pultadr==30 || pultadr==95) && aoff==0) 
    257           //     {   aoff=1;  iniT1(60*60*2)/*2 часа*/; pultadr=0;
    258           //         for (uchar i=0; i<2; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5);
    259            //   
    260            //        
    261           //         for (uint i=0; i<1000; i++)
    262           //         {   char rez=du_main(0);  if (rez==1) { pultadr=analizCOD();break; }}
    263           //         
    264            //    //если user продолжает удерживать
    265            //    if ((keyAOFF || pultadr==30 || pultadr==95) ) { iniT1(60*30);/*30 мин*/
    266           //      for (uchar i=0; i<4; i++)  {SET(PORTB,5);p2;p2;p2;p2;p2;RES(PORTB,5);p2;}  SET(PORTB,5);
    267            //                                    }
    268            //    
    269             //   }
    270                                                                  
    271             
    272            
    273           
    274            if (aoff==1)  {    WorkT1(); if (T1out) { on=0; onok=0;  aoff=0; p5; zader=0; regaoff=0;}
   \                     ??normal_41:
   \   00000224   9100....           LDS     R16, aoff
   \   00000228   2300               TST     R16
   \   0000022A   F039               BREQ    ??CrossCallReturnLabel_246
   \   0000022C   ....               RCALL   WorkT1
   \   0000022E   9100....           LDS     R16, T1out
   \   00000232   2300               TST     R16
   \   00000234   F011               BREQ    ??CrossCallReturnLabel_246
   \   00000236   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_15:
   \   00000238   ....               RCALL   ?Subroutine15
    275                          } 
    276                          
    277           //--------------- select -------------------
    278                          if ( u!=1) {//что бы во время работы UART не срабатывал
   \                     ??CrossCallReturnLabel_246:
   \   0000023A   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_276:
   \   0000023C   F5E1               BRNE    ??normal_42
    279             uchar kol;  if  (mode==1) kol=4; else kol=5;
   \   0000023E   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_292:
   \   00000240   F441               BRNE    ??normal_43
   \   00000242   E004               LDI     R16, 4
   \   00000244   C007               RJMP    ??normal_44
   \                     ??normal_21:
   \   00000246   9100....           LDS     R16, zader
   \   0000024A   2300               TST     R16
   \   0000024C   F009               BREQ    $+2+2
   \   0000024E   CF61               RJMP    ??normal_22
   \   00000250   CF76               RJMP    ??normal_24
   \                     ??normal_43:
   \   00000252   E005               LDI     R16, 5
    280             if (keySEL ||pultadr==40 || pultadr==105) 
   \                     ??normal_44:
   \   00000254   9981               SBIC    0x10, 0x01
   \   00000256   C002               RJMP    ??normal_45
   \   00000258   9985               SBIC    0x10, 0x05
   \   0000025A   C006               RJMP    ??normal_46
   \                     ??normal_45:
   \   0000025C   9110....           LDS     R17, pultadr
   \   00000260   3218               CPI     R17, 40
   \   00000262   F011               BREQ    ??normal_46
   \   00000264   3619               CPI     R17, 105
   \   00000266   F499               BRNE    ??CrossCallReturnLabel_128
    281                          { 
    282                                  if (sel<=(kol-1)) { AC_OFF; p2; RES(PORTB,(sel-1));lastsel=sel; sel++; pult(); } 
   \                     ??normal_46:
   \   00000268   950A               DEC     R16
   \   0000026A   9110....           LDS     R17, ??sel
   \   0000026E   1701               CP      R16, R17
   \   00000270   9896               CBI     0x12, 0x06
   \   00000272   F030               BRCS    ??normal_47
   \   00000274   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_115:
   \   00000276   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_251:
   \   00000278   9300....           STS     ??lastsel, R16
   \   0000027C   9503               INC     R16
   \   0000027E   C006               RJMP    ??normal_48
    283                                 else { AC_OFF;  RES(PORTB,(sel-1)); sel=1; pult(); }
   \                     ??normal_47:
   \   00000280   9140....           LDS     R20, ??sel
   \   00000284   954A               DEC     R20
   \   00000286   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_146:
   \   00000288   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_219:
   \   0000028A   E001               LDI     R16, 1
    284                        
    285                          }
   \                     ??normal_48:
   \   0000028C   ....               RCALL   ?Subroutine87
    286                                   
    287            //--------------- return sel -------------------  возврат в предыдущий source                 
    288             if ( pultadr==55 || pultadr==85) {
   \                     ??CrossCallReturnLabel_128:
   \   0000028E   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_111:
   \   00000290   3307               CPI     R16, 55
   \   00000292   F011               BREQ    ??normal_49
   \   00000294   3505               CPI     R16, 85
   \   00000296   F479               BRNE    ??normal_42
    289               
    290               if (sel!=lastsel) {
   \                     ??normal_49:
   \   00000298   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_258:
   \   0000029A   9110....           LDS     R17, ??lastsel
   \   0000029E   1701               CP      R16, R17
   \   000002A0   F051               BREQ    ??normal_42
    291                 AC_OFF;  RES(PORTB,(sel-1)); uchar tmp1=sel; sel=lastsel;  lastsel=tmp1; pultadr=0;  pult();
   \   000002A2   9896               CBI     0x12, 0x06
   \   000002A4   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_252:
   \   000002A6   9110....           LDS     R17, ??lastsel
   \   000002AA   9310....           STS     ??sel, R17
   \   000002AE   9300....           STS     ??lastsel, R16
   \   000002B2   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_371:
   \   000002B4   ....               RCALL   pult
    292               }
    293                                                }
    294                        
    295                                    }//что бы во время работы UART не срабатывал
    296                                     
    297                                    
    298                           
    299           //--------------- ГРОМКОСТЬ -------------------
    300             if (pultadr==45 || pultadr==110) { gro(1); p5;  pultadr=0; }  
   \                     ??normal_42:
   \   000002B6   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_112:
   \   000002B8   320D               CPI     R16, 45
   \   000002BA   F011               BREQ    ??normal_50
   \   000002BC   360E               CPI     R16, 110
   \   000002BE   F411               BRNE    ??normal_51
   \                     ??normal_50:
   \   000002C0   E001               LDI     R16, 1
   \   000002C2   C005               RJMP    ??normal_52
    301             if (pultadr==50 || pultadr==115) { gro(2); p5;  pultadr=0; }  
   \                     ??normal_51:
   \   000002C4   3302               CPI     R16, 50
   \   000002C6   F011               BREQ    ??normal_53
   \   000002C8   3703               CPI     R16, 115
   \   000002CA   F419               BRNE    ??CrossCallReturnLabel_360
   \                     ??normal_53:
   \   000002CC   E002               LDI     R16, 2
   \                     ??normal_52:
   \   000002CE   ....               RCALL   gro
   \   000002D0   ....               RCALL   ??Subroutine151_0
    302             
    303             
    304                          
    305           
    306                                    
    307                                    
    308             
    309             
    310          }
   \                     ??CrossCallReturnLabel_360:
   \   000002D2   ....               RJMP    ?Subroutine141
   \   000002D4                      REQUIRE _A_PORTD
   \   000002D4                      REQUIRE _A_PORTC
   \   000002D4                      REQUIRE _A_PORTB
   \   000002D4                      REQUIRE _A_PIND

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   9100....           LDS     R16, ??regaoff
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   9100....           LDS     R16, mute
   \   00000004   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   EF4F               LDI     R20, 255
   \   00000002   E750               LDI     R21, 112
   \   00000004   E062               LDI     R22, 2
   \   00000006   5041               SUBI    R20, 1
   \   00000008   4050               SBCI    R21, 0
   \   0000000A   4060               SBCI    R22, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   9300....           STS     ??sel, R16
   \   00000004   ....               RJMP    pult

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   9896               CBI     0x12, 0x06
   \   00000002   9100....           LDS     R16, ??sel
   \   00000006   9300....           STS     ??lastsel, R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   9100....           LDS     R16, pultadr
   \   00000004   310E               CPI     R16, 30
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   E020               LDI     R18, 0
   \   00000002   E013               LDI     R17, 3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
   \   00000004   ....               RJMP    iniT1

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   9AC5               SBI     0x18, 0x05
   \   00000002   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_223:
   \   00000004   98C5               CBI     0x18, 0x05
   \   00000006   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_224:
   \   00000008   950A               DEC     R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E001               LDI     R16, 1
   \   00000002                      REQUIRE ?Subroutine114
   \   00000002                      ;               // Fall through to label ?Subroutine114

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   9140....           LDS     R20, ??sel
   \   00000004   954A               DEC     R20
   \   00000006   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_150:
   \   00000008   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_220:
   \   0000000A                      REQUIRE ?Subroutine136
   \   0000000A                      ;               // Fall through to label ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine136:
   \   00000000   9100....           LDS     R16, ??sel
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   9500               COM     R16
   \   00000002   B318               IN      R17, 0x18
   \   00000004   2310               AND     R17, R16
   \   00000006   BB18               OUT     0x18, R17
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine141:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine74:
   \   00000000   9100....           LDS     R16, mode
   \   00000004   ....               RJMP    ?Subroutine142

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_326:
   \   00000002   5F0F               SUBI    R16, 255
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   9508               RET
    311           //------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    312          void source()
   \                     source:
    313          {  
    314           
    315            
    316             
    317            if (sel==1){ resOUT(); resled(); SET(PORTC,1);}
   \   00000000   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_259:
   \   00000002   3001               CPI     R16, 1
   \   00000004   F411               BRNE    ??source_0
   \   00000006   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_127:
   \   00000008   9AA9               SBI     0x15, 0x01
    318            if (sel==2){ resOUT(); resled(); SET(PORTC,2);}
   \                     ??source_0:
   \   0000000A   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_260:
   \   0000000C   3002               CPI     R16, 2
   \   0000000E   F411               BRNE    ??source_1
   \   00000010   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_126:
   \   00000012   9AAA               SBI     0x15, 0x02
    319            if (sel==3){ resOUT(); resled(); SET(PORTC,3);}
   \                     ??source_1:
   \   00000014   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_261:
   \   00000016   3003               CPI     R16, 3
   \   00000018   F411               BRNE    ??source_2
   \   0000001A   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_125:
   \   0000001C   9AAB               SBI     0x15, 0x03
    320            if (sel==4){ resOUT(); resled();SET(PORTC,4);}
   \                     ??source_2:
   \   0000001E   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_262:
   \   00000020   3004               CPI     R16, 4
   \   00000022   F411               BRNE    ??source_3
   \   00000024   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_124:
   \   00000026   9AAC               SBI     0x15, 0x04
    321            if (sel==5 && mode==0 ){  resOUT(); resled();SET(PORTC,5);}
   \                     ??source_3:
   \   00000028   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_263:
   \   0000002A   3005               CPI     R16, 5
   \   0000002C   F421               BRNE    ??source_4
   \   0000002E   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_271:
   \   00000030   F411               BRNE    ??source_4
   \   00000032   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_123:
   \   00000034   9AAD               SBI     0x15, 0x05
    322            
    323            if (mute!=1 ) if (zader==0) AC_ON;//вкл АС
   \                     ??source_4:
   \   00000036   9100....           LDS     R16, mute
   \   0000003A   9110....           LDS     R17, zader
   \   0000003E   2B01               OR      R16, R17
   \   00000040   F409               BRNE    ??source_5
   \   00000042   9A96               SBI     0x12, 0x06
    324           
    325             migINI(sel-1, 5 ,0); 
   \                     ??source_5:
   \   00000044   E020               LDI     R18, 0
   \   00000046   E015               LDI     R17, 5
   \   00000048   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_264:
   \   0000004A   950A               DEC     R16
   \   0000004C   ....               RJMP    migINI
   \   0000004E                      REQUIRE _A_PORTC
   \   0000004E                      REQUIRE _A_PORTD
    326           
    327          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine84:
   \   00000000   ....               RCALL   resOUT
   \   00000002   ....               RJMP    resled
    328          
    329          
    330          
    331          
    332          
    333          
    334          
    335          
    336          
    337          
    338          
    339          
    340          
    341          
    342          
    343          

   \                                 In  segment CODE, align 2, keep-with-next
    344          void programming (uchar rez)
   \                     programming:
    345          {  
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    346             if (tekfunc==255) return;
   \   00000004   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_229:
   \   00000006   3F0F               CPI     R16, 255
   \   00000008   F111               BREQ    ??CrossCallReturnLabel_392
    347             if (!get)  { getadr(); get=1; }//получаем адрес и зажигаем программируемую функцию
   \   0000000A   9100....           LDS     R16, ??get
   \   0000000E   2300               TST     R16
   \   00000010   F421               BRNE    ??programming_0
   \   00000012   ....               RCALL   getadr
   \   00000014   E001               LDI     R16, 1
   \   00000016   9300....           STS     ??get, R16
    348             if (rez==1)
   \                     ??programming_0:
   \   0000001A   3081               CPI     R24, 1
   \   0000001C   F451               BRNE    ??CrossCallReturnLabel_393
    349             {
    350               writeCOD();
   \   0000001E   ....               RCALL   writeCOD
    351               tekfunc++;  get=0;
   \   00000020   ....               RCALL   ?Subroutine11
    352              if (tekfunc==12) {  for (uchar i=0; i<10;i++) 
   \                     ??CrossCallReturnLabel_12:
   \   00000022   F419               BRNE    ??programming_1
   \   00000024   E08A               LDI     R24, 10
    353                                     {led_all(1); p4; led_all(0);p4; }
   \                     ??programming_2:
   \   00000026   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000028   F7F1               BRNE    ??programming_2
    354                                }
    355               if (tekfunc>MAXFUNC) {tekfunc=255;led_all(1);}
   \                     ??programming_1:
   \   0000002A   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_230:
   \   0000002C   3108               CPI     R16, 24
   \   0000002E   F008               BRCS    ??CrossCallReturnLabel_393
   \   00000030   ....               RCALL   ?Subroutine5
    356          
    357             }
    358             
    359             
    360             if (keyONsm) { 
   \                     ??CrossCallReturnLabel_393:
   \   00000032   9985               SBIC    0x10, 0x05
   \   00000034   C00C               RJMP    ??CrossCallReturnLabel_392
    361                          led_all(1); delay_s(1); 
   \   00000036   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_388:
   \   00000038   ....               RCALL   ?Subroutine83
    362                          led_all(0); 
   \                     ??CrossCallReturnLabel_122:
   \   0000003A   ....               RCALL   ?Subroutine145
    363                          tekfunc++;  get=0;
   \                     ??CrossCallReturnLabel_295:
   \   0000003C   ....               RCALL   ?Subroutine11
    364                             if (tekfunc==12) {  for (uchar i=0; i<10;i++) 
   \                     ??CrossCallReturnLabel_13:
   \   0000003E   F419               BRNE    ??programming_3
   \   00000040   E08A               LDI     R24, 10
    365                                     {led_all(1); p4; led_all(0);p4; }
   \                     ??programming_4:
   \   00000042   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000044   F7F1               BRNE    ??programming_4
    366                                }
    367                          if (tekfunc>MAXFUNC) {tekfunc=255;led_all(1);}
   \                     ??programming_3:
   \   00000046   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_231:
   \   00000048   3108               CPI     R16, 24
   \   0000004A   F008               BRCS    ??CrossCallReturnLabel_392
   \   0000004C   ....               RCALL   ?Subroutine5
    368                         
    369                           }
    370               
    371          }
   \                     ??CrossCallReturnLabel_392:
   \   0000004E   ....               RJMP    ?Subroutine141
   \   00000050                      REQUIRE _A_PIND

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               LDI     R30, LOW(tekfunc)
   \   00000002   ....               LDI     R31, (tekfunc) >> 8
   \   00000004   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_310:
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     ??get, R16
   \   0000000C   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_232:
   \   0000000E   300C               CPI     R16, 12
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   9100....           LDS     R16, tekfunc
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   9300....           STS     tekfunc, R16
   \   00000006                      REQUIRE ??Subroutine155_0
   \   00000006                      ;               // Fall through to label ??Subroutine155_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_225:
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_226:
   \   00000008   958A               DEC     R24
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   ....               RCALL   led_all
   \   00000002   EF0F               LDI     R16, 255
   \   00000004   EE11               LDI     R17, 225
   \   00000006   E024               LDI     R18, 4
   \   00000008   5001               SUBI    R16, 1
   \   0000000A   4010               SBCI    R17, 0
   \   0000000C   4020               SBCI    R18, 0
   \   0000000E   F7E1               BRNE    $-6
   \   00000010   C000               RJMP    $+2
   \   00000012   0000               NOP
   \   00000014   9508               RET
    372          //--------------------------------------------------------------------
    373          

   \                                 In  segment CODE, align 2, keep-with-next
    374          void writeCOD()
   \                     writeCOD:
    375          {
   \   00000000   938A               ST      -Y, R24
    376            rprintfStr("write ..");
   \   00000002   ....               LDI     R16, LOW(`?<Constant "write ..">`)
   \   00000004   ....               LDI     R17, (`?<Constant "write ..">`) >> 8
   \   00000006   ....               RCALL   rprintfStr
    377            led_all(1);delay_s(3);
   \   00000008   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_387:
   \   0000000A   EF0F               LDI     R16, 255
   \   0000000C   E91E               LDI     R17, 158
   \   0000000E   E224               LDI     R18, 36
   \   00000010   5001               SUBI    R16, 1
   \   00000012   4010               SBCI    R17, 0
   \   00000014   4020               SBCI    R18, 0
   \   00000016   F7E1               BRNE    $-6
   \   00000018   C000               RJMP    $+2
   \   0000001A   0000               NOP
    378            uchar adr=getadr();
   \   0000001C   ....               RCALL   getadr
   \   0000001E   2F80               MOV     R24, R16
    379            led_all(0);
   \   00000020   ....               RCALL   ?Subroutine145
    380            
    381                 
    382                 k[adr]=cod1; delay_ms(30);
   \                     ??CrossCallReturnLabel_294:
   \   00000022   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_166:
   \   00000024   ....               LDI     R18, LOW(k)
   \   00000026   ....               LDI     R19, (k) >> 8
   \   00000028   0D20               ADD     R18, R0
   \   0000002A   1D31               ADC     R19, R1
   \   0000002C   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_45:
   \   0000002E   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_321:
   \   00000030   ....               RCALL   ?Subroutine90
    383                 k[adr+1]=cod2; delay_ms(30);
   \                     ??CrossCallReturnLabel_394:
   \   00000032   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_411:
   \   00000034   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_322:
   \   00000036   01A9               MOVW    R21:R20, R19:R18
   \   00000038   5F4E               SUBI    R20, 254
   \   0000003A   4F5F               SBCI    R21, 255
   \   0000003C   ....               RCALL   ??Subroutine156_0
    384                 k[adr+2]=cod3; delay_ms(30);
   \                     ??CrossCallReturnLabel_396:
   \   0000003E   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_402:
   \   00000040   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_323:
   \   00000042   5F2C               SUBI    R18, 252
   \   00000044   4F3F               SBCI    R19, 255
   \   00000046   ....               RCALL   ?Subroutine90
    385                 
    386                 rprintfStr("OK !   "); ent;
   \                     ??CrossCallReturnLabel_395:
   \   00000048   ....               LDI     R16, LOW(`?<Constant "OK !   ">`)
   \   0000004A   ....               LDI     R17, (`?<Constant "OK !   ">`) >> 8
   \   0000004C   ....               RCALL   ?Subroutine49
    387             
    388          }
   \                     ??CrossCallReturnLabel_238:
   \   0000004E                      REQUIRE ?Subroutine141
   \   0000004E                      ;               // Fall through to label ?Subroutine141

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   01A9               MOVW    R21:R20, R19:R18
   \   00000002                      REQUIRE ??Subroutine156_0
   \   00000002                      ;               // Fall through to label ??Subroutine156_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine156_0:
   \   00000000   ....               RCALL   __eeput16_16
   \   00000002   E20F               LDI     R16, 47
   \   00000004   E715               LDI     R17, 117
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   F7E9               BRNE    $-4
   \   0000000C   C000               RJMP    $+2
   \   0000000E   0000               NOP
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   ....               RCALL   rprintfStr
   \   00000002                      REQUIRE ?Subroutine131
   \   00000002                      ;               // Fall through to label ?Subroutine131
    389          
    390          
    391          
    392           

   \                                 In  segment CODE, align 2, keep-with-next
    393          uchar analizCOD ()
   \                     analizCOD:
    394          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
    395           uint i;
    396            for (i=0; i<MAXEEP-4; i++) 
   \   00000002   E080               LDI     R24, 0
   \   00000004   E090               LDI     R25, 0
    397            {
    398             // if ((kbuf[i])==cod1)  if ((kbuf[i+1])==cod2) if ((kbuf[i+2])==cod3) return(i);
    399              if ((k[i])==cod1)  if ((k[i+1])==cod2) if ((k[i+2])==cod3) return(i);   
   \                     ??analizCOD_0:
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   0F00               LSL     R16
   \   0000000A   1F11               ROL     R17
   \   0000000C   ....               LDI     R18, LOW(k)
   \   0000000E   ....               LDI     R19, (k) >> 8
   \   00000010   0F20               ADD     R18, R16
   \   00000012   1F31               ADC     R19, R17
   \   00000014   01A9               MOVW    R21:R20, R19:R18
   \   00000016   ....               RCALL   __eeget16_16
   \   00000018   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_46:
   \   0000001A   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_140:
   \   0000001C   F489               BRNE    ??analizCOD_1
   \   0000001E   01A9               MOVW    R21:R20, R19:R18
   \   00000020   5F4E               SUBI    R20, 254
   \   00000022   4F5F               SBCI    R21, 255
   \   00000024   ....               RCALL   __eeget16_16
   \   00000026   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_412:
   \   00000028   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_141:
   \   0000002A   F451               BRNE    ??analizCOD_1
   \   0000002C   5F2C               SUBI    R18, 252
   \   0000002E   4F3F               SBCI    R19, 255
   \   00000030   01A9               MOVW    R21:R20, R19:R18
   \   00000032   ....               RCALL   __eeget16_16
   \   00000034   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_193:
   \   00000036   1702               CP      R16, R18
   \   00000038   0713               CPC     R17, R19
   \   0000003A   F411               BRNE    ??analizCOD_1
   \   0000003C   2F08               MOV     R16, R24
   \   0000003E   C005               RJMP    ??analizCOD_2
    400            }
   \                     ??analizCOD_1:
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   3784               CPI     R24, 116
   \   00000044   E000               LDI     R16, 0
   \   00000046   0790               CPC     R25, R16
   \   00000048   F2F0               BRCS    ??analizCOD_0
    401          
    402          return(0);
   \                     ??analizCOD_2:
   \   0000004A                      REQUIRE ?Subroutine146
   \   0000004A                      ;               // Fall through to label ?Subroutine146
    403          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine146:
   \   00000000   E0E2               LDI     R30, 2
   \   00000002   ....               RJMP    ?EPILOGUE_B2_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004   1704               CP      R16, R20
   \   00000006   0715               CPC     R17, R21
   \   00000008   9508               RET
    404          
    405          
    406          

   \                                 In  segment CODE, align 2, keep-with-next
    407          void resled(void)
   \                     resled:
    408          {
    409            RES(PORTB,0);RES(PORTB,1);RES(PORTB,2);RES(PORTB,3); if (mode==0)RES(PORTB,4);
   \   00000000   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_142:
   \   00000002   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_272:
   \   00000004   F409               BRNE    ??resled_0
   \   00000006   98C4               CBI     0x18, 0x04
    410          }
   \                     ??resled_0:
   \   00000008   9508               RET
   \   0000000A                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   98C0               CBI     0x18, 0x00
   \   00000002   98C1               CBI     0x18, 0x01
   \   00000004   98C2               CBI     0x18, 0x02
   \   00000006   98C3               CBI     0x18, 0x03
   \   00000008   9508               RET
    411          
    412          

   \                                 In  segment CODE, align 2, keep-with-next
    413          void resOUT(void)
   \                     resOUT:
    414          {
    415            RES(PORTC,1);RES(PORTC,2);RES(PORTC,3);RES(PORTC,4); if (mode==0)RES(PORTC,5);
   \   00000000   98A9               CBI     0x15, 0x01
   \   00000002   98AA               CBI     0x15, 0x02
   \   00000004   98AB               CBI     0x15, 0x03
   \   00000006   98AC               CBI     0x15, 0x04
   \   00000008   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_273:
   \   0000000A   F409               BRNE    ??resOUT_0
   \   0000000C   98AD               CBI     0x15, 0x05
    416            p2;//что бы не было перекрытия источников
   \                     ??resOUT_0:
   \   0000000E                      REQUIRE ?Subroutine81
   \   0000000E                      REQUIRE _A_PORTC
   \   0000000E                      ;               // Fall through to label ?Subroutine81
    417          }
    418          
    419          
    420           

   \                                 In  segment CODE, align 2, keep-with-next
    421          void led_all(bool a)
   \                     led_all:
    422          {
    423           if (a)
   \   00000000   2300               TST     R16
   \   00000002   F039               BREQ    ??led_all_0
    424           {
    425             SET(PORTB,0);SET(PORTB,1);SET(PORTB,2);SET(PORTB,3);SET(PORTB,4);SET(PORTB,5);
   \   00000004   9AC0               SBI     0x18, 0x00
   \   00000006   9AC1               SBI     0x18, 0x01
   \   00000008   9AC2               SBI     0x18, 0x02
   \   0000000A   9AC3               SBI     0x18, 0x03
   \   0000000C   9AC4               SBI     0x18, 0x04
   \   0000000E   9AC5               SBI     0x18, 0x05
    426             /*AC_ON; */SET(PORTD,7);
   \   00000010   ....               RJMP    ?Subroutine140
    427           }
    428           else
    429            {
    430             RES(PORTB,0);RES(PORTB,1);RES(PORTB,2);RES(PORTB,3);RES(PORTB,4);RES(PORTB,5);
   \                     ??led_all_0:
   \   00000012   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_143:
   \   00000014   98C4               CBI     0x18, 0x04
   \   00000016   98C5               CBI     0x18, 0x05
    431             AC_OFF; RES(PORTD,7);
   \   00000018   9896               CBI     0x12, 0x06
   \   0000001A   9897               CBI     0x12, 0x07
    432           } 
    433          }
   \   0000001C   9508               RET
   \   0000001E                      REQUIRE _A_PORTB
   \   0000001E                      REQUIRE _A_PORTD
    434          
    435          

   \                                 In  segment CODE, align 2, keep-with-next
    436          void gro(uchar a)
   \                     gro:
    437          {
   \   00000000   2F10               MOV     R17, R16
    438            if (modegro!=1) {
   \   00000002   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_289:
   \   00000004   F051               BREQ    ??gro_0
    439            if (a==1) {SET(PORTC,0); delay_us(100);RES(PORTC,0);}
   \   00000006   3011               CPI     R17, 1
   \   00000008   F419               BRNE    ??gro_1
   \   0000000A   9AA8               SBI     0x15, 0x00
   \   0000000C   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_144:
   \   0000000E   C00E               RJMP    ??gro_2
    440            if (a==2) {SET(PORTD,3); delay_us(100);RES(PORTD,3);}  
   \                     ??gro_1:
   \   00000010   3012               CPI     R17, 2
   \   00000012   F511               BRNE    ??gro_3
   \   00000014   9A93               SBI     0x12, 0x03
   \   00000016   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_145:
   \   00000018   C019               RJMP    ??gro_4
    441                            }
    442            else  { 
    443              if (a==1) { if (gro1)  { gro1=0; RES(PORTC,0);  } else { gro1=1; SET(PORTC,0);  } }
   \                     ??gro_0:
   \   0000001A   3011               CPI     R17, 1
   \   0000001C   F471               BRNE    ??gro_5
   \   0000001E   9100....           LDS     R16, ??gro1
   \   00000022   2300               TST     R16
   \   00000024   F029               BREQ    ??gro_6
   \   00000026   E000               LDI     R16, 0
   \   00000028   9300....           STS     ??gro1, R16
   \                     ??gro_2:
   \   0000002C   98A8               CBI     0x15, 0x00
   \   0000002E   9508               RET
   \                     ??gro_6:
   \   00000030   E001               LDI     R16, 1
   \   00000032   9300....           STS     ??gro1, R16
   \   00000036   9AA8               SBI     0x15, 0x00
   \   00000038   9508               RET
    444              if (a==2) { if (gro2)  { gro2=0; RES(PORTD,3);  } else { gro2=1; SET(PORTD,3);  } }
   \                     ??gro_5:
   \   0000003A   3012               CPI     R17, 2
   \   0000003C   F469               BRNE    ??gro_3
   \   0000003E   9100....           LDS     R16, ??gro2
   \   00000042   2300               TST     R16
   \   00000044   F029               BREQ    ??gro_7
   \   00000046   E000               LDI     R16, 0
   \   00000048   9300....           STS     ??gro2, R16
   \                     ??gro_4:
   \   0000004C   9893               CBI     0x12, 0x03
   \   0000004E   9508               RET
   \                     ??gro_7:
   \   00000050   E001               LDI     R16, 1
   \   00000052   9300....           STS     ??gro2, R16
   \   00000056   9A93               SBI     0x12, 0x03
    445                  }
    446          }
   \                     ??gro_3:
   \   00000058   9508               RET
   \   0000005A                      REQUIRE _A_PORTC
   \   0000005A                      REQUIRE _A_PORTD

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   E805               LDI     R16, 133
   \   00000002   950A               DEC     R16
   \   00000004   F7F1               BRNE    $-2
   \   00000006   0000               NOP
   \   00000008   9508               RET
    447          
    448          
    449          
    450          
    451          
    452          
    453          //инициализация портов

   \                                 In  segment CODE, align 2, keep-with-next
    454          void iniPORTS()
   \                     iniPORTS:
    455          {
    456            
    457           
    458            //DDRx=0 - ВХОДЫ   PORTx = 0xFF; //подключаем нагрузочные резисторы
    459           //---------------------------------------------------------------
    460           //DDRx=0xFF - ВЫХОДЫ    PORTx = 0; //устанавливаем 0 на выходе
    461           
    462            
    463           DDRD = b(11011000);// 0xD8;  //PD3 4 6 7 ВЫХОДЫ  b11011000
   \   00000000   ED08               LDI     R16, 216
   \   00000002   BB01               OUT     0x11, R16
    464           PORTD = (uchar)~(b(11011000)); 
   \   00000004   E207               LDI     R16, 39
   \   00000006   BB02               OUT     0x12, R16
    465          
    466           
    467           DDRB = 0x3F; //порт B - выход    6,7-кварц
   \   00000008   E30F               LDI     R16, 63
   \   0000000A   BB07               OUT     0x17, R16
    468           PORTB = 0x00; 
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   BB08               OUT     0x18, R16
    469            
    470            
    471            DDRC =0xFF; 
   \   00000010   EF0F               LDI     R16, 255
   \   00000012   BB04               OUT     0x14, R16
    472            PORTC = 0x00; //устанавливаем 0 на выходе
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB05               OUT     0x15, R16
    473            
    474           
    475          // Timer(s)/Counter(s) Interrupt(s) initialization
    476          TIMSK=0x00;  
   \   00000018   BF09               OUT     0x39, R16
    477          TCNT0=0x00;
   \   0000001A   BF02               OUT     0x32, R16
    478          OCR1A=0x00;
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   BD0B               OUT     0x2B, R16
   \   00000020   BD0A               OUT     0x2A, R16
    479          OCR1B=0x00;
   \   00000022   BD09               OUT     0x29, R16
   \   00000024   BD08               OUT     0x28, R16
    480          TCCR1A=0x00;
   \   00000026   BD0F               OUT     0x2F, R16
    481            SET(TIMSK,TOIE1);//разреш прерывание при переполнении
   \   00000028   B709               IN      R16, 0x39
   \   0000002A   6004               ORI     R16, 0x04
   \   0000002C   BF09               OUT     0x39, R16
    482             TCCR1B=0; TIFR = 0xFF;  
   \   0000002E   BD1E               OUT     0x2E, R17
   \   00000030   EF0F               LDI     R16, 255
   \   00000032   BF08               OUT     0x38, R16
    483          TCNT1H=0x00;
   \   00000034   BD1D               OUT     0x2D, R17
    484          TCNT1L=0x00;
   \   00000036   BD1C               OUT     0x2C, R17
    485          ICR1H=0x00;
   \   00000038   BD17               OUT     0x27, R17
    486          ICR1L=0x00;
   \   0000003A   BD16               OUT     0x26, R17
    487          OCR1AH=0;
   \   0000003C   BD1B               OUT     0x2B, R17
    488          OCR1AL=0x00;
   \   0000003E   BD1A               OUT     0x2A, R17
    489          OCR1BH=0x00;
   \   00000040   BD19               OUT     0x29, R17
    490          OCR1BL=0x00;
   \   00000042   BD18               OUT     0x28, R17
    491          
    492          
    493          // External Interrupt(s) initialization
    494          // INT0: Off
    495          // INT1: Off
    496          // Interrupt on any change on pins PCINT0-7: Off
    497          //GIMSK=0x00;
    498          //MCUCR=0x00;
    499          
    500          SET(MCUCR,0); RES(MCUCR,1);//ПРЕРЫВАНИЕ ПО ИЗМЕНЕНИЮ УРОВНЯ INT0
   \   00000044   B705               IN      R16, 0x35
   \   00000046   6001               ORI     R16, 0x01
   \   00000048   BF05               OUT     0x35, R16
   \   0000004A   B705               IN      R16, 0x35
   \   0000004C   7F0D               ANDI    R16, 0xFD
   \   0000004E   BF05               OUT     0x35, R16
    501          SET(GICR,6);//РАЗРЕШАЕМ ПРЕРЫВАНИЕ INT0
   \   00000050   B70B               IN      R16, 0x3B
   \   00000052   6400               ORI     R16, 0x40
   \   00000054   BF0B               OUT     0x3B, R16
    502          
    503          
    504          
    505          
    506          // Analog Comparator initialization
    507          // Analog Comparator: Off
    508          // Analog Comparator Input Capture by Timer/Counter 1: Off
    509          ACSR=0x80;
   \   00000056   E800               LDI     R16, 128
   \   00000058   B908               OUT     0x08, R16
    510          //DIDR=0x00;
    511          
    512          } 
   \   0000005A   9508               RET
   \   0000005C                      REQUIRE _A_DDRD
   \   0000005C                      REQUIRE _A_PORTD
   \   0000005C                      REQUIRE _A_DDRB
   \   0000005C                      REQUIRE _A_PORTB
   \   0000005C                      REQUIRE _A_DDRC
   \   0000005C                      REQUIRE _A_PORTC
   \   0000005C                      REQUIRE _A_TIMSK
   \   0000005C                      REQUIRE _A_TCNT0
   \   0000005C                      REQUIRE _A_OCR1A
   \   0000005C                      REQUIRE _A_OCR1B
   \   0000005C                      REQUIRE _A_TCCR1A
   \   0000005C                      REQUIRE _A_TCCR1B
   \   0000005C                      REQUIRE _A_TIFR
   \   0000005C                      REQUIRE _A_TCNT1
   \   0000005C                      REQUIRE _A_ICR1
   \   0000005C                      REQUIRE _A_MCUCR
   \   0000005C                      REQUIRE _A_GICR
   \   0000005C                      REQUIRE _A_ACSR
    513          //************************************************************************
    514           
    515          

   \                                 In  segment CODE, align 2, keep-with-next
    516          void diag()
   \                     diag:
    517          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
    518            
    519            uchar sym = USART_GetChar(); //читаем буфер
   \   00000002   ....               RCALL   USART_GetChar
   \   00000004   2F90               MOV     R25, R16
    520            if (sym=='0') { pr=1;  rprintfStr("- vkluchen kratkiy viviod -");  ent;   }
   \   00000006   3300               CPI     R16, 48
   \   00000008   F439               BRNE    ??diag_0
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   9300....           STS     pr, R16
   \   00000010   ....               LDI     R16, LOW(`?<Constant "- vkluchen kratkiy vi...">`)
   \   00000012   ....               LDI     R17, (`?<Constant "- vkluchen kratkiy vi...">`) >> 8
   \   00000014   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_239:
   \   00000016   C01C               RJMP    ??diag_1
    521          
    522            if (sym=='e') {
   \                     ??diag_0:
   \   00000018   3605               CPI     R16, 101
   \   0000001A   F4C1               BRNE    ??diag_2
    523              ent;rprintfStr(" ==  EEPROM read == ");ent;
   \   0000001C   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_244:
   \   0000001E   ....               LDI     R16, LOW(`?<Constant " ==  EEPROM read == ">`)
   \   00000020   ....               LDI     R17, (`?<Constant " ==  EEPROM read == ">`) >> 8
   \   00000022   ....               RCALL   ?Subroutine49
    524              for (uchar i=0; i<MAXEEP-1; i++) { 
   \                     ??CrossCallReturnLabel_240:
   \   00000024   E080               LDI     R24, 0
    525                rprintfFloat(4, i );   rprintfStr(" > ");
   \                     ??diag_3:
   \   00000026   2F08               MOV     R16, R24
   \   00000028   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_235:
   \   0000002A   ....               RCALL   ?Subroutine133
   \                     ??CrossCallReturnLabel_331:
   \   0000002C   E004               LDI     R16, 4
   \   0000002E   ....               RCALL   rprintfFloat
   \   00000030   ....               LDI     R16, LOW(`?<Constant " > ">`)
   \   00000032   ....               LDI     R17, (`?<Constant " > ">`) >> 8
   \   00000034   ....               RCALL   rprintfStr
    526                 rprintfFloat(9, k[i] ); ent;
   \   00000036   ....               RCALL   ?Subroutine102
    527                                                }
   \                     ??CrossCallReturnLabel_167:
   \   00000038   ....               LDI     R20, LOW(k)
   \   0000003A   ....               LDI     R21, (k) >> 8
   \   0000003C   0D40               ADD     R20, R0
   \   0000003E   1D51               ADC     R21, R1
   \   00000040   ....               RCALL   __eeget16_16
   \   00000042   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_187:
   \   00000044   9583               INC     R24
   \   00000046   3787               CPI     R24, 119
   \   00000048   F418               BRCC    ??diag_1
   \   0000004A   CFED               RJMP    ??diag_3
    528                          }
    529            
    530            if (sym) {             //если что-то приняли, то 
   \                     ??diag_2:
   \   0000004C   2300               TST     R16
   \   0000004E   F091               BREQ    ??CrossCallReturnLabel_241
    531                rprintfStr(" get: ");
   \                     ??diag_1:
   \   00000050   ....               LDI     R16, LOW(`?<Constant " get: ">`)
   \   00000052   ....               LDI     R17, (`?<Constant " get: ">`) >> 8
   \   00000054   ....               RCALL   rprintfStr
    532                USART_SendChar(sym); 
   \   00000056   2F09               MOV     R16, R25
   \   00000058   ....               RCALL   USART_SendChar
    533          
    534                if (mode==1) rprintfStr("  regim  no source5 >");  
   \   0000005A   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_293:
   \   0000005C   F419               BRNE    ??diag_4
   \   0000005E   ....               LDI     R16, LOW(`?<Constant "  regim  no source5 >">`)
   \   00000060   ....               LDI     R17, (`?<Constant "  regim  no source5 >">`) >> 8
   \   00000062   ....               RCALL   rprintfStr
    535          if (write==1) rprintfStr("  regim  PROGRAMMING !!  READY >");  
   \                     ??diag_4:
   \   00000064   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_279:
   \   00000066   F019               BREQ    ??diag_5
   \   00000068   ....               LDI     R16, LOW(`?<Constant "  regim  PROGRAMMING ...">`)
   \   0000006A   ....               LDI     R17, (`?<Constant "  regim  PROGRAMMING ...">`) >> 8
   \   0000006C   C002               RJMP    ??diag_6
    536          else rprintfStr("  regim  normal  READY >");  
   \                     ??diag_5:
   \   0000006E   ....               LDI     R16, LOW(`?<Constant "  regim  normal  READY >">`)
   \   00000070   ....               LDI     R17, (`?<Constant "  regim  normal  READY >">`) >> 8
    537          
    538          
    539             
    540          
    541                 ent;
    542               
    543             
    544                     }
   \                     ??diag_6:
   \   00000072   ....               RCALL   ?Subroutine49
    545          }
   \                     ??CrossCallReturnLabel_241:
   \   00000074   ....               RJMP    ?Subroutine146

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine107
   \   00000002                      ;               // Fall through to label ?Subroutine107
    546          
F:\Dulov\remoteamp\SoftTimers.c
      1          
      2          #include <stdbool.h>//поддержка bool
      3          #include "iom8.h"//<ioavr.h>
      4          #include <inavr.h>
      5          #include <intrinsics.h>
      6          #include "init.h"
      7          
      8          //***************************************************************************
      9          //
     10          //***************************************************************************
     11          
     12          
     13          ulong T1,T2,T3;
     14          bool T1out,T2out,T3out;
     15          ulong T1max,T2max,T3max;
     16          uint T1x,T2x,T3x;
     17          ulong Calibr;
     18           

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     19            static uchar raz;
   \                     ??raz:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     20           static uchar port;
   \                     ??port:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     21           static uchar razct;
   \                     ??razct:
   \   00000000                      DS8 1
     22          /*
     23          #pragma vector = TIMER0_OVF_vect 
     24          __interrupt void funTIMER0_OVF_vect(void)
     25          {
     26             
     27           
     28          }
     29          */
     30          //**************************************************************
     31          //**************************************************************

   \                                 In  segment CODE, align 2, keep-with-next
     32          void ResetT1(void)
   \                     ResetT1:
     33          {
     34            T1=0;T1x=0;  T1out=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R30, LOW(T1)
   \   00000004   ....               LDI     R31, (T1) >> 8
   \   00000006   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_28:
   \   00000008   ....               LDI     R30, LOW(T1x)
   \   0000000A   ....               LDI     R31, (T1x) >> 8
   \   0000000C   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_155:
   \   0000000E   9300....           STS     T1out, R16
     35          }
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_160:
   \   00000002   8302               STD     Z+2, R16
   \   00000004   8303               STD     Z+3, R16
   \   00000006   9508               RET
     36            
     37          

   \                                 In  segment CODE, align 2, keep-with-next
     38          void iniT1(ulong max)
   \                     iniT1:
     39          {
     40           //инициализация таймера Т0 - прерывания каждую ms
     41           // TIMSK = (1<<OCIE0);
     42           // TCCR0 = (1<<WGM01)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(0<<CS02)|(1<<CS01)|(1<<CS00);
     43           // TCNT0 = 0;
     44           // OCR0 = 0x7d;
     45          
     46            T1max=max; ResetT1();
   \   00000000   ....               LDI     R30, LOW(T1max)
   \   00000002   ....               LDI     R31, (T1max) >> 8
   \   00000004   ....               RCALL   ??Subroutine159_0
   \                     ??CrossCallReturnLabel_415:
   \   00000006   ....               RJMP    ResetT1
     47          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine159_0:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ??Subroutine160_0
   \   00000002                      ;               // Fall through to label ??Subroutine160_0
     48          
     49          

   \                                 In  segment CODE, align 2, keep-with-next
     50          void WorkT1(void)
   \                     WorkT1:
     51          {
     52            if (T1out) return;
   \   00000000   9100....           LDS     R16, T1out
   \   00000004   2300               TST     R16
   \   00000006   F4D9               BRNE    ??WorkT1_0
     53            T1x++; if (T1x>=Calibr) { T1x=0; T1++; }
   \   00000008   ....               LDI     R30, LOW(T1x)
   \   0000000A   ....               LDI     R31, (T1x) >> 8
   \   0000000C   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_37:
   \   0000000E   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_380:
   \   00000010   E020               LDI     R18, 0
   \   00000012   ....               LDI     R30, LOW(Calibr)
   \   00000014   ....               LDI     R31, (Calibr) >> 8
   \   00000016   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_227:
   \   00000018   0727               CPC     R18, R23
   \   0000001A   F038               BRCS    ??CrossCallReturnLabel_417
   \   0000001C   ....               LDI     R30, LOW(T1x)
   \   0000001E   ....               LDI     R31, (T1x) >> 8
   \   00000020   8320               ST      Z, R18
   \   00000022   8321               STD     Z+1, R18
   \   00000024   ....               LDI     R30, LOW(T1)
   \   00000026   ....               LDI     R31, (T1) >> 8
   \   00000028   ....               RCALL   ?Subroutine27
     54            if (T1>=T1max) T1out=1;
   \                     ??CrossCallReturnLabel_417:
   \   0000002A   ....               LDI     R30, LOW(T1)
   \   0000002C   ....               LDI     R31, (T1) >> 8
   \   0000002E   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_173:
   \   00000030   ....               LDI     R30, LOW(T1max)
   \   00000032   ....               LDI     R31, (T1max) >> 8
   \   00000034   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_138:
   \   00000036   F018               BRCS    ??WorkT1_0
   \   00000038   E001               LDI     R16, 1
   \   0000003A   9300....           STS     T1out, R16
     55          }
   \                     ??WorkT1_0:
   \   0000003E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_176:
   \   00000002   5F0F               SUBI    R16, 255
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   4F2F               SBCI    R18, 255
   \   00000008   4F3F               SBCI    R19, 255
   \   0000000A                      REQUIRE ??Subroutine159_0
   \   0000000A                      ;               // Fall through to label ??Subroutine159_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_228:
   \   00000002   0737               CPC     R19, R23
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004   8162               LDD     R22, Z+2
   \   00000006   8173               LDD     R23, Z+3
   \   00000008   1704               CP      R16, R20
   \   0000000A   0715               CPC     R17, R21
   \   0000000C   0726               CPC     R18, R22
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_329:
   \   00000002   8122               LDD     R18, Z+2
   \   00000004   8133               LDD     R19, Z+3
   \   00000006   9508               RET
     56          
     57          //**************************************************************
     58          //**************************************************************
     59          

   \                                 In  segment CODE, align 2, keep-with-next
     60          void ResetT2(void)
   \                     ResetT2:
     61          {
     62            T2=0;T2x=0;  T2out=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R30, LOW(T2)
   \   00000004   ....               LDI     R31, (T2) >> 8
   \   00000006   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_29:
   \   00000008   ....               LDI     R30, LOW(T2x)
   \   0000000A   ....               LDI     R31, (T2x) >> 8
   \   0000000C   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_156:
   \   0000000E                      REQUIRE ?Subroutine137
   \   0000000E                      ;               // Fall through to label ?Subroutine137
     63          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine137:
   \   00000000   9300....           STS     T2out, R16
   \   00000004   9508               RET
     64            
     65          

   \                                 In  segment CODE, align 2, keep-with-next
     66          void iniT2(ulong max)
   \                     iniT2:
     67          {
     68           //инициализация таймера Т0 - прерывания каждую ms
     69           // TIMSK = (1<<OCIE0);
     70           // TCCR0 = (1<<WGM01)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(0<<CS02)|(1<<CS01)|(1<<CS00);
     71           // TCNT0 = 0;
     72           // OCR0 = 0x7d;
     73          
     74            T2max=max; ResetT2();
   \   00000000   ....               LDI     R30, LOW(T2max)
   \   00000002   ....               LDI     R31, (T2max) >> 8
   \   00000004   ....               RCALL   ??Subroutine159_0
   \                     ??CrossCallReturnLabel_416:
   \   00000006   ....               RJMP    ResetT2
     75          }
     76          
     77          

   \                                 In  segment CODE, align 2, keep-with-next
     78          void WorkT2(void)
   \                     WorkT2:
     79          {
   \   00000000   ....               RCALL   ?PROLOGUE3_L09
     80            if (T2out) return;
   \   00000002   9100....           LDS     R16, T2out
   \   00000006   2300               TST     R16
   \   00000008   F511               BRNE    ??CrossCallReturnLabel_265
     81            T2x++; if (T2x>=(Calibr/1000)) { T2x=0; T2++; }
   \   0000000A   ....               LDI     R30, LOW(T2x)
   \   0000000C   ....               LDI     R31, (T2x) >> 8
   \   0000000E   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_38:
   \   00000010   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_381:
   \   00000012   01C8               MOVW    R25:R24, R17:R16
   \   00000014   E0A0               LDI     R26, 0
   \   00000016   EE48               LDI     R20, 232
   \   00000018   E053               LDI     R21, 3
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   ....               LDI     R30, LOW(Calibr)
   \   00000020   ....               LDI     R31, (Calibr) >> 8
   \   00000022   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_174:
   \   00000024   ....               RCALL   ?UL_DIVMOD_L03
   \   00000026   1780               CP      R24, R16
   \   00000028   0791               CPC     R25, R17
   \   0000002A   07A2               CPC     R26, R18
   \   0000002C   07A3               CPC     R26, R19
   \   0000002E   F038               BRCS    ??CrossCallReturnLabel_418
   \   00000030   ....               LDI     R30, LOW(T2x)
   \   00000032   ....               LDI     R31, (T2x) >> 8
   \   00000034   83A0               ST      Z, R26
   \   00000036   83A1               STD     Z+1, R26
   \   00000038   ....               LDI     R30, LOW(T2)
   \   0000003A   ....               LDI     R31, (T2) >> 8
   \   0000003C   ....               RCALL   ?Subroutine27
     82            if (T2>=T2max) T2out=1;
   \                     ??CrossCallReturnLabel_418:
   \   0000003E   ....               LDI     R30, LOW(T2)
   \   00000040   ....               LDI     R31, (T2) >> 8
   \   00000042   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_175:
   \   00000044   ....               LDI     R30, LOW(T2max)
   \   00000046   ....               LDI     R31, (T2max) >> 8
   \   00000048   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_139:
   \   0000004A   F008               BRCS    ??CrossCallReturnLabel_265
   \   0000004C   ....               RCALL   ?Subroutine8
     83          }
   \                     ??CrossCallReturnLabel_265:
   \   0000004E   E0E3               LDI     R30, 3
   \   00000050   ....               RJMP    ?EPILOGUE_B3_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    ?Subroutine137
     84          

   \                                 In  segment CODE, align 2, keep-with-next
     85          void migINI(uchar sel,  uchar razp, bool prton)//мигание sel - кол-во раз
   \                     migINI:
     86          {
   \   00000000   2F30               MOV     R19, R16
   \   00000002   01A8               MOVW    R21:R20, R17:R16
     87            SET(PORTB,sel);//вкл-ем для ускорения индикации
   \   00000004   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_147:
   \   00000006   B318               IN      R17, 0x18
   \   00000008   2B10               OR      R17, R16
   \   0000000A   BB18               OUT     0x18, R17
     88            
     89            
     90            if (port!=255) {  //если все еще мигает
   \   0000000C   9100....           LDS     R16, ??port
   \   00000010   3F0F               CPI     R16, 255
   \   00000012   F051               BREQ    ??migINI_0
     91               
     92              if (prton)SET(PORTB,port); //фиксируем чтобы горел
   \   00000014   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_151:
   \   00000016   2322               TST     R18
   \   00000018   F019               BREQ    ??migINI_1
   \   0000001A   B318               IN      R17, 0x18
   \   0000001C   2B10               OR      R17, R16
   \   0000001E   C003               RJMP    ??migINI_2
     93              else RES(PORTB,port);
   \                     ??migINI_1:
   \   00000020   9500               COM     R16
   \   00000022   B318               IN      R17, 0x18
   \   00000024   2310               AND     R17, R16
   \                     ??migINI_2:
   \   00000026   BB18               OUT     0x18, R17
     94                          }
     95            
     96            
     97            raz=razp;  port=sel; razct=0;
   \                     ??migINI_0:
   \   00000028   9350....           STS     ??raz, R21
   \   0000002C   9330....           STS     ??port, R19
   \   00000030   E000               LDI     R16, 0
   \   00000032   9300....           STS     ??razct, R16
     98            iniT2(5);
   \   00000036   E005               LDI     R16, 5
   \   00000038   ....               RCALL   ??Subroutine161_0
     99            T2out=1;
   \                     ??CrossCallReturnLabel_419:
   \   0000003A                      REQUIRE ?Subroutine8
   \   0000003A                      REQUIRE _A_PORTB
   \   0000003A                      ;               // Fall through to label ?Subroutine8
    100            
    101          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   9140....           LDS     R20, ??port
   \   00000004                      REQUIRE ?Subroutine96
   \   00000004                      ;               // Fall through to label ?Subroutine96

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine161_0:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E020               LDI     R18, 0
   \   00000004   E030               LDI     R19, 0
   \   00000006   ....               RJMP    iniT2
    102          

   \                                 In  segment CODE, align 2, keep-with-next
    103          void migWORK(void)//мигание 
   \                     migWORK:
    104          {
   \   00000000   938A               ST      -Y, R24
    105            static bool sost=0;
    106            WorkT2();
   \   00000002   ....               RCALL   WorkT2
    107            if (T2out==1 && port!=255)  {
   \   00000004   9100....           LDS     R16, T2out
   \   00000008   2300               TST     R16
   \   0000000A   F0C9               BREQ    ??migWORK_0
   \   0000000C   9100....           LDS     R16, ??port
   \   00000010   3F0F               CPI     R16, 255
   \   00000012   F0A9               BREQ    ??migWORK_0
    108                 if (sost!=1)  {sost=1; iniT2(200); SET(PORTB,port); razct++;}
   \   00000014   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_152:
   \   00000016   2F80               MOV     R24, R16
   \   00000018   9100....           LDS     R16, ??sost
   \   0000001C   2300               TST     R16
   \   0000001E   F449               BRNE    ??migWORK_1
   \   00000020   E001               LDI     R16, 1
   \   00000022   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_421:
   \   00000024   B308               IN      R16, 0x18
   \   00000026   2B08               OR      R16, R24
   \   00000028   BB08               OUT     0x18, R16
   \   0000002A   ....               LDI     R30, LOW(??razct)
   \   0000002C   ....               LDI     R31, (??razct) >> 8
   \   0000002E   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_309:
   \   00000030   C006               RJMP    ??migWORK_0
    109            else if (sost!=0)  {sost=0; iniT2(200); RES(PORTB,port);}
   \                     ??migWORK_1:
   \   00000032   E000               LDI     R16, 0
   \   00000034   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_420:
   \   00000036   9580               COM     R24
   \   00000038   B308               IN      R16, 0x18
   \   0000003A   2308               AND     R16, R24
   \   0000003C   BB08               OUT     0x18, R16
    110                                        }
    111            if (razct>=raz) { T2out=1; port=255;}
   \                     ??migWORK_0:
   \   0000003E   9100....           LDS     R16, ??razct
   \   00000042   9110....           LDS     R17, ??raz
   \   00000046   1701               CP      R16, R17
   \   00000048   F020               BRCS    ??migWORK_2
   \   0000004A   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_266:
   \   0000004C   EF0F               LDI     R16, 255
   \   0000004E   9300....           STS     ??port, R16
    112          }
   \                     ??migWORK_2:
   \   00000052   ....               RJMP    ?Subroutine141
   \   00000054                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   9300....           STS     ??sost, R16
   \   00000004   EC08               LDI     R16, 200
   \   00000006                      REQUIRE ??Subroutine161_0
   \   00000006                      ;               // Fall through to label ??Subroutine161_0

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??sost:
   \   00000000                      DS8 1
    113          //uchar migSEL(void){ return(port);} //возвращает текущий мигающий порт
    114          //**************************************************************
    115          //**************************************************************
F:\Dulov\RemoteAMP\usart.c
      1          #include "usart.h"
      2          //#include <math.h>
      3          //#include <intrinsics.h>
      4          
      5          #include "init.h"
      6          
      7          //однобайтный буфер

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          volatile unsigned char usartRxBuf = 0;
   \                     usartRxBuf:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      9          volatile static bool usarton;
   \                     ??usarton:
   \   00000000                      DS8 1
     10          
     11          //инициализация usart`a

   \                                 In  segment CODE, align 2, keep-with-next
     12          void USART_Init()
   \                     USART_Init:
     13          {
     14            UBRRH = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   BD00               OUT     0x20, R16
     15            UBRRL = ((F_CPU/9600UL)-1)/16;//    26;//78; //скорость обмена 9600 бод
   \   00000004   E109               LDI     R16, 25
   \   00000006   B909               OUT     0x09, R16
     16            UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме, разр приема, разр передачи.
   \   00000008   E908               LDI     R16, 152
   \   0000000A   B90A               OUT     0x0A, R16
     17            UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разрядов
   \   0000000C   E806               LDI     R16, 134
   \   0000000E   BD00               OUT     0x20, R16
     18          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_UBRRH
   \   00000012                      REQUIRE _A_UBRRL
   \   00000012                      REQUIRE _A_UCSRB
     19          
     20          //отправка символа по usart`у

   \                                 In  segment CODE, align 2, keep-with-next
     21          void USART_SendChar(unsigned char sym)
   \                     USART_SendChar:
     22          {
     23            if (!usarton) return;
   \   00000000   9110....           LDS     R17, ??usarton
   \   00000004   2311               TST     R17
   \   00000006   F019               BREQ    ??USART_SendChar_0
     24            while(!(UCSRA & (1<<UDRE)));
   \                     ??USART_SendChar_1:
   \   00000008   9B5D               SBIS    0x0B, 0x05
   \   0000000A   CFFE               RJMP    ??USART_SendChar_1
     25            UDR = sym;
   \   0000000C   B90C               OUT     0x0C, R16
     26          }
   \                     ??USART_SendChar_0:
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_UCSRA
   \   00000010                      REQUIRE _A_UDR
     27          
     28          //чтение буфера

   \                                 In  segment CODE, align 2, keep-with-next
     29          __monitor unsigned char USART_GetChar(void)
   \                     USART_GetChar:
     30          {
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
     31            unsigned char tmp = usartRxBuf;
   \   00000004   9100....           LDS     R16, usartRxBuf
     32            usartRxBuf = 0;
   \   00000008   E010               LDI     R17, 0
   \   0000000A   9310....           STS     usartRxBuf, R17
     33            return tmp;  
   \   0000000E   BF2F               OUT     0x3F, R18
   \   00000010   9508               RET
     34          }
     35          
     36          //прием символа по usart`у в буфер
     37          #pragma vector=USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     38          __interrupt void usart_rxc_my(void) 
   \                     usart_rxc_my:
     39          {
   \   00000000   930A               ST      -Y, R16
     40            usartRxBuf = UDR; 
   \   00000002   B10C               IN      R16, 0x0C
   \   00000004   9300....           STS     usartRxBuf, R16
     41          } 
   \   00000008   ....               RJMP    ?Subroutine143
   \   0000000A                      REQUIRE _A_UDR
     42          
     43          // *** rprintfStr ***
     44          // prints a null-terminated string stored in RAM

   \                                 In  segment CODE, align 2, keep-with-next
     45          void rprintfStr(char str[])
   \                     rprintfStr:
     46          {        
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01D8               MOVW    R27:R26, R17:R16
     47              if (!usarton) return;
   \   00000004   9100....           LDS     R16, ??usarton
   \   00000008   2300               TST     R16
   \   0000000A   F041               BREQ    ??rprintfStr_0
     48          	// send a string stored in RAM
     49          	// check to make sure we have a good pointer
     50          	if (!str) return;
   \   0000000C   2F0A               MOV     R16, R26
   \   0000000E   2B01               OR      R16, R17
   \   00000010   F411               BRNE    ??rprintfStr_1
   \   00000012   C004               RJMP    ??rprintfStr_0
     51          
     52          	// print the string until a null-terminator
     53          	while (*str)
     54          		USART_SendChar(*str++);
   \                     ??rprintfStr_2:
   \   00000014   ....               RCALL   USART_SendChar
   \                     ??rprintfStr_1:
   \   00000016   910D               LD      R16, X+
   \   00000018   2300               TST     R16
   \   0000001A   F7E1               BRNE    ??rprintfStr_2
     55          }
   \                     ??rprintfStr_0:
   \   0000001C   E0E4               LDI     R30, 4
   \   0000001E   ....               RJMP    ?EPILOGUE_B4_L09
     56          
     57          // *** rprintfFloat ***Pascal Stang - Copyright (C) 2000-2002
     58          // floating-point print

   \                                 In  segment CODE, align 2, keep-with-next
     59          void rprintfFloat(char numDigits, double x)
   \                     rprintfFloat:
     60          {
   \   00000000   ....               RCALL   ?PROLOGUE12_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002   2EB0               MOV     R11, R16
   \   00000004   012A               MOVW    R5:R4, R21:R20
   \   00000006   013B               MOVW    R7:R6, R23:R22
     61              if (!usarton) return;
   \   00000008   9100....           LDS     R16, ??usarton
   \   0000000C   2300               TST     R16
   \   0000000E   F409               BRNE    $+2+2
   \   00000010   C04E               RJMP    ??rprintfFloat_0
     62          	unsigned char firstplace = 0;
   \   00000012   24AA               CLR     R10
     63          	unsigned char negative;
     64          	unsigned char i, digit;
     65          	double place = 1.0;
   \   00000014   E080               LDI     R24, 0
   \   00000016   E090               LDI     R25, 0
   \   00000018   E8A0               LDI     R26, 128
   \   0000001A   E3BF               LDI     R27, 63
     66          	
     67          	// save sign
     68          	negative = (x<0);
   \   0000001C   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_72:
   \   0000001E   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_179:
   \   00000020   ....               RCALL   ?F_CMP_LT_L04
   \   00000022   2488               CLR     R8
   \   00000024   F408               BRCC    ??rprintfFloat_1
   \   00000026   9483               INC     R8
     69          	// convert to absolute value
     70          	x = (x>0)?(x):(-x);
   \                     ??rprintfFloat_1:
   \   00000028   E041               LDI     R20, 1
   \   0000002A   ....               RCALL   ?F_CMP_GE_L04
   \   0000002C   F008               BRCS    ??rprintfFloat_2
   \   0000002E   267A               EOR     R7, R26
     71          	
     72          	// find starting digit place
     73          	for(i=0; i<15; i++)
   \                     ??rprintfFloat_2:
   \   00000030   E00F               LDI     R16, 15
   \   00000032   2E90               MOV     R9, R16
     74          	{
     75          		if((x/place) < 10.0)
   \                     ??rprintfFloat_3:
   \   00000034   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_69:
   \   00000036   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_73:
   \   00000038   ....               RCALL   ?F_CMP_LT_L04
   \   0000003A   F038               BRCS    ??rprintfFloat_4
     76          			break;
     77          		else
     78          			place *= 10.0;
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   019D               MOVW    R19:R18, R27:R26
   \   00000040   ....               RCALL   ?F_MUL_L04
   \   00000042   01C8               MOVW    R25:R24, R17:R16
   \   00000044   01D9               MOVW    R27:R26, R19:R18
     79          	}
   \   00000046   949A               DEC     R9
   \   00000048   F7A9               BRNE    ??rprintfFloat_3
     80          	// print polarity character
     81          	if(negative)
   \                     ??rprintfFloat_4:
   \   0000004A   FA80               BST     R8, 0
   \   0000004C   F416               BRTC    ??rprintfFloat_5
     82          		USART_SendChar('-');
   \   0000004E   E20D               LDI     R16, 45
   \   00000050   C001               RJMP    ??rprintfFloat_6
     83          	else
     84          		USART_SendChar('+');
   \                     ??rprintfFloat_5:
   \   00000052   E20B               LDI     R16, 43
   \                     ??rprintfFloat_6:
   \   00000054   ....               RCALL   USART_SendChar
     85          
     86          	// print digits
     87          	for(i=0; i<numDigits; i++)
   \   00000056   2499               CLR     R9
   \   00000058   C017               RJMP    ??rprintfFloat_7
     88          	{
     89          		digit = (unsigned char)(x/place);
     90          
     91          		if(digit | firstplace | (place == 1.0))
     92          		{
     93          			firstplace = 1;
     94          			USART_SendChar(digit+0x30);
     95          		}
     96          		else
     97          			USART_SendChar(' ');
   \                     ??rprintfFloat_8:
   \   0000005A   E200               LDI     R16, 32
   \                     ??rprintfFloat_9:
   \   0000005C   ....               RCALL   USART_SendChar
     98          		
     99          		if(place == 1.0)
   \   0000005E   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_58:
   \   00000060   F411               BRNE    ??rprintfFloat_10
    100          		{
    101          			USART_SendChar('.');
   \   00000062   E20E               LDI     R16, 46
   \   00000064   ....               RCALL   USART_SendChar
    102          		}
    103          		
    104          		x -= (digit*place);
   \                     ??rprintfFloat_10:
   \   00000066   2D08               MOV     R16, R8
   \   00000068   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_236:
   \   0000006A   01AC               MOVW    R21:R20, R25:R24
   \   0000006C   01BD               MOVW    R23:R22, R27:R26
   \   0000006E   ....               RCALL   ?F_MUL_L04
   \   00000070   ....               RCALL   ?Subroutine133
   \                     ??CrossCallReturnLabel_332:
   \   00000072   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_180:
   \   00000074   ....               RCALL   ?F_SUB_L04
   \   00000076   0128               MOVW    R5:R4, R17:R16
   \   00000078   0139               MOVW    R7:R6, R19:R18
    105          		place /= 10.0;
   \   0000007A   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_74:
   \   0000007C   018C               MOVW    R17:R16, R25:R24
   \   0000007E   019D               MOVW    R19:R18, R27:R26
   \   00000080   ....               RCALL   ?F_DIV_L04
   \   00000082   01C8               MOVW    R25:R24, R17:R16
   \   00000084   01D9               MOVW    R27:R26, R19:R18
   \   00000086   9493               INC     R9
   \                     ??rprintfFloat_7:
   \   00000088   149B               CP      R9, R11
   \   0000008A   F488               BRCC    ??rprintfFloat_0
   \   0000008C   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_70:
   \   0000008E   ....               RCALL   ?F2SL_L04
   \   00000090   2E80               MOV     R8, R16
   \   00000092   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_59:
   \   00000094   F411               BRNE    ??rprintfFloat_11
   \   00000096   E001               LDI     R16, 1
   \   00000098   C001               RJMP    ??rprintfFloat_12
   \                     ??rprintfFloat_11:
   \   0000009A   E000               LDI     R16, 0
   \                     ??rprintfFloat_12:
   \   0000009C   2D18               MOV     R17, R8
   \   0000009E   291A               OR      R17, R10
   \   000000A0   2B10               OR      R17, R16
   \   000000A2   F2D9               BREQ    ??rprintfFloat_8
   \   000000A4   24AA               CLR     R10
   \   000000A6   94A3               INC     R10
   \   000000A8   2D08               MOV     R16, R8
   \   000000AA   5D00               SUBI    R16, 208
   \   000000AC   CFD7               RJMP    ??rprintfFloat_9
    106          	}
    107          }
   \                     ??rprintfFloat_0:
   \   000000AE   E0EC               LDI     R30, 12
   \   000000B0   ....               RJMP    ?EPILOGUE_B12_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine60:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_197:
   \   00000002   E260               LDI     R22, 32
   \   00000004   E471               LDI     R23, 65
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   01AC               MOVW    R21:R20, R25:R24
   \   00000002   01BD               MOVW    R23:R22, R27:R26
   \   00000004   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_183:
   \   00000006   ....               RJMP    ?F_DIV_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_195:
   \   00000002   E860               LDI     R22, 128
   \   00000004   E37F               LDI     R23, 63
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   019D               MOVW    R19:R18, R27:R26
   \   0000000A   ....               RJMP    ?F_CMP_EQ_L04

   \                                 In  segment INTVEC, offset 0x2, root
   \                     `??funINT0_vect??INTVEC 2`:
   \   00000002   ....               RJMP    funINT0_vect

   \                                 In  segment INTVEC, offset 0x10, root
   \                     `??funTIMER1_OVF_vect??INTVEC 16`:
   \   00000010   ....               RJMP    funTIMER1_OVF_vect

   \                                 In  segment INTVEC, offset 0x16, root
   \                     `??usart_rxc_my??INTVEC 22`:
   \   00000016   ....               RJMP    usart_rxc_my

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " error ct big =">`:
   \   00000000   65207272726F       DC8 " error ct big ="
   \              632020746962
   \              2067003D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  /   cod1= ">>`:
   \   00000000   2020202F2020       DC8 "  /   cod1= "
   \              6F633164203D
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/   cod2= ">>`:
   \   00000000   202F20206F63       DC8 "/   cod2= "
   \              3264203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/   cod3= ">>`:
   \   00000000   202F20206F63       DC8 "/   cod3= "
   \              3364203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / abslen= ">>`:
   \   00000000   2020202F6261       DC8 "  / abslen= "
   \              6C736E65203D
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / len= ">>`:
   \   00000000   2020202F656C       DC8 "  / len= "
   \              3D6E0020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  ">>`:
   \   00000000   202000             DC8 "  "

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / cod1= ">>`:
   \   00000000   2020202F6F63       DC8 "  / cod1= "
   \              3164203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " / cod2= ">>`:
   \   00000000   2F206320646F       DC8 " / cod2= "
   \              3D320020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " / cod3= ">>`:
   \   00000000   2F206320646F       DC8 " / cod3= "
   \              3D330020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/ minlen=">>`:
   \   00000000   202F696D6C6E       DC8 "/ minlen="
   \              6E65003D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "OFF>adr=">>`:
   \   00000000   464F3E466461       DC8 "OFF>adr="
   \              3D7200      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ON>adr=">>`:
   \   00000000   4E4F613E7264       DC8 "ON>adr="
   \              003D        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "normal>no find co`:
   \   00000000   6F6E6D726C61       DC8 "normal>no find command "
   \              6E3E206F6966
   \              646E63206D6F
   \              616D646E0020

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "normal>command fi`:
   \   00000000   6F6E6D726C61       DC8 "normal>command find  adr= "
   \              633E6D6F616D
   \              646E66206E69
   \              206461207264
   \              203D00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "write ..">>`:
   \   00000000   727774692065       DC8 "write .."
   \              2E2E00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "OK !   ">>`:
   \   00000000   4B4F21202020       DC8 "OK !   "
   \              0020        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "- vkluchen kratki`:
   \   00000000   202D6B76756C       DC8 "- vkluchen kratkiy viviod -"
   \              68636E656B20
   \              61726B747969
   \              762076696F69
   \              2064002D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " ==  EEPROM read `:
   \   00000000   3D20203D4520       DC8 " ==  EEPROM read == "
   \              50454F52204D
   \              657264613D20
   \              203D00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " > ">>`:
   \   00000000   3E200020           DC8 " > "

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " get: ">>`:
   \   00000000   67207465203A       DC8 " get: "
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  no sourc`:
   \   00000000   202065726967       DC8 "  regim  no source5 >"
   \              206D6E20206F
   \              6F7372756563
   \              2035003E    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  PROGRAMM`:
   \   00000000   202065726967       DC8 "  regim  PROGRAMMING !!  READY >"
   \              206D50204F52
   \              52474D41494D
   \              474E21202021
   \              522041455944
   \              3E2000      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  normal  `:
   \   00000000   202065726967       DC8 "  regim  normal  READY >"
   \              206D6E20726F
   \              616D206C5220
   \              414559443E20
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for ind>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Calibr>`:
   \   00000000   157C0000           DD 5500

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for tON>`:
   \   00000000   4E20               DC16 20000

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for lastsel>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sel>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " error ct big =">`:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for <Constant " error ct big =">`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  /   cod1= ">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "  /   cod1= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/   cod2= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "/   cod2= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/   cod3= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "/   cod3= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / abslen= ">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "  / abslen= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / len= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "  / len= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  ">`:
   \   00000000                      DS8 3
   \   00000003                      REQUIRE `?<Initializer for <Constant "  ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / cod1= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "  / cod1= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " / cod2= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant " / cod2= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " / cod3= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant " / cod3= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/ minlen=">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "/ minlen=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "OFF>adr=">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "OFF>adr=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "ON>adr=">`:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for <Constant "ON>adr=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "normal>no find command ">`:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for <Constant "normal>no find co`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "normal>command find  ...">`:
   \   00000000                      DS8 27
   \   0000001B                      REQUIRE `?<Initializer for <Constant "normal>command fi`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "write ..">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "write ..">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "OK !   ">`:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for <Constant "OK !   ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "- vkluchen kratkiy vi...">`:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for <Constant "- vkluchen kratki`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " ==  EEPROM read == ">`:
   \   00000000                      DS8 21
   \   00000015                      REQUIRE `?<Initializer for <Constant " ==  EEPROM read `

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " > ">`:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for <Constant " > ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " get: ">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant " get: ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  no source5 >">`:
   \   00000000                      DS8 22
   \   00000016                      REQUIRE `?<Initializer for <Constant "  regim  no sourc`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  PROGRAMMING ...">`:
   \   00000000                      DS8 33
   \   00000021                      REQUIRE `?<Initializer for <Constant "  regim  PROGRAMM`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  normal  READY >">`:
   \   00000000                      DS8 25
   \   00000019                      REQUIRE `?<Initializer for <Constant "  regim  normal  `

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   ResetT1
      0      2   ResetT2
      0      2   USART_GetChar
      0      2   USART_Init
      0      2   USART_SendChar
      0      2   WorkT1
      4      4   WorkT2
      2      4   analizCOD
     10      4   coding
       10      2   -> USART_SendChar
       10      2   -> rprintfFloat
       10      2   -> rprintfStr
      2      4   diag
        2      2   -> USART_GetChar
        2      2   -> USART_SendChar
        2      2   -> rprintfFloat
        2      2   -> rprintfStr
      0      2   du_init
      8      4   du_main
        8      2   -> USART_SendChar
        8      2   -> coding
        8      2   -> du_init
        8      2   -> rprintfFloat
        8      2   -> rprintfStr
      2      2   funINT0_vect
      2      2   funTIMER1_OVF_vect
      0      2   getadr
      0      4   gro
      0      2   iniPORTS
      0      2   iniT1
        0      2   -> ResetT1
      0      2   iniT2
        0      2   -> ResetT2
      0      2   led_all
      0      2   led_test
        0      2   -> led_all
      1      4   main
        1      2   -> USART_Init
        1      2   -> analizCOD
        1      2   -> diag
        1      2   -> du_main
        1      2   -> getadr
        1      2   -> iniPORTS
        1      2   -> led_all
        1      2   -> led_test
        1      2   -> programming
        1      2   -> writeCOD
      0      4   main_logic
        0      2   -> USART_SendChar
        0      2   -> normal
        0      2   -> resOUT
        0      2   -> rprintfFloat
        0      2   -> rprintfStr
        0      2   -> source
      0      4   migINI
        0      2   -> iniT2
      1      4   migWORK
        1      2   -> WorkT2
        1      2   -> iniT2
      1      4   normal
        1      2   -> USART_SendChar
        1      2   -> WorkT1
        1      2   -> analizCOD
        1      2   -> gro
        1      2   -> iniT1
        1      2   -> migINI
        1      2   -> migWORK
        1      2   -> pult
        1      2   -> rprintfFloat
        1      2   -> rprintfStr
      1      2   programming
        1      2   -> getadr
        1      2   -> led_all
        1      2   -> writeCOD
      0      2   pult
        0      2   -> source
      0      2   resOUT
      0      2   resled
     12      4   rprintfFloat
       12      2   -> USART_SendChar
      4      2   rprintfStr
        4      2   -> USART_SendChar
      0      2   source
        0      2   -> migINI
        0      2   -> resOUT
        0      2   -> resled
      2      2   usart_rxc_my
      1      4   writeCOD
        1      2   -> USART_SendChar
        1      2   -> getadr
        1      2   -> led_all
        1      2   -> rprintfStr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant "  ">
      13  ?<Constant "  /   cod1= ">
      13  ?<Constant "  / abslen= ">
      11  ?<Constant "  / cod1= ">
      10  ?<Constant "  / len= ">
      33  ?<Constant "  regim  PROGRAMMING ...">
      22  ?<Constant "  regim  no source5 >">
      25  ?<Constant "  regim  normal  READY >">
      10  ?<Constant " / cod2= ">
      10  ?<Constant " / cod3= ">
      21  ?<Constant " ==  EEPROM read == ">
       4  ?<Constant " > ">
      16  ?<Constant " error ct big =">
       7  ?<Constant " get: ">
      28  ?<Constant "- vkluchen kratkiy vi...">
      11  ?<Constant "/   cod2= ">
      11  ?<Constant "/   cod3= ">
      10  ?<Constant "/ minlen=">
       9  ?<Constant "OFF>adr=">
       8  ?<Constant "OK !   ">
       8  ?<Constant "ON>adr=">
      27  ?<Constant "normal>command find  ...">
      24  ?<Constant "normal>no find command ">
       9  ?<Constant "write ..">
       3  ?<Initializer for <Constant "  ">>
      13  ?<Initializer for <Constant "  /   cod1= ">>
      13  ?<Initializer for <Constant "  / abslen= ">>
      11  ?<Initializer for <Constant "  / cod1= ">>
      10  ?<Initializer for <Constant "  / len= ">>
      33  ?<Initializer for <Constant "  regim  PROGRAMM
      22  ?<Initializer for <Constant "  regim  no sourc
      25  ?<Initializer for <Constant "  regim  normal
      10  ?<Initializer for <Constant " / cod2= ">>
      10  ?<Initializer for <Constant " / cod3= ">>
      21  ?<Initializer for <Constant " ==  EEPROM read
       4  ?<Initializer for <Constant " > ">>
      16  ?<Initializer for <Constant " error ct big =">
       7  ?<Initializer for <Constant " get: ">>
      28  ?<Initializer for <Constant "- vkluchen kratki
      11  ?<Initializer for <Constant "/   cod2= ">>
      11  ?<Initializer for <Constant "/   cod3= ">>
      10  ?<Initializer for <Constant "/ minlen=">>
       9  ?<Initializer for <Constant "OFF>adr=">>
       8  ?<Initializer for <Constant "OK !   ">>
       8  ?<Initializer for <Constant "ON>adr=">>
      27  ?<Initializer for <Constant "normal>command fi
      24  ?<Initializer for <Constant "normal>no find co
       9  ?<Initializer for <Constant "write ..">>
       4  ?<Initializer for Calibr>
       1  ?<Initializer for ind>
       1  ?<Initializer for lastsel>
       1  ?<Initializer for sel>
       2  ?<Initializer for tON>
       4  ??Subroutine147_0
       6  ??Subroutine148_0
       2  ??Subroutine149_0
       6  ??Subroutine150_0
       2  ??Subroutine151_0
       2  ??Subroutine152_0
       4  ??Subroutine153_0
       6  ??Subroutine154_0
       4  ??Subroutine155_0
      18  ??Subroutine156_0
       6  ??Subroutine157_0
       6  ??Subroutine158_0
       2  ??Subroutine159_0
       8  ??Subroutine160_0
       8  ??Subroutine161_0
       2  ??funINT0_vect??INTVEC 2
       2  ??funTIMER1_OVF_vect??INTVEC 16
       2  ??usart_rxc_my??INTVEC 22
      12  ?Subroutine0
      16  ?Subroutine1
      20  ?Subroutine10
       4  ?Subroutine100
       6  ?Subroutine101
       6  ?Subroutine102
       8  ?Subroutine103
       8  ?Subroutine104
      12  ?Subroutine106
       2  ?Subroutine107
       6  ?Subroutine109
      18  ?Subroutine11
      10  ?Subroutine110
       6  ?Subroutine111
       6  ?Subroutine112
       6  ?Subroutine113
       6  ?Subroutine114
       2  ?Subroutine115
       6  ?Subroutine116
       6  ?Subroutine117
       6  ?Subroutine118
       6  ?Subroutine119
       2  ?Subroutine12
       6  ?Subroutine121
      10  ?Subroutine122
      20  ?Subroutine123
      22  ?Subroutine124
      16  ?Subroutine125
       6  ?Subroutine126
       8  ?Subroutine127
       4  ?Subroutine128
       6  ?Subroutine129
       2  ?Subroutine13
      20  ?Subroutine130
       4  ?Subroutine131
       4  ?Subroutine132
       6  ?Subroutine133
       6  ?Subroutine134
       6  ?Subroutine135
       6  ?Subroutine136
       6  ?Subroutine137
       4  ?Subroutine138
       4  ?Subroutine139
       8  ?Subroutine14
       4  ?Subroutine140
       4  ?Subroutine141
       4  ?Subroutine142
       4  ?Subroutine143
       4  ?Subroutine144
       4  ?Subroutine145
       4  ?Subroutine146
       8  ?Subroutine15
      12  ?Subroutine17
       6  ?Subroutine18
      22  ?Subroutine19
      16  ?Subroutine2
      10  ?Subroutine20
       4  ?Subroutine21
       6  ?Subroutine22
       2  ?Subroutine23
       8  ?Subroutine24
       8  ?Subroutine25
      10  ?Subroutine26
      10  ?Subroutine27
      10  ?Subroutine28
      10  ?Subroutine29
      14  ?Subroutine3
       2  ?Subroutine30
       8  ?Subroutine31
       6  ?Subroutine33
       8  ?Subroutine34
       4  ?Subroutine35
       6  ?Subroutine36
       8  ?Subroutine38
      10  ?Subroutine4
       2  ?Subroutine40
       6  ?Subroutine41
       4  ?Subroutine44
       2  ?Subroutine45
       4  ?Subroutine46
       2  ?Subroutine47
       4  ?Subroutine48
       2  ?Subroutine49
       6  ?Subroutine5
       6  ?Subroutine50
       6  ?Subroutine51
       2  ?Subroutine52
       6  ?Subroutine53
      12  ?Subroutine54
       8  ?Subroutine55
       6  ?Subroutine56
       6  ?Subroutine57
       8  ?Subroutine58
       8  ?Subroutine59
       4  ?Subroutine6
       8  ?Subroutine60
       4  ?Subroutine62
       4  ?Subroutine63
       4  ?Subroutine64
      20  ?Subroutine65
      20  ?Subroutine66
      20  ?Subroutine67
       4  ?Subroutine68
       2  ?Subroutine69
       2  ?Subroutine7
       4  ?Subroutine72
       6  ?Subroutine73
       6  ?Subroutine74
       4  ?Subroutine75
       8  ?Subroutine76
       8  ?Subroutine77
       6  ?Subroutine78
       6  ?Subroutine79
       4  ?Subroutine8
       4  ?Subroutine80
      20  ?Subroutine81
      12  ?Subroutine82
      20  ?Subroutine83
       4  ?Subroutine84
       6  ?Subroutine87
       6  ?Subroutine89
       4  ?Subroutine9
       2  ?Subroutine90
       6  ?Subroutine91
       6  ?Subroutine92
      10  ?Subroutine93
      10  ?Subroutine94
      10  ?Subroutine95
       6  ?Subroutine96
       2  ?Subroutine97
       6  ?Subroutine98
       6  ?Subroutine99
       4  Calibr
      20  ResetT1
      14  ResetT2
       4  T1
       4  T1max
       1  T1out
       2  T1x
       4  T2
       4  T2max
       1  T2out
       2  T2x
       4  T3
       4  T3max
       1  T3out
       2  T3x
      18  USART_GetChar
      18  USART_Init
      16  USART_SendChar
      64  WorkT1
      82  WorkT2
       1  _A_ACSR
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_GICR
       2  _A_ICR1
       1  _A_MCUCR
       2  _A_OCR1A
       2  _A_OCR1B
       1  _A_PIND
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TCNT0
       2  _A_TCNT1
       1  _A_TIFR
       1  _A_TIMSK
       1  _A_UBRRH
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UDR
      74  analizCOD
       1  aoff
       1  big
       1  c1
       1  c2
       1  c3
       2  cod1
       2  cod2
       2  cod3
       2  cod4
       1  cod_ok
     512  coding
       1  ct
     118  diag
     100  dim1
     100  dim2
      24  du_init
     368  du_main
       1  fmode
      46  funINT0_vect
       8  funTIMER1_OVF_vect
       1  get
     214  getadr
      90  gro
       1  gro1
       1  gro2
       1  ind
       1  ini
      92  iniPORTS
       8  iniT1
       8  iniT2
       1  intok
     240  k
       1  lastsel
      30  led_all
       6  led_test
     200  len
     264  main
     186  main_logic
      58  migINI
      84  migWORK
       2  minimallen
       1  mode
       1  modegro
       1  mute
     724  normal
       1  on
       1  onok
       1  perepoln
       1  port
       1  pr
      80  programming
      14  pult
       1  pultadr
       1  raz
       1  razct
       1  regaoff
      14  resOUT
      10  resled
       1  rez
     178  rprintfFloat
      32  rprintfStr
       1  sel
       1  sost
      78  source
       1  state
       1  state2
       1  t1
       1  t2
       2  tON
       1  tekfunc
       1  til
       2  timerzad
       1  u
       1  usartRxBuf
      10  usart_rxc_my
       1  usarton
       1  write
      78  writeCOD
       1  zader
      12  -- Other

 
    28 bytes in segment ABSOLUTE
 4 698 bytes in segment CODE
   242 bytes in segment EEPROM_N
    12 bytes in segment INITTAB
     6 bytes in segment INTVEC
   352 bytes in segment NEAR_I
   352 bytes in segment NEAR_ID
   481 bytes in segment NEAR_Z
 
 5 050 bytes of CODE  memory (+ 18 bytes shared)
   833 bytes of DATA  memory (+ 28 bytes shared)
   242 bytes of XDATA memory

Errors: none
Warnings: none
