###############################################################################
#
# IAR C/C++ Compiler V6.40.1.741 for Atmel AVR            31/Mar/2017  19:45:23
# Copyright 1996-2014 IAR Systems AB.
#
#    Source file  =  F:\Dulov\RemoteAMP\main.cpp
#    Command line =  
#        F:\Dulov\RemoteAMP\main.cpp --cpu=m8 -ms -o
#        F:\Dulov\RemoteAMP\Release\Obj\ -D NDEBUG -lC
#        F:\Dulov\RemoteAMP\Release\List\ -lA F:\Dulov\RemoteAMP\Release\List\
#        --initializers_in_flash --no_clustering -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 512 --dlib --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 6.5\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h"
#        --ec++ -Ohz --mfc F:\Dulov\RemoteAMP\usart.c
#    List file    =  F:\Dulov\RemoteAMP\Release\List\main.lst
#    Object file  =  F:\Dulov\RemoteAMP\Release\Obj\main.r90
#
###############################################################################

F:\Dulov\RemoteAMP\main.cpp
      1          //***************************************************************************
      2          //  
      3          //  Author(s)...: dav COBRA 
      4          //  Target(s)...: ATMega8
      5          //  Compiler....: 6 40
      6          //  ТЕСТ1
      7          //  Description.: Система  управления  для  Усилителя  Мощности   V-ниже
      8          //  v1.1 - добавлена поддержка включения усилителя тыловых колонок вместо Source5
      9          //       - изменена установка auto off
     10          //  v1.2 - теперь во время мигания(только Source) светодиодов  команды пульта обрабатываются
     11          //       - новая команда пульта - возврат в предыдущий source
     12          //       - команды пульта можно продублировать на втором пульте, т.е. на каждую функцию 2 кнопки пульта
     13          //       - вместо импульсов громкости можно формировать постоянный сигнал
     14          //       - подправлены задержки
     15          //       - обновлен алгоритм кодирования
     16          // v1.22 - исправлена ошибка задержки вкл AC
     17          // v1.23 - исправлен при включении включается SOURCE1 
     18          // v1.24 - исправлен баг AUTOOFF на 30 минут 
     19          // v1.25 - исправлен баг AUTOOFF при выключениии питания 
     20          // v1.26 - выход на громкость пока держим кнопку
     21          //
     22          //  Data........: 04 2016
     23          //
     24          //   - ВЫКЛЮЧИТЬ ОПЦИЮ clustering of variables В optimization compilator !!!!
     25          //***************************************************************************
     26          #include <stdbool.h>//поддержка bool
     27          #include <iom8.h>//<ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_ACSR
   \                     _A_ACSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x48
   \   union <unnamed> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x58
   \   union <unnamed> volatile __io _A_TIFR
   \                     _A_TIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_GICR
   \                     _A_GICR:
   \   00000000                      DS8 1
     28          //#include <inavr.h>  
     29          #include <intrinsics.h>
     30          #include "init.h"
     31          #include "du.h"  

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char perepoln
   \                     perepoln:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char t1
   \                     t1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned char t2
   \                     t2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static bool ini
   \                     ??ini:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int dim1[50]
   \                     dim1:
   \   00000000                      DS8 100

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int dim2[50]
   \                     dim2:
   \   00000000                      DS8 100

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char ct
   \                     ct:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int minimallen
   \                     minimallen:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   float len[50]
   \                     len:
   \   00000000                      DS8 200

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static bool intok
   \                     ??intok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static bool big
   \                     ??big:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char cod_ok
   \                     cod_ok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static float sst
   \                     ??sst:
   \   00000000                      DS8 4

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void du_init()
   \                     ??du_init:
   \   00000000   E001               LDI     R16, 1
   \   00000002   9300....           STS     ??ini, R16
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     ??intok, R16
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   BD0E               OUT     0x2E, R16
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     ct, R16
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_TCCR1B

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 __interrupt void funINT0_vect()
   \                     ??funINT0_vect:
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     ??intok, R16
   \   0000000C   B50C               IN      R16, 0x2C
   \   0000000E   9300....           STS     t1, R16
   \   00000012   B50D               IN      R16, 0x2D
   \   00000014   9300....           STS     t2, R16
   \   00000018   9100....           LDS     R16, t1
   \   0000001C   2300               TST     R16
   \   0000001E   F019               BREQ    ??funINT0_vect_1
   \   00000020   E000               LDI     R16, 0
   \   00000022   BD0D               OUT     0x2D, R16
   \   00000024   BD0C               OUT     0x2C, R16
   \                     ??funINT0_vect_1:
   \   00000026   BF1F               OUT     0x3F, R17
   \   00000028   9109               LD      R16, Y+
   \   0000002A   9119               LD      R17, Y+
   \   0000002C   9518               RETI
   \   0000002E                      REQUIRE _A_TCNT1

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 char du_main(unsigned char)
   \                     ??du_main:
   \   00000000   ....               RCALL   ?PROLOGUE16_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002                      REQUIRE ?Register_R12_is_cg_reg
   \   00000002                      REQUIRE ?Register_R13_is_cg_reg
   \   00000002                      REQUIRE ?Register_R14_is_cg_reg
   \   00000002                      REQUIRE ?Register_R15_is_cg_reg
   \   00000002   2EF0               MOV     R15, R16
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     cod_ok, R16
   \   0000000A   9100....           LDS     R16, ??ini
   \   0000000E   2300               TST     R16
   \   00000010   F409               BRNE    ??du_main_1
   \   00000012   ....               RCALL   ??du_init
   \                     ??du_main_1:
   \   00000014   9100....           LDS     R16, ??intok
   \   00000018   2300               TST     R16
   \   0000001A   F0A9               BREQ    ??du_main_2
   \   0000001C   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_27:
   \   0000001E   E012               LDI     R17, 2
   \   00000020   9F01               MUL     R16, R17
   \   00000022   9100....           LDS     R16, t1
   \   00000026   E010               LDI     R17, 0
   \   00000028   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_37:
   \   0000002A   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_355:
   \   0000002C   9100....           LDS     R16, t2
   \   00000030   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_40:
   \   00000032   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_356:
   \   00000034   ....               LDI     R30, LOW(ct)
   \   00000036   ....               LDI     R31, (ct) >> 8
   \   00000038   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_49:
   \   0000003A   3301               CPI     R16, 49
   \   0000003C   F010               BRCS    ??du_main_3
   \   0000003E   950A               DEC     R16
   \   00000040   8300               ST      Z, R16
   \                     ??du_main_3:
   \   00000042   9310....           STS     ??intok, R17
   \                     ??du_main_2:
   \   00000046   9100....           LDS     R16, perepoln
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    $+2+2
   \   0000004E   C167               RJMP    ??CrossCallReturnLabel_23
   \   00000050   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_7:
   \   00000052   24EE               CLR     R14
   \   00000054   94E3               INC     R14
   \   00000056   E0B0               LDI     R27, 0
   \   00000058   E0A0               LDI     R26, 0
   \   0000005A   E090               LDI     R25, 0
   \   0000005C   ....               LDI     R30, LOW(??sst)
   \   0000005E   ....               LDI     R31, (??sst) >> 8
   \   00000060   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_33:
   \   00000062   EF0F               LDI     R16, 255
   \   00000064   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_193:
   \   00000066   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_182:
   \   00000068   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_28:
   \   0000006A   3302               CPI     R16, 50
   \   0000006C   F028               BRCS    ??CrossCallReturnLabel_341
   \   0000006E   ....               LDI     R16, LOW(`?<Constant " error ct big =">`)
   \   00000070   ....               LDI     R17, (`?<Constant " error ct big =">`) >> 8
   \   00000072   ....               RCALL   ??rprintfStr
   \   00000074   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_29:
   \   00000076   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_341:
   \   00000078   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_30:
   \   0000007A   3006               CPI     R16, 6
   \   0000007C   F020               BRCS    ??du_main_4
   \   0000007E   9100....           LDS     R16, ??big
   \   00000082   2300               TST     R16
   \   00000084   F029               BREQ    ??du_main_5
   \                     ??du_main_4:
   \   00000086   9100....           LDS     R16, ??big
   \   0000008A   2300               TST     R16
   \   0000008C   F409               BRNE    $+2+2
   \   0000008E   C117               RJMP    ??du_main_6
   \                     ??du_main_5:
   \   00000090   E081               LDI     R24, 1
   \   00000092   C01D               RJMP    ??du_main_7
   \                     ??du_main_8:
   \   00000094   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_67:
   \   00000096   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_38:
   \   00000098   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_321:
   \   0000009A   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_41:
   \   0000009C   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_334:
   \   0000009E   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_78:
   \   000000A0   E004               LDI     R16, 4
   \   000000A2   9F80               MUL     R24, R16
   \   000000A4   01F0               MOVW    R31:R30, R1:R0
   \   000000A6   ....               SUBI    R30, LOW((-(len) & 0xFFFF))
   \   000000A8   ....               SBCI    R31, (-(len) & 0xFFFF) >> 8
   \   000000AA   8240               ST      Z, R4
   \   000000AC   8311               STD     Z+1, R17
   \   000000AE   8322               STD     Z+2, R18
   \   000000B0   8333               STD     Z+3, R19
   \   000000B2   E041               LDI     R20, 1
   \   000000B4   E050               LDI     R21, 0
   \   000000B6   E661               LDI     R22, 97
   \   000000B8   E474               LDI     R23, 68
   \   000000BA   2D04               MOV     R16, R4
   \   000000BC   ....               RCALL   ?F_CMP_GE_L04
   \   000000BE   F430               BRCC    ??CrossCallReturnLabel_357
   \   000000C0   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_225:
   \   000000C2   ....               RCALL   ?F_CMP_LT_L04
   \   000000C4   F418               BRCC    ??CrossCallReturnLabel_357
   \   000000C6   ....               RCALL   ?F2SL_L04
   \   000000C8   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_194:
   \   000000CA   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_357:
   \   000000CC   9583               INC     R24
   \                     ??du_main_7:
   \   000000CE   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_31:
   \   000000D0   1780               CP      R24, R16
   \   000000D2   F300               BRCS    ??du_main_8
   \   000000D4   E081               LDI     R24, 1
   \   000000D6   C03C               RJMP    ??du_main_9
   \                     ??du_main_10:
   \   000000D8   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_75:
   \   000000DA   F430               BRCC    ??du_main_11
   \   000000DC   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_84:
   \   000000DE   F420               BRCC    ??du_main_11
   \   000000E0   95B3               INC     R27
   \   000000E2   31B0               CPI     R27, 16
   \   000000E4   F408               BRCC    ??du_main_11
   \   000000E6   95B3               INC     R27
   \                     ??du_main_11:
   \   000000E8   31B0               CPI     R27, 16
   \   000000EA   F010               BRCS    ??du_main_12
   \   000000EC   E002               LDI     R16, 2
   \                     ??du_main_13:
   \   000000EE   2EE0               MOV     R14, R16
   \                     ??du_main_12:
   \   000000F0   E001               LDI     R16, 1
   \   000000F2   9300....           STS     cod_ok, R16
   \   000000F6   20FF               TST     R15
   \   000000F8   F539               BRNE    ??CrossCallReturnLabel_21
   \   000000FA   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_411:
   \   000000FC   E002               LDI     R16, 2
   \   000000FE   ....               RCALL   ??rprintfFloat
   \   00000100   ....               LDI     R16, LOW(`?<Constant "  / abslen= ">`)
   \   00000102   ....               LDI     R17, (`?<Constant "  / abslen= ">`) >> 8
   \   00000104   ....               RCALL   ??rprintfStr
   \   00000106   01F5               MOVW    R31:R30, R11:R10
   \   00000108   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_335:
   \   0000010A   ....               RCALL   ??Subroutine147_0
   \                     ??CrossCallReturnLabel_406:
   \   0000010C   E009               LDI     R16, 9
   \   0000010E   ....               RCALL   ??rprintfFloat
   \   00000110   ....               LDI     R16, LOW(`?<Constant "  / len= ">`)
   \   00000112   ....               LDI     R17, (`?<Constant "  / len= ">`) >> 8
   \   00000114   ....               RCALL   ??rprintfStr
   \   00000116   01F4               MOVW    R31:R30, R9:R8
   \   00000118   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_229:
   \   0000011A   E004               LDI     R16, 4
   \   0000011C   ....               RCALL   ??rprintfFloat
   \   0000011E   ....               LDI     R16, LOW(`?<Constant "  ">`)
   \   00000120   ....               LDI     R17, (`?<Constant "  ">`) >> 8
   \   00000122   ....               RCALL   ??rprintfStr
   \   00000124   ....               LDI     R16, LOW(`?<Constant "  / cod1= ">`)
   \   00000126   ....               LDI     R17, (`?<Constant "  / cod1= ">`) >> 8
   \   00000128   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_346:
   \   0000012A   ....               LDI     R16, LOW(`?<Constant " / cod2= ">`)
   \   0000012C   ....               LDI     R17, (`?<Constant " / cod2= ">`) >> 8
   \   0000012E   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_399:
   \   00000130   ....               RCALL   ??Subroutine138_0
   \                     ??CrossCallReturnLabel_344:
   \   00000132   ....               LDI     R16, LOW(`?<Constant " / cod3= ">`)
   \   00000134   ....               LDI     R17, (`?<Constant " / cod3= ">`) >> 8
   \   00000136   ....               RCALL   ??rprintfStr
   \   00000138   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_197:
   \   0000013A   ....               RCALL   ??Subroutine138_0
   \                     ??CrossCallReturnLabel_343:
   \   0000013C   ....               LDI     R16, LOW(`?<Constant "/ minlen=">`)
   \   0000013E   ....               LDI     R17, (`?<Constant "/ minlen=">`) >> 8
   \   00000140   ....               RCALL   ??rprintfStr
   \   00000142   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_195:
   \   00000144   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_322:
   \   00000146   ....               RCALL   ??Subroutine17_0
   \                     ??CrossCallReturnLabel_21:
   \   00000148   E000               LDI     R16, 0
   \   0000014A   9300....           STS     perepoln, R16
   \                     ??du_main_14:
   \   0000014E   9583               INC     R24
   \                     ??du_main_9:
   \   00000150   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_32:
   \   00000152   1780               CP      R24, R16
   \   00000154   F008               BRCS    $+2+2
   \   00000156   C0B3               RJMP    ??du_main_6
   \   00000158   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_68:
   \   0000015A   ....               LDI     R16, LOW(dim2)
   \   0000015C   2EC0               MOV     R12, R16
   \   0000015E   ....               LDI     R16, (dim2) >> 8
   \   00000160   0CC0               ADD     R12, R0
   \   00000162   1D01               ADC     R16, R1
   \   00000164   2ED0               MOV     R13, R16
   \   00000166   ....               LDI     R16, LOW(dim1)
   \   00000168   2EA0               MOV     R10, R16
   \   0000016A   ....               LDI     R16, (dim1) >> 8
   \   0000016C   0CA0               ADD     R10, R0
   \   0000016E   1D01               ADC     R16, R1
   \   00000170   2EB0               MOV     R11, R16
   \   00000172   2DEA               MOV     R30, R10
   \   00000174   2FF0               MOV     R31, R16
   \   00000176   ....               RCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_336:
   \   00000178   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_79:
   \   0000017A   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_226:
   \   0000017C   ....               RCALL   ?F_DIV_L04
   \   0000017E   E044               LDI     R20, 4
   \   00000180   9F84               MUL     R24, R20
   \   00000182   ....               LDI     R20, LOW(len)
   \   00000184   2E84               MOV     R8, R20
   \   00000186   ....               LDI     R20, (len) >> 8
   \   00000188   0C80               ADD     R8, R0
   \   0000018A   1D41               ADC     R20, R1
   \   0000018C   2E94               MOV     R9, R20
   \   0000018E   2DE8               MOV     R30, R8
   \   00000190   2FF4               MOV     R31, R20
   \   00000192   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_347:
   \   00000194   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_97:
   \   00000196   ....               RCALL   ?F_CMP_EQ_L04
   \   00000198   F2D1               BREQ    ??du_main_14
   \   0000019A   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_80:
   \   0000019C   3082               CPI     R24, 2
   \   0000019E   F2A0               BRCS    ??CrossCallReturnLabel_21
   \   000001A0   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_69:
   \   000001A2   E003               LDI     R16, 3
   \   000001A4   16E0               CP      R14, R16
   \   000001A6   F5A1               BRNE    ??du_main_15
   \   000001A8   2F49               MOV     R20, R25
   \   000001AA   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   000001AC   F498               BRCC    ??du_main_16
   \   000001AE   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_52:
   \   000001B0   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_264:
   \   000001B2   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_91:
   \   000001B4   F410               BRCC    ??du_main_17
   \   000001B6   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_111:
   \   000001B8   F048               BRCS    ??du_main_18
   \                     ??du_main_17:
   \   000001BA   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_114:
   \   000001BC   F490               BRCC    ??du_main_19
   \   000001BE   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_94:
   \   000001C0   F480               BRCC    ??du_main_19
   \   000001C2   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_198:
   \   000001C4   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_369:
   \   000001C6   5F9E               SUBI    R25, 254
   \   000001C8   309F               CPI     R25, 15
   \   000001CA   F498               BRCC    ??du_main_20
   \                     ??du_main_18:
   \   000001CC   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_53:
   \   000001CE   2F49               MOV     R20, R25
   \   000001D0   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_267:
   \   000001D2   C005               RJMP    ??CrossCallReturnLabel_358
   \                     ??du_main_16:
   \   000001D4   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_103:
   \   000001D6   F768               BRCC    ??CrossCallReturnLabel_264
   \   000001D8   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_199:
   \   000001DA   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_216:
   \   000001DC   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_358:
   \   000001DE   5F9E               SUBI    R25, 254
   \   000001E0   C008               RJMP    ??du_main_20
   \                     ??du_main_19:
   \   000001E2   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_76:
   \   000001E4   F430               BRCC    ??du_main_20
   \   000001E6   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_85:
   \   000001E8   F420               BRCC    ??du_main_20
   \   000001EA   9593               INC     R25
   \   000001EC   3190               CPI     R25, 16
   \   000001EE   F408               BRCC    ??du_main_20
   \   000001F0   9593               INC     R25
   \                     ??du_main_20:
   \   000001F2   3190               CPI     R25, 16
   \   000001F4   F408               BRCC    $+2+2
   \   000001F6   CF7C               RJMP    ??du_main_12
   \   000001F8   24EE               CLR     R14
   \   000001FA   94E3               INC     R14
   \   000001FC   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_208:
   \   000001FE   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_47:
   \   00000200   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_359:
   \   00000202   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_401:
   \   00000204   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_48:
   \   00000206   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_360:
   \   00000208   E0B0               LDI     R27, 0
   \   0000020A   E0A0               LDI     R26, 0
   \   0000020C   E090               LDI     R25, 0
   \   0000020E   C033               RJMP    ??du_main_21
   \                     ??du_main_15:
   \   00000210   E002               LDI     R16, 2
   \   00000212   16E0               CP      R14, R16
   \   00000214   F561               BRNE    ??du_main_22
   \   00000216   2F4A               MOV     R20, R26
   \   00000218   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_3:
   \   0000021A   F4A0               BRCC    ??du_main_23
   \   0000021C   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_55:
   \   0000021E   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_265:
   \   00000220   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_92:
   \   00000222   F410               BRCC    ??du_main_24
   \   00000224   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_112:
   \   00000226   F048               BRCS    ??du_main_25
   \                     ??du_main_24:
   \   00000228   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_115:
   \   0000022A   F4A0               BRCC    ??du_main_26
   \   0000022C   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_95:
   \   0000022E   F490               BRCC    ??du_main_26
   \   00000230   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_402:
   \   00000232   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_370:
   \   00000234   5FAE               SUBI    R26, 254
   \   00000236   30AF               CPI     R26, 15
   \   00000238   F4A8               BRCC    ??du_main_27
   \                     ??du_main_25:
   \   0000023A   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_56:
   \   0000023C   2F4A               MOV     R20, R26
   \   0000023E   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_268:
   \   00000240   5FAE               SUBI    R26, 254
   \   00000242   C010               RJMP    ??du_main_27
   \                     ??du_main_23:
   \   00000244   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_104:
   \   00000246   F760               BRCC    ??CrossCallReturnLabel_265
   \   00000248   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_403:
   \   0000024A   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_217:
   \   0000024C   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_361:
   \   0000024E   5FAE               SUBI    R26, 254
   \   00000250   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_109:
   \   00000252   C008               RJMP    ??du_main_27
   \                     ??du_main_26:
   \   00000254   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_77:
   \   00000256   F430               BRCC    ??du_main_27
   \   00000258   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_86:
   \   0000025A   F420               BRCC    ??du_main_27
   \   0000025C   95A3               INC     R26
   \   0000025E   31A0               CPI     R26, 16
   \   00000260   F408               BRCC    ??du_main_27
   \   00000262   95A3               INC     R26
   \                     ??du_main_27:
   \   00000264   31A0               CPI     R26, 16
   \   00000266   F408               BRCC    $+2+2
   \   00000268   CF43               RJMP    ??du_main_12
   \   0000026A   E003               LDI     R16, 3
   \   0000026C   CF40               RJMP    ??du_main_13
   \                     ??du_main_22:
   \   0000026E   E001               LDI     R16, 1
   \   00000270   16E0               CP      R14, R16
   \   00000272   F009               BREQ    $+2+2
   \   00000274   CF3D               RJMP    ??du_main_12
   \                     ??du_main_21:
   \   00000276   2F4B               MOV     R20, R27
   \   00000278   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_174:
   \   0000027A   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_203:
   \   0000027C   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_87:
   \   0000027E   F4B8               BRCC    ??du_main_28
   \   00000280   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_206:
   \   00000282   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_266:
   \   00000284   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_93:
   \   00000286   F410               BRCC    ??du_main_29
   \   00000288   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_113:
   \   0000028A   F060               BRCS    ??du_main_30
   \                     ??du_main_29:
   \   0000028C   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_116:
   \   0000028E   F008               BRCS    $+2+2
   \   00000290   CF23               RJMP    ??du_main_10
   \   00000292   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_96:
   \   00000294   F008               BRCS    $+2+2
   \   00000296   CF20               RJMP    ??du_main_10
   \   00000298   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_209:
   \   0000029A   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_371:
   \   0000029C   5FBE               SUBI    R27, 254
   \   0000029E   30BF               CPI     R27, 15
   \   000002A0   F008               BRCS    $+2+2
   \   000002A2   CF22               RJMP    ??du_main_11
   \                     ??du_main_30:
   \   000002A4   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_207:
   \   000002A6   2F4B               MOV     R20, R27
   \   000002A8   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_269:
   \   000002AA   5FBE               SUBI    R27, 254
   \   000002AC   CF1D               RJMP    ??du_main_11
   \                     ??du_main_28:
   \   000002AE   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_105:
   \   000002B0   F748               BRCC    ??CrossCallReturnLabel_266
   \   000002B2   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_210:
   \   000002B4   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_218:
   \   000002B6   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_362:
   \   000002B8   5FBE               SUBI    R27, 254
   \   000002BA   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_110:
   \   000002BC   CF15               RJMP    ??du_main_11
   \                     ??du_main_6:
   \   000002BE   E080               LDI     R24, 0
   \   000002C0   E044               LDI     R20, 4
   \                     ??du_main_31:
   \   000002C2   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_70:
   \   000002C4   E000               LDI     R16, 0
   \   000002C6   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_39:
   \   000002C8   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_183:
   \   000002CA   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_42:
   \   000002CC   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_184:
   \   000002CE   9F84               MUL     R24, R20
   \   000002D0   01F0               MOVW    R31:R30, R1:R0
   \   000002D2   ....               SUBI    R30, LOW((-(len) & 0xFFFF))
   \   000002D4   ....               SBCI    R31, (-(len) & 0xFFFF) >> 8
   \   000002D6   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_34:
   \   000002D8   9583               INC     R24
   \   000002DA   3382               CPI     R24, 50
   \   000002DC   F390               BRCS    ??du_main_31
   \   000002DE   9300....           STS     perepoln, R16
   \   000002E2   9300....           STS     t1, R16
   \   000002E6   9300....           STS     t2, R16
   \   000002EA   9300....           STS     ct, R16
   \   000002EE   9300....           STS     ??big, R16
   \   000002F2   E001               LDI     R16, 1
   \   000002F4   16F0               CP      R15, R16
   \   000002F6   F499               BRNE    ??CrossCallReturnLabel_23
   \   000002F8   9100....           LDS     R16, cod_ok
   \   000002FC   2300               TST     R16
   \   000002FE   F079               BREQ    ??CrossCallReturnLabel_23
   \   00000300   ....               LDI     R16, LOW(`?<Constant "  /   cod1= ">`)
   \   00000302   ....               LDI     R17, (`?<Constant "  /   cod1= ">`) >> 8
   \   00000304   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_345:
   \   00000306   ....               LDI     R16, LOW(`?<Constant "/   cod2= ">`)
   \   00000308   ....               LDI     R17, (`?<Constant "/   cod2= ">`) >> 8
   \   0000030A   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_400:
   \   0000030C   ....               RCALL   ??Subroutine138_0
   \                     ??CrossCallReturnLabel_342:
   \   0000030E   ....               LDI     R16, LOW(`?<Constant "/   cod3= ">`)
   \   00000310   ....               LDI     R17, (`?<Constant "/   cod3= ">`) >> 8
   \   00000312   ....               RCALL   ??rprintfStr
   \   00000314   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_329:
   \   00000316   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_337:
   \   00000318   ....               RCALL   ??Subroutine147_0
   \                     ??CrossCallReturnLabel_407:
   \   0000031A   E006               LDI     R16, 6
   \   0000031C   ....               RCALL   ??Subroutine17_1
   \                     ??CrossCallReturnLabel_23:
   \   0000031E   9100....           LDS     R16, cod_ok
   \   00000322   E1E0               LDI     R30, 16
   \   00000324   ....               RJMP    ?EPILOGUE_B16_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine66:
   \   00000000   E460               LDI     R22, 64
   \   00000002   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   E460               LDI     R22, 64
   \   00000002   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   ....               RJMP    ?Subroutine102

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   0F28               ADD     R18, R24
   \   00000002   1F34               ADC     R19, R20
   \   00000004                      REQUIRE ?Subroutine125
   \   00000004                      ;               // Fall through to label ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   8320               ST      Z, R18
   \   00000002   8331               STD     Z+1, R19
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   E060               LDI     R22, 0
   \   00000002   E470               LDI     R23, 64
   \   00000004   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   EA60               LDI     R22, 160
   \   00000002   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   E060               LDI     R22, 0
   \   00000002   E470               LDI     R23, 64
   \   00000004   0193               MOVW    R19:R18, R7:R6
   \   00000006   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   E040               LDI     R20, 0
   \   00000002   EE60               LDI     R22, 224
   \   00000004   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   E041               LDI     R20, 1
   \   00000002   EA60               LDI     R22, 160
   \   00000004   ....               RJMP    ?F_CMP_GE_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   ....               LDI     R30, LOW(cod2)
   \   00000002   ....               LDI     R31, (cod2) >> 8
   \   00000004   ....               RJMP    ?Subroutine103

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_215:
   \   00000002                      REQUIRE ?Subroutine103
   \   00000002                      ;               // Fall through to label ?Subroutine103

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   8120               LD      R18, Z
   \   00000002   8131               LDD     R19, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_328:
   \   00000002   0F00               LSL     R16
   \   00000004   1F11               ROL     R17
   \   00000006   0F00               LSL     R16
   \   00000008   1F11               ROL     R17
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_331:
   \   00000002   2902               OR      R16, R2
   \   00000004   2913               OR      R17, R3
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_327:
   \   00000002   01F6               MOVW    R31:R30, R13:R12
   \   00000004                      REQUIRE ?Subroutine99
   \   00000004                      ;               // Fall through to label ?Subroutine99

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   8130               LD      R19, Z
   \   00000002   E020               LDI     R18, 0
   \   00000004   0F13               ADD     R17, R19
   \   00000006                      REQUIRE ?Subroutine135
   \   00000006                      ;               // Fall through to label ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine135:
   \   00000000   E030               LDI     R19, 0
   \   00000002   ....               RJMP    ?UL2F_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_196:
   \   00000002   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_319:
   \   00000004                      REQUIRE ?Subroutine109
   \   00000004                      ;               // Fall through to label ?Subroutine109

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   0182               MOVW    R17:R16, R5:R4
   \   00000002   0193               MOVW    R19:R18, R7:R6
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine98:
   \   00000000   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_333:
   \   00000002   ....               RJMP    ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   ....               LDI     R30, LOW(minimallen)
   \   00000002   ....               LDI     R31, (minimallen) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   ....               RCALL   ??rprintfStr
   \   00000002   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_214:
   \   00000004                      REQUIRE ?Subroutine136
   \   00000004                      REQUIRE ??Subroutine138_0
   \   00000004                      ;               // Fall through to label ??Subroutine138_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine138_0:
   \   00000000   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_320:
   \   00000002                      REQUIRE ?Subroutine136
   \   00000002                      ;               // Fall through to label ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine136:
   \   00000000   E006               LDI     R16, 6
   \   00000002   ....               RJMP    ??rprintfFloat

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               SUBI    R30, LOW((-(dim2) & 0xFFFF))
   \   00000004   ....               SBCI    R31, (-(dim2) & 0xFFFF) >> 8
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               SUBI    R30, LOW((-(dim1) & 0xFFFF))
   \   00000004   ....               SBCI    R31, (-(dim1) & 0xFFFF) >> 8
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   9100....           LDS     R16, ct
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   ....               RCALL   ??rprintfStr
   \   00000002   9100....           LDS     R16, pultadr
   \   00000006   E010               LDI     R17, 0
   \                     ??Subroutine17_0:
   \   00000008   ....               RCALL   ?Subroutine121
   \                     ??CrossCallReturnLabel_409:
   \   0000000A   E009               LDI     R16, 9
   \                     ??Subroutine17_1:
   \   0000000C   ....               RCALL   ??rprintfFloat
   \                     ??Subroutine17_2:
   \   0000000E   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_310:
   \   00000010   F011               BREQ    ??Subroutine17_3
   \   00000012   E00D               LDI     R16, 13
   \   00000014   ....               RCALL   ??USART_SendChar
   \                     ??Subroutine17_3:
   \   00000016   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_178:
   \   00000002   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_204:
   \   00000004   0182               MOVW    R17:R16, R5:R4
   \   00000006   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   0118               MOVW    R3:R2, R17:R16
   \   00000002   E040               LDI     R20, 0
   \   00000004   EC60               LDI     R22, 192
   \   00000006   E37F               LDI     R23, 63
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_177:
   \   00000002   2B20               OR      R18, R16
   \   00000004   2B31               OR      R19, R17
   \   00000006                      REQUIRE ?Subroutine102
   \   00000006                      ;               // Fall through to label ?Subroutine102

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   0F28               ADD     R18, R24
   \   00000002   1F35               ADC     R19, R21
   \   00000004   ....               RJMP    ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_192:
   \   00000002   8302               STD     Z+2, R16
   \   00000004   8303               STD     Z+3, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004   8162               LDD     R22, Z+2
   \   00000006   8173               LDD     R23, Z+3
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine139_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   8322               STD     Z+2, R18
   \   00000006   8333               STD     Z+3, R19
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   8100               LD      R16, Z
   \   00000002   9503               INC     R16
   \   00000004   8300               ST      Z, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_219:
   \   00000002   0D00               ADD     R16, R0
   \   00000004   1D11               ADC     R17, R1
   \   00000006                      REQUIRE ??Subroutine141_0
   \   00000006                      ;               // Fall through to label ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine141_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_213:
   \   00000004   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_190:
   \   00000006   ....               LDI     R30, LOW(cod2)
   \   00000008   ....               LDI     R31, (cod2) >> 8
   \   0000000A   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_191:
   \   0000000C   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_200:
   \   0000000E                      REQUIRE ?Subroutine96
   \   0000000E                      ;               // Fall through to label ?Subroutine96

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   8300               ST      Z, R16
   \   00000002   8301               STD     Z+1, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_201:
   \   00000002                      REQUIRE ?Subroutine122
   \   00000002                      ;               // Fall through to label ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   ....               LDI     R30, LOW(cod3)
   \   00000002   ....               LDI     R31, (cod3) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_410:
   \   00000002   ....               RJMP    ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   E001               LDI     R16, 1
   \   00000002   E010               LDI     R17, 0
   \   00000004   ....               RJMP    ?S_SHL_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   E002               LDI     R16, 2
   \   00000002   9F80               MUL     R24, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   ....               RCALL   ??rprintfStr
   \   00000002                      REQUIRE ??Subroutine146_0
   \   00000002                      ;               // Fall through to label ??Subroutine146_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine146_0:
   \   00000000   ....               LDI     R30, LOW(cod2)
   \   00000002   ....               LDI     R31, (cod2) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   ....               LDI     R30, LOW(cod1)
   \   00000002   ....               LDI     R31, (cod1) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_202:
   \   00000002   ....               RJMP    ?Subroutine103

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   2300               TST     R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   2F08               MOV     R16, R24
   \   00000002                      REQUIRE ?Subroutine95
   \   00000002                      ;               // Fall through to label ?Subroutine95

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine121
   \   00000002                      ;               // Fall through to label ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_339:
   \   00000002                      REQUIRE ??Subroutine147_0
   \   00000002                      ;               // Fall through to label ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine147_0:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
   \   00000002   01B9               MOVW    R23:R22, R19:R18
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine105:
   \   00000000   9100....           LDS     R16, u
   \   00000004   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   E060               LDI     R22, 0
   \   00000006   E070               LDI     R23, 0
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_227:
   \   00000002   ....               RJMP    ?F_CMP_LT_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   0128               MOVW    R5:R4, R17:R16
   \   00000002   0139               MOVW    R7:R6, R19:R18
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   E020               LDI     R18, 0
   \   00000002   ....               RJMP    ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 __interrupt void funTIMER1_OVF_vect()
   \                     ??funTIMER1_OVF_vect:
   \   00000000   930A               ST      -Y, R16
   \   00000002   E001               LDI     R16, 1
   \   00000004   9300....           STS     perepoln, R16
   \   00000008                      REQUIRE ?Subroutine134
   \   00000008                      ;               // Fall through to label ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   9109               LD      R16, Y+
   \   00000002   9518               RETI
     32          #include "SoftTimers.h" 

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T1
   \                     T1:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T2
   \                     T2:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T3
   \                     T3:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool T1end
   \                     T1end:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool T2end
   \                     T2end:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   bool T3end
   \                     T3end:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T1max
   \                     T1max:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T2max
   \                     T2max:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned long T3max
   \                     T3max:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int T1x
   \                     T1x:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int T2x
   \                     T2x:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   unsigned int T3x
   \                     T3x:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   unsigned long Calibr
   \                     Calibr:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for Calibr>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static bool sost
   \                     ??sost:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char raz
   \                     ??raz:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   static unsigned char port
   \                     ??port:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for port>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   static unsigned char razct
   \                     ??razct:
   \   00000000                      DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void ResetT1()
   \                     ??ResetT1:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R30, LOW(T1)
   \   00000004   ....               LDI     R31, (T1) >> 8
   \   00000006   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_35:
   \   00000008   ....               LDI     R30, LOW(T1x)
   \   0000000A   ....               LDI     R31, (T1x) >> 8
   \   0000000C   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_185:
   \   0000000E   9300....           STS     T1end, R16
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void iniT1(unsigned long)
   \                     ??iniT1:
   \   00000000   ....               LDI     R30, LOW(T1max)
   \   00000002   ....               LDI     R31, (T1max) >> 8
   \   00000004   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_348:
   \   00000006   ....               RJMP    ??ResetT1

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void WorkT1()
   \                     ??WorkT1:
   \   00000000   9100....           LDS     R16, T1end
   \   00000004   2300               TST     R16
   \   00000006   F4F1               BRNE    ??WorkT1_1
   \   00000008   ....               LDI     R30, LOW(T1x)
   \   0000000A   ....               LDI     R31, (T1x) >> 8
   \   0000000C   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_43:
   \   0000000E   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_363:
   \   00000010   E020               LDI     R18, 0
   \   00000012   ....               LDI     R30, LOW(Calibr)
   \   00000014   ....               LDI     R31, (Calibr) >> 8
   \   00000016   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_230:
   \   00000018   1704               CP      R16, R20
   \   0000001A   0715               CPC     R17, R21
   \   0000001C   0726               CPC     R18, R22
   \   0000001E   0727               CPC     R18, R23
   \   00000020   F038               BRCS    ??CrossCallReturnLabel_350
   \   00000022   ....               LDI     R30, LOW(T1x)
   \   00000024   ....               LDI     R31, (T1x) >> 8
   \   00000026   8320               ST      Z, R18
   \   00000028   8321               STD     Z+1, R18
   \   0000002A   ....               LDI     R30, LOW(T1)
   \   0000002C   ....               LDI     R31, (T1) >> 8
   \   0000002E   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_350:
   \   00000030   ....               LDI     R30, LOW(T1)
   \   00000032   ....               LDI     R31, (T1) >> 8
   \   00000034   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_220:
   \   00000036   ....               LDI     R30, LOW(T1max)
   \   00000038   ....               LDI     R31, (T1max) >> 8
   \   0000003A   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_82:
   \   0000003C   F018               BRCS    ??WorkT1_1
   \   0000003E   E001               LDI     R16, 1
   \   00000040   9300....           STS     T1end, R16
   \                     ??WorkT1_1:
   \   00000044   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_223:
   \   00000002   5F0F               SUBI    R16, 255
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   4F2F               SBCI    R18, 255
   \   00000008   4F3F               SBCI    R19, 255
   \   0000000A                      REQUIRE ??Subroutine139_0
   \   0000000A                      ;               // Fall through to label ??Subroutine139_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_231:
   \   00000002   1704               CP      R16, R20
   \   00000004   0715               CPC     R17, R21
   \   00000006   0726               CPC     R18, R22
   \   00000008   0737               CPC     R19, R23
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_332:
   \   00000002   8122               LDD     R18, Z+2
   \   00000004   8133               LDD     R19, Z+3
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_326:
   \   00000002   5F0F               SUBI    R16, 255
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void ResetT2()
   \                     ??ResetT2:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R30, LOW(T2)
   \   00000004   ....               LDI     R31, (T2) >> 8
   \   00000006   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_36:
   \   00000008   ....               LDI     R30, LOW(T2x)
   \   0000000A   ....               LDI     R31, (T2x) >> 8
   \   0000000C   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_186:
   \   0000000E                      REQUIRE ?Subroutine126
   \   0000000E                      ;               // Fall through to label ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   9300....           STS     T2end, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void iniT2(unsigned long)
   \                     ??iniT2:
   \   00000000   ....               LDI     R30, LOW(T2max)
   \   00000002   ....               LDI     R31, (T2max) >> 8
   \   00000004   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_349:
   \   00000006   ....               RJMP    ??ResetT2

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void WorkT2()
   \                     ??WorkT2:
   \   00000000   ....               RCALL   ?PROLOGUE3_L09
   \   00000002   9100....           LDS     R16, T2end
   \   00000006   2300               TST     R16
   \   00000008   F511               BRNE    ??CrossCallReturnLabel_270
   \   0000000A   ....               LDI     R30, LOW(T2x)
   \   0000000C   ....               LDI     R31, (T2x) >> 8
   \   0000000E   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_44:
   \   00000010   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_364:
   \   00000012   01C8               MOVW    R25:R24, R17:R16
   \   00000014   E0A0               LDI     R26, 0
   \   00000016   EE48               LDI     R20, 232
   \   00000018   E053               LDI     R21, 3
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   ....               LDI     R30, LOW(Calibr)
   \   00000020   ....               LDI     R31, (Calibr) >> 8
   \   00000022   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_221:
   \   00000024   ....               RCALL   ?UL_DIVMOD_L03
   \   00000026   1780               CP      R24, R16
   \   00000028   0791               CPC     R25, R17
   \   0000002A   07A2               CPC     R26, R18
   \   0000002C   07A3               CPC     R26, R19
   \   0000002E   F038               BRCS    ??CrossCallReturnLabel_351
   \   00000030   ....               LDI     R30, LOW(T2x)
   \   00000032   ....               LDI     R31, (T2x) >> 8
   \   00000034   83A0               ST      Z, R26
   \   00000036   83A1               STD     Z+1, R26
   \   00000038   ....               LDI     R30, LOW(T2)
   \   0000003A   ....               LDI     R31, (T2) >> 8
   \   0000003C   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_351:
   \   0000003E   ....               LDI     R30, LOW(T2)
   \   00000040   ....               LDI     R31, (T2) >> 8
   \   00000042   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_222:
   \   00000044   ....               LDI     R30, LOW(T2max)
   \   00000046   ....               LDI     R31, (T2max) >> 8
   \   00000048   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_83:
   \   0000004A   F008               BRCS    ??CrossCallReturnLabel_270
   \   0000004C   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_270:
   \   0000004E   E0E3               LDI     R30, 3
   \   00000050   ....               RJMP    ?EPILOGUE_B3_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void migINI(unsigned char, unsigned char, bool)
   \                     ??migINI:
   \   00000000   2F30               MOV     R19, R16
   \   00000002   01A8               MOVW    R21:R20, R17:R16
   \   00000004   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_175:
   \   00000006   B318               IN      R17, 0x18
   \   00000008   2B10               OR      R17, R16
   \   0000000A   BB18               OUT     0x18, R17
   \   0000000C   9100....           LDS     R16, ??port
   \   00000010   3F0F               CPI     R16, 255
   \   00000012   F051               BREQ    ??migINI_1
   \   00000014   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_180:
   \   00000016   2322               TST     R18
   \   00000018   F019               BREQ    ??migINI_2
   \   0000001A   B318               IN      R17, 0x18
   \   0000001C   2B10               OR      R17, R16
   \   0000001E   C003               RJMP    ??migINI_3
   \                     ??migINI_2:
   \   00000020   9500               COM     R16
   \   00000022   B318               IN      R17, 0x18
   \   00000024   2310               AND     R17, R16
   \                     ??migINI_3:
   \   00000026   BB18               OUT     0x18, R17
   \                     ??migINI_1:
   \   00000028   9350....           STS     ??raz, R21
   \   0000002C   9330....           STS     ??port, R19
   \   00000030   E000               LDI     R16, 0
   \   00000032   9300....           STS     ??razct, R16
   \   00000036   E005               LDI     R16, 5
   \   00000038   ....               RCALL   ??Subroutine140_0
   \                     ??CrossCallReturnLabel_352:
   \   0000003A                      REQUIRE ?Subroutine7
   \   0000003A                      REQUIRE _A_PORTB
   \   0000003A                      ;               // Fall through to label ?Subroutine7

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine140_0:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E020               LDI     R18, 0
   \   00000004   E030               LDI     R19, 0
   \   00000006   ....               RJMP    ??iniT2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   9140....           LDS     R20, ??port
   \   00000004                      REQUIRE ?Subroutine94
   \   00000004                      ;               // Fall through to label ?Subroutine94

   \                                 In  segment CODE, align 2, keep-with-next
   \   __version_3 void migWORK()
   \                     ??migWORK:
   \   00000000   938A               ST      -Y, R24
   \   00000002   ....               RCALL   ??WorkT2
   \   00000004   9100....           LDS     R16, T2end
   \   00000008   2300               TST     R16
   \   0000000A   F0C9               BREQ    ??migWORK_1
   \   0000000C   9100....           LDS     R16, ??port
   \   00000010   3F0F               CPI     R16, 255
   \   00000012   F0A9               BREQ    ??migWORK_1
   \   00000014   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_181:
   \   00000016   2F80               MOV     R24, R16
   \   00000018   9100....           LDS     R16, ??sost
   \   0000001C   2300               TST     R16
   \   0000001E   F449               BRNE    ??migWORK_2
   \   00000020   E001               LDI     R16, 1
   \   00000022   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_354:
   \   00000024   B308               IN      R16, 0x18
   \   00000026   2B08               OR      R16, R24
   \   00000028   BB08               OUT     0x18, R16
   \   0000002A   ....               LDI     R30, LOW(??razct)
   \   0000002C   ....               LDI     R31, (??razct) >> 8
   \   0000002E   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_50:
   \   00000030   C006               RJMP    ??migWORK_1
   \                     ??migWORK_2:
   \   00000032   E000               LDI     R16, 0
   \   00000034   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_353:
   \   00000036   9580               COM     R24
   \   00000038   B308               IN      R16, 0x18
   \   0000003A   2308               AND     R16, R24
   \   0000003C   BB08               OUT     0x18, R16
   \                     ??migWORK_1:
   \   0000003E   9100....           LDS     R16, ??razct
   \   00000042   9110....           LDS     R17, ??raz
   \   00000046   1701               CP      R16, R17
   \   00000048   F020               BRCS    ??migWORK_3
   \   0000004A   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_271:
   \   0000004C   EF0F               LDI     R16, 255
   \   0000004E   9300....           STS     ??port, R16
   \                     ??migWORK_3:
   \   00000052   ....               RJMP    ?Subroutine130
   \   00000054                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   9300....           STS     ??sost, R16
   \   00000004   EC08               LDI     R16, 200
   \   00000006                      REQUIRE ??Subroutine140_0
   \   00000006                      ;               // Fall through to label ??Subroutine140_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9508               RET
     33          #include "keys.h"
     34          //#include <stdlib.h>
     35          //#include <math.h> 
     36          #include "usart.h"
     37          //#include <stdarg.h>
     38          //************************************************************************* 
     39          #define AC_ON    SET(PORTD,6)
     40          #define AC_OFF   RES(PORTD,6)
     41          void diag(void);
     42          void led_all(bool a);
     43          void resled(void);
     44          void source(void);
     45          void resOUT(void);  
     46          void gro(uchar a);
     47          void normal(uchar rez);
     48          void writeCOD(void);
     49          uchar analizCOD(void);
     50          void programming(uchar rez);
     51          uchar getadr(void);
     52          #define acon 20000;//время включения АС при подаче питания

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     53          uint tON=acon; 
   \                     tON:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for tON>`
     54          #define MAXFUNC 23  //последний(включительно)действующий tekfunc(кол-во фукций)
     55          //uint kbuf[MAXEEP];

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     56          uchar write;
   \                     `write`:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     57          uchar pr;
   \                     pr:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     58          static bool get=0;
   \                     ??get:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     59          bool onok;  
   \                     onok:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     60          bool on,mute;
   \                     on:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     mute:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     61          bool zader,aoff;
   \                     zader:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     aoff:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     62          uint timerzad; 
   \                     timerzad:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     63          uchar pultadr; uchar rez; 
   \                     pultadr:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     rez:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     64          extern  uchar mode=0,tekfunc=0; 
   \                     mode:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     tekfunc:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     65          static uchar lastsel=1,sel=1,gro1=0,gro2=0,regaoff=0;
   \                     ??lastsel:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for lastsel>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     ??sel:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for sel>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??gro1:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??gro2:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??regaoff:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     66          bool u=false,til=false;
   \                     u:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     til:
   \   00000000                      DS8 1
     67          

   \                                 In  segment EEPROM_N, align 1, keep-with-next
     68          __no_init __eeprom uint k[MAXEEP];
   \                     k:
   \   00000000                      DS8 240

   \                                 In  segment EEPROM_N, align 1, keep-with-next
     69          __no_init __eeprom uchar fmode;//если ==1 то вместо source5 выход реле включения усилителя тыловых колонок
   \                     fmode:
   \   00000000                      DS8 1

   \                                 In  segment EEPROM_N, align 1, keep-with-next
     70          __no_init __eeprom uchar modegro;
   \                     modegro:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     71          uint cod1,cod2,cod3,cod4; 
   \                     cod1:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     cod2:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     cod3:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     cod4:
   \   00000000                      DS8 2
     72          //***************************************************************************
     73          //                  M  A  I  N
     74          //***************************************************************************

   \                                 In  segment CODE, align 2, keep-with-next
     75          int main( void )
   \                     main:
     76          {//main
   \   00000000   938A               ST      -Y, R24
     77            
     78             aoff=0; onok=0; pr=0; on=0; mute=0; zader=0;  til=0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_234:
   \   00000006   9300....           STS     onok, R16
   \   0000000A   9300....           STS     pr, R16
   \   0000000E   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_372:
   \   00000010   9300....           STS     mute, R16
   \   00000014   ....               RCALL   ?Subroutine70
     79            iniPORTS();    
   \                     ??CrossCallReturnLabel_119:
   \   00000016   ....               RCALL   ??iniPORTS
     80           //----------------------------------
     81             if (keyONsm) u=true;//включаем UART
   \   00000018   9985               SBIC    0x10, 0x05
   \   0000001A   C004               RJMP    ??main_0
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   9300....           STS     u, R16
   \   00000022   C002               RJMP    ??main_1
     82           // u=1; 
     83            if (u) USART_Init();
   \                     ??main_0:
   \   00000024   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_303:
   \   00000026   F009               BREQ    ??main_2
   \                     ??main_1:
   \   00000028   ....               RCALL   ??USART_Init
     84          //----------------------------------
     85            mode=fmode; //смена режима работы
   \                     ??main_2:
   \   0000002A   ....               LDI     R20, LOW(fmode)
   \   0000002C   ....               LDI     R21, (fmode) >> 8
   \   0000002E   ....               RCALL   __eeget8_16
   \   00000030   9300....           STS     mode, R16
     86            if (mode!=1 && mode!=0) { fmode=0; mode=0;   }//ini
   \   00000034   3001               CPI     R16, 1
   \   00000036   F029               BREQ    ??main_3
   \   00000038   2300               TST     R16
   \   0000003A   F019               BREQ    ??main_3
   \   0000003C   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_10:
   \   0000003E   9300....           STS     mode, R16
     87            if (modegro!=1 && modegro!=0) { modegro=0; p1;   }//ini
   \                     ??main_3:
   \   00000042   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_311:
   \   00000044   F021               BREQ    ??CrossCallReturnLabel_121
   \   00000046   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_292:
   \   00000048   F011               BREQ    ??CrossCallReturnLabel_121
   \   0000004A   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_12:
   \   0000004C   ....               RCALL   ?Subroutine73
     88            
     89            if (keyMUTE && !keyAOFFsm) {
   \                     ??CrossCallReturnLabel_121:
   \   0000004E   9981               SBIC    0x10, 0x01
   \   00000050   C027               RJMP    ??main_4
   \   00000052   9985               SBIC    0x10, 0x05
   \   00000054   C025               RJMP    ??main_4
   \   00000056   9B80               SBIS    0x10, 0x00
   \   00000058   C023               RJMP    ??main_4
     90            if (mode==0 && modegro==0)   {  fmode=1; p5;   SET(PORTB,4);  while(1) {}   }
   \   0000005A   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_295:
   \   0000005C   F441               BRNE    ??main_5
   \   0000005E   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_293:
   \   00000060   F4C9               BRNE    ??main_6
   \   00000062   E001               LDI     R16, 1
   \   00000064   ....               LDI     R20, LOW(fmode)
   \   00000066   ....               LDI     R21, (fmode) >> 8
   \   00000068   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_118:
   \   0000006A   9AC4               SBI     0x18, 0x04
   \                     ??main_7:
   \   0000006C   CFFF               RJMP    ??main_7
     91            if (mode==1 && modegro==0)   {  modegro=1; p5; SET(PORTB,2);  SET(PORTB,3);  SET(PORTB,4);  while(1) {}  }
   \                     ??main_5:
   \   0000006E   3001               CPI     R16, 1
   \   00000070   F4B9               BRNE    ??main_4
   \   00000072   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_294:
   \   00000074   F441               BRNE    ??main_8
   \   00000076   E001               LDI     R16, 1
   \   00000078   ....               LDI     R20, LOW(modegro)
   \   0000007A   ....               LDI     R21, (modegro) >> 8
   \   0000007C   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_117:
   \   0000007E   9AC2               SBI     0x18, 0x02
   \   00000080   9AC3               SBI     0x18, 0x03
   \   00000082   9AC4               SBI     0x18, 0x04
   \                     ??main_9:
   \   00000084   CFFF               RJMP    ??main_9
   \                     ??main_8:
   \   00000086   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_312:
   \   00000088   F459               BRNE    ??main_4
     92            if (mode==1 && modegro==1)   {  fmode=0; p5; SET(PORTB,2);  SET(PORTB,3);    while(1) {}  } 
   \   0000008A   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_11:
   \   0000008C   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_259:
   \   0000008E   9AC2               SBI     0x18, 0x02
   \   00000090   9AC3               SBI     0x18, 0x03
   \                     ??main_10:
   \   00000092   CFFF               RJMP    ??main_10
   \                     ??main_6:
   \   00000094   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_313:
   \   00000096   F421               BRNE    ??main_4
     93            if (mode==0 && modegro==1)   {  modegro=0; p5;  led_all(1);    while(1) {}   }
   \   00000098   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_13:
   \   0000009A   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_260:
   \   0000009C   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_393:
   \   0000009E   CFFF               RJMP    ??CrossCallReturnLabel_393
     94            
     95                                        }
     96            
     97           // modegro=1; mode=1;
     98          //-----------------------------------
     99            
    100             if (keySELsm) {write=1; }//включаем программирование пульта
   \                     ??main_4:
   \   000000A0   9981               SBIC    0x10, 0x01
   \   000000A2   C003               RJMP    ??main_11
   \   000000A4   E001               LDI     R16, 1
   \   000000A6   9300....           STS     `write`, R16
    101             if (keySELsm==1 && keyAOFFsm==1)//очистка
   \                     ??main_11:
   \   000000AA   9981               SBIC    0x10, 0x01
   \   000000AC   C00F               RJMP    ??main_12
   \   000000AE   9980               SBIC    0x10, 0x00
   \   000000B0   C00D               RJMP    ??main_12
    102                {
    103                  write=1; cod1=0;cod2=0;cod3=0;
   \   000000B2   E001               LDI     R16, 1
   \   000000B4   9300....           STS     `write`, R16
   \   000000B8   ....               RCALL   ?Subroutine10
    104                  for (uchar i=0; i<=MAXFUNC; i++) {writeCOD();tekfunc++;}
   \                     ??CrossCallReturnLabel_6:
   \   000000BA   E188               LDI     R24, 24
   \                     ??main_13:
   \   000000BC   ....               RCALL   ??writeCOD
   \   000000BE   ....               LDI     R30, LOW(tekfunc)
   \   000000C0   ....               LDI     R31, (tekfunc) >> 8
   \   000000C2   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_51:
   \   000000C4   958A               DEC     R24
   \   000000C6   F7D1               BRNE    ??main_13
    105                  tekfunc=0;
    106                  led_all(1); while(1) {} //зависаем
   \   000000C8   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_392:
   \   000000CA   CFFF               RJMP    ??CrossCallReturnLabel_392
    107                }
    108          
    109             if (write==1) //мигание первого программируемого
   \                     ??main_12:
   \   000000CC   9100....           LDS     R16, `write`
   \   000000D0   3001               CPI     R16, 1
   \   000000D2   F441               BRNE    ??main_14
    110             {
    111               for (uchar i=0; i<3; i++) {getadr(); p3;led_all(0); p3;}
   \   000000D4   E083               LDI     R24, 3
   \                     ??main_15:
   \   000000D6   ....               RCALL   ??getadr
   \   000000D8   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_123:
   \   000000DA   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_18:
   \   000000DC   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_124:
   \   000000DE   958A               DEC     R24
   \   000000E0   F7D1               BRNE    ??main_15
    112              
    113               getadr();
   \   000000E2   ....               RCALL   ??getadr
    114             }
    115                     
    116             //---------------------------------------
    117           //   for (uchar i=0; i<MAXEEP-1; i++) kbuf[i]=k[i];//читаем ееprom
    118            //-----------------------------------------
    119            //---------------------------------- 
    120          
    121               __enable_interrupt(); 
   \                     ??main_14:
   \   000000E4   9478               SEI
   \   000000E6   C004               RJMP    ??main_16
    122            
    123            
    124            
    125             
    126            
    127            
    128            
    129            
    130            
    131            
    132            
    133            
    134            
    135            
    136            
    137            
    138            
    139            
    140            
    141            
    142            
    143            while(1){//-----------------------------------бесконечный цикл
    144          
    145             rez=du_main(pr);//вызов обработчика пульта
    146             
    147             if (write==0)  {//------------------------------------- 
    148              
    149               pultadr=0; 
    150               if (rez) pultadr=analizCOD();  
    151               
    152               if ((keyON||pultadr==25 || pultadr==90) && on==1 && zader!=1) { rprintfStr("OFF>adr="); rprintfFloat(9, pultadr ); ent;
    153                              on=0;onok=0; p5; zader=0;  til=0; gro1=0; gro2=0; pultadr=0;  }//OFF
    154               if ((keyON||pultadr==25 || pultadr==90) && on==0) {rprintfStr("ON>adr="); rprintfFloat(9, pultadr ); ent;
    155                              SET(PORTD,4); SET(PORTD,7);p5; on=1; mute=0; zader=1;timerzad=0;source();pultadr=0;  }//ON
    156               
    157              //выключение
    158              if (on==0 && onok==0) { on=0; aoff=0; p5; zader=0; regaoff=0; AC_OFF; delay_s(1); tON=acon; 
    159              						PORTB=0; RES(PORTD,7);RES(PORTD,4); resOUT(); RES(PORTC,5); RES(PORTC,0);RES(PORTD,3); onok=1;
    160                                    }
    161                                            
    162             
    163              if (on==1) normal(rez);
    164             
    165                            }//------------------------------------- 
    166             else programming(rez);
   \                     ??main_17:
   \   000000E8   9100....           LDS     R16, rez
   \   000000EC   ....               RCALL   ??programming
    167             
    168             diag();  
   \                     ??main_18:
   \   000000EE   ....               RCALL   ??diag
   \                     ??main_16:
   \   000000F0   9100....           LDS     R16, pr
   \   000000F4   ....               RCALL   ??du_main
   \   000000F6   9300....           STS     rez, R16
   \   000000FA   9100....           LDS     R16, `write`
   \   000000FE   2300               TST     R16
   \   00000100   F799               BRNE    ??main_17
   \   00000102   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_383:
   \   00000104   9100....           LDS     R16, rez
   \   00000108   2300               TST     R16
   \   0000010A   F009               BREQ    ??CrossCallReturnLabel_378
   \   0000010C   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_378:
   \   0000010E   9985               SBIC    0x10, 0x05
   \   00000110   C004               RJMP    ??main_19
   \   00000112   9B80               SBIS    0x10, 0x00
   \   00000114   C002               RJMP    ??main_19
   \   00000116   9981               SBIC    0x10, 0x01
   \   00000118   C005               RJMP    ??main_20
   \                     ??main_19:
   \   0000011A   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_136:
   \   0000011C   3109               CPI     R16, 25
   \   0000011E   F011               BREQ    ??main_20
   \   00000120   350A               CPI     R16, 90
   \   00000122   F499               BRNE    ??CrossCallReturnLabel_380
   \                     ??main_20:
   \   00000124   9110....           LDS     R17, on
   \   00000128   9120....           LDS     R18, zader
   \   0000012C   E001               LDI     R16, 1
   \   0000012E   2720               EOR     R18, R16
   \   00000130   2312               AND     R17, R18
   \   00000132   F059               BREQ    ??CrossCallReturnLabel_380
   \   00000134   ....               LDI     R16, LOW(`?<Constant "OFF>adr=">`)
   \   00000136   ....               LDI     R17, (`?<Constant "OFF>adr=">`) >> 8
   \   00000138   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_19:
   \   0000013A   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_14:
   \   0000013C   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_242:
   \   0000013E   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_120:
   \   00000140   9300....           STS     ??gro1, R16
   \   00000144   9300....           STS     ??gro2, R16
   \   00000148   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_380:
   \   0000014A   9985               SBIC    0x10, 0x05
   \   0000014C   C004               RJMP    ??main_21
   \   0000014E   9B80               SBIS    0x10, 0x00
   \   00000150   C002               RJMP    ??main_21
   \   00000152   9981               SBIC    0x10, 0x01
   \   00000154   C005               RJMP    ??main_22
   \                     ??main_21:
   \   00000156   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_137:
   \   00000158   3109               CPI     R16, 25
   \   0000015A   F011               BREQ    ??main_22
   \   0000015C   350A               CPI     R16, 90
   \   0000015E   F489               BRNE    ??CrossCallReturnLabel_384
   \                     ??main_22:
   \   00000160   9100....           LDS     R16, on
   \   00000164   2300               TST     R16
   \   00000166   F469               BRNE    ??CrossCallReturnLabel_384
   \   00000168   ....               LDI     R16, LOW(`?<Constant "ON>adr=">`)
   \   0000016A   ....               LDI     R17, (`?<Constant "ON>adr=">`) >> 8
   \   0000016C   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_20:
   \   0000016E   9A94               SBI     0x12, 0x04
   \   00000170   9A97               SBI     0x12, 0x07
   \   00000172   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_261:
   \   00000174   E001               LDI     R16, 1
   \   00000176   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_373:
   \   00000178   E000               LDI     R16, 0
   \   0000017A   9300....           STS     mute, R16
   \   0000017E   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   00000180   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_384:
   \   00000182   9100....           LDS     R16, on
   \   00000186   9110....           LDS     R17, onok
   \   0000018A   2B01               OR      R16, R17
   \   0000018C   F4A1               BRNE    ??main_23
   \   0000018E   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_374:
   \   00000190   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_272:
   \   00000192   9896               CBI     0x12, 0x06
   \   00000194   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_130:
   \   00000196   E200               LDI     R16, 32
   \   00000198   E41E               LDI     R17, 78
   \   0000019A   ....               LDI     R30, LOW(tON)
   \   0000019C   ....               LDI     R31, (tON) >> 8
   \   0000019E   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_365:
   \   000001A0   E000               LDI     R16, 0
   \   000001A2   BB08               OUT     0x18, R16
   \   000001A4   9897               CBI     0x12, 0x07
   \   000001A6   9894               CBI     0x12, 0x04
   \   000001A8   ....               RCALL   ??resOUT
   \   000001AA   98AD               CBI     0x15, 0x05
   \   000001AC   98A8               CBI     0x15, 0x00
   \   000001AE   9893               CBI     0x12, 0x03
   \   000001B0   E001               LDI     R16, 1
   \   000001B2   9300....           STS     onok, R16
   \                     ??main_23:
   \   000001B6   9100....           LDS     R16, on
   \   000001BA   2300               TST     R16
   \   000001BC   F409               BRNE    $+2+2
   \   000001BE   CF97               RJMP    ??main_18
   \   000001C0   9100....           LDS     R16, rez
   \   000001C4   ....               RCALL   ??normal
   \   000001C6   CF93               RJMP    ??main_18
   \   000001C8                      REQUIRE _A_PIND
   \   000001C8                      REQUIRE _A_PORTB
   \   000001C8                      REQUIRE _A_PORTD
   \   000001C8                      REQUIRE _A_PORTC
    169               
    170              
    171             
    172            }//-------------------------------------------бесконечный цикл
    173            
    174          }//main

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine74:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   EA19               LDI     R17, 169
   \   00000004   E023               LDI     R18, 3
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine70:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_248:
   \   00000002   9300....           STS     til, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_241:
   \   00000002   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   ....               RCALL   __eeput8_16
   \   00000002                      REQUIRE ?Subroutine123
   \   00000002                      ;               // Fall through to label ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   E11A               LDI     R17, 26
   \   00000004   E026               LDI     R18, 6
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R20, LOW(modegro)
   \   00000004   ....               LDI     R21, (modegro) >> 8
   \   00000006   ....               RJMP    __eeput8_16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               LDI     R20, LOW(fmode)
   \   00000004   ....               LDI     R21, (fmode) >> 8
   \   00000006   ....               RJMP    __eeput8_16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_246:
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               LDI     R30, LOW(timerzad)
   \   00000008   ....               LDI     R31, (timerzad) >> 8
   \   0000000A   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_189:
   \   0000000C   ....               RJMP    ??source

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   9300....           STS     zader, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   9300....           STS     ??regaoff, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   9100....           LDS     R16, pultadr
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   ....               RCALL   ??analizCOD
   \   00000002                      REQUIRE ?Subroutine128
   \   00000002                      ;               // Fall through to label ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   9300....           STS     pultadr, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   E70F               LDI     R16, 127
   \   00000002   E318               LDI     R17, 56
   \   00000004   E021               LDI     R18, 1
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_263:
   \   00000002   E000               LDI     R16, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_239:
   \   00000002   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_244:
   \   00000004   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_247:
   \   00000006   ....               RJMP    ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_375:
   \   00000002   9300....           STS     onok, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ??Subroutine142_0
   \   00000002                      ;               // Fall through to label ??Subroutine142_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine142_0:
   \   00000000   9300....           STS     on, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine143_0:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   9300....           STS     aoff, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   E314               LDI     R17, 52
   \   00000004   E02C               LDI     R18, 12
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    ??led_all

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine144_0:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    ??led_all

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   9100....           LDS     R16, mode
   \   00000004                      REQUIRE ?Subroutine131
   \   00000004                      ;               // Fall through to label ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_240:
   \   00000002                      REQUIRE ?Subroutine133
   \   00000002                      ;               // Fall through to label ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   3001               CPI     R16, 1
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   ....               LDI     R20, LOW(modegro)
   \   00000002   ....               LDI     R21, (modegro) >> 8
   \   00000004   ....               RJMP    __eeget8_16
    175          //***************************************************************************
    176          
    177          
    178          
    179          
    180          
    181          
    182          
    183          
    184          
    185          
    186          
    187           
    188          

   \                                 In  segment CODE, align 2, keep-with-next
    189          uchar getadr()//адреса  команд
   \                     ??getadr:
    190          {
    191            uchar adr=0;
   \   00000000   E000               LDI     R16, 0
    192            if (tekfunc==0) {adr=1; SET(PORTB,0);}//s1
   \   00000002   9110....           LDS     R17, tekfunc
   \   00000006   2311               TST     R17
   \   00000008   F411               BRNE    ??getadr_1
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   C02F               RJMP    ??getadr_2
    193            if (tekfunc==1) {adr=5; SET(PORTB,1);}
   \                     ??getadr_1:
   \   0000000E   3011               CPI     R17, 1
   \   00000010   F411               BRNE    ??getadr_3
   \   00000012   E005               LDI     R16, 5
   \   00000014   C030               RJMP    ??getadr_4
    194            if (tekfunc==2) {adr=10;SET(PORTB,2);}
   \                     ??getadr_3:
   \   00000016   3012               CPI     R17, 2
   \   00000018   F411               BRNE    ??getadr_5
   \   0000001A   E00A               LDI     R16, 10
   \   0000001C   C031               RJMP    ??getadr_6
    195            if (tekfunc==3) {adr=15;SET(PORTB,3);}
   \                     ??getadr_5:
   \   0000001E   3013               CPI     R17, 3
   \   00000020   F411               BRNE    ??getadr_7
   \   00000022   E00F               LDI     R16, 15
   \   00000024   C032               RJMP    ??getadr_8
    196            if (tekfunc==4) {adr=20;SET(PORTB,4);}//s5 или ONтыл
   \                     ??getadr_7:
   \   00000026   3014               CPI     R17, 4
   \   00000028   F411               BRNE    ??getadr_9
   \   0000002A   E104               LDI     R16, 20
   \   0000002C   C039               RJMP    ??getadr_10
    197            if (tekfunc==5) {adr=55;SET(PORTB,0);SET(PORTB,2);SET(PORTB,4);}//command return
   \                     ??getadr_9:
   \   0000002E   3015               CPI     R17, 5
   \   00000030   F411               BRNE    ??getadr_11
   \   00000032   E307               LDI     R16, 55
   \   00000034   C033               RJMP    ??getadr_12
    198            if (tekfunc==6) {adr=25;SET(PORTD,7);}//on standby
   \                     ??getadr_11:
   \   00000036   3016               CPI     R17, 6
   \   00000038   F411               BRNE    ??getadr_13
   \   0000003A   E109               LDI     R16, 25
   \   0000003C   C036               RJMP    ??getadr_14
    199            if (tekfunc==7) {adr=30;SET(PORTB,5);}//aoff
   \                     ??getadr_13:
   \   0000003E   3017               CPI     R17, 7
   \   00000040   F411               BRNE    ??getadr_15
   \   00000042   E10E               LDI     R16, 30
   \   00000044   C036               RJMP    ??getadr_16
    200            if (tekfunc==8) {adr=35;AC_ON;}//mute
   \                     ??getadr_15:
   \   00000046   3018               CPI     R17, 8
   \   00000048   F411               BRNE    ??getadr_17
   \   0000004A   E203               LDI     R16, 35
   \   0000004C   C037               RJMP    ??getadr_18
    201            if (tekfunc==9) {adr=40; }//select
   \                     ??getadr_17:
   \   0000004E   3019               CPI     R17, 9
   \   00000050   F411               BRNE    ??getadr_19
   \   00000052   E208               LDI     R16, 40
   \   00000054   9508               RET
    202            if (tekfunc==10) {adr=45; }//громкость увеличить
   \                     ??getadr_19:
   \   00000056   301A               CPI     R17, 10
   \   00000058   F411               BRNE    ??getadr_20
   \   0000005A   E20D               LDI     R16, 45
   \   0000005C   9508               RET
    203            if (tekfunc==11) {adr=50; }//громкость уменьшить
   \                     ??getadr_20:
   \   0000005E   301B               CPI     R17, 11
   \   00000060   F411               BRNE    ??getadr_21
   \   00000062   E302               LDI     R16, 50
   \   00000064   9508               RET
    204            
    205            //дублирование команд
    206             if (tekfunc==12) {adr=60; SET(PORTB,0);}//s1
   \                     ??getadr_21:
   \   00000066   301C               CPI     R17, 12
   \   00000068   F419               BRNE    ??getadr_22
   \   0000006A   E30C               LDI     R16, 60
   \                     ??getadr_2:
   \   0000006C   9AC0               SBI     0x18, 0x00
   \   0000006E   9508               RET
    207            if (tekfunc==13) {adr=65; SET(PORTB,1);}
   \                     ??getadr_22:
   \   00000070   301D               CPI     R17, 13
   \   00000072   F419               BRNE    ??getadr_23
   \   00000074   E401               LDI     R16, 65
   \                     ??getadr_4:
   \   00000076   9AC1               SBI     0x18, 0x01
   \   00000078   9508               RET
    208            if (tekfunc==14) {adr=70;SET(PORTB,2);}
   \                     ??getadr_23:
   \   0000007A   301E               CPI     R17, 14
   \   0000007C   F419               BRNE    ??getadr_24
   \   0000007E   E406               LDI     R16, 70
   \                     ??getadr_6:
   \   00000080   9AC2               SBI     0x18, 0x02
   \   00000082   9508               RET
    209            if (tekfunc==15) {adr=75;SET(PORTB,3);}
   \                     ??getadr_24:
   \   00000084   301F               CPI     R17, 15
   \   00000086   F419               BRNE    ??getadr_25
   \   00000088   E40B               LDI     R16, 75
   \                     ??getadr_8:
   \   0000008A   9AC3               SBI     0x18, 0x03
   \   0000008C   9508               RET
    210            if (tekfunc==16) {adr=80;SET(PORTB,4);}//s5 или ONтыл
   \                     ??getadr_25:
   \   0000008E   3110               CPI     R17, 16
   \   00000090   F411               BRNE    ??getadr_26
   \   00000092   E500               LDI     R16, 80
   \   00000094   C005               RJMP    ??getadr_10
    211            if (tekfunc==17) {adr=85;SET(PORTB,0);SET(PORTB,2);SET(PORTB,4);}//command return
   \                     ??getadr_26:
   \   00000096   3111               CPI     R17, 17
   \   00000098   F429               BRNE    ??getadr_27
   \   0000009A   E505               LDI     R16, 85
   \                     ??getadr_12:
   \   0000009C   9AC0               SBI     0x18, 0x00
   \   0000009E   9AC2               SBI     0x18, 0x02
   \                     ??getadr_10:
   \   000000A0   9AC4               SBI     0x18, 0x04
   \   000000A2   9508               RET
    212            if (tekfunc==18) {adr=90;SET(PORTD,7);}//on standby
   \                     ??getadr_27:
   \   000000A4   3112               CPI     R17, 18
   \   000000A6   F411               BRNE    ??getadr_28
   \   000000A8   E50A               LDI     R16, 90
   \                     ??getadr_14:
   \   000000AA   ....               RJMP    ?Subroutine132
    213            if (tekfunc==19) {adr=95;SET(PORTB,5);}//aoff
   \                     ??getadr_28:
   \   000000AC   3113               CPI     R17, 19
   \   000000AE   F419               BRNE    ??getadr_29
   \   000000B0   E50F               LDI     R16, 95
   \                     ??getadr_16:
   \   000000B2   9AC5               SBI     0x18, 0x05
   \   000000B4   9508               RET
    214            if (tekfunc==20) {adr=100;AC_ON;}//mute
   \                     ??getadr_29:
   \   000000B6   3114               CPI     R17, 20
   \   000000B8   F419               BRNE    ??getadr_30
   \   000000BA   E604               LDI     R16, 100
   \                     ??getadr_18:
   \   000000BC   9A96               SBI     0x12, 0x06
   \   000000BE   9508               RET
    215            if (tekfunc==21) {adr=105; }//select
   \                     ??getadr_30:
   \   000000C0   3115               CPI     R17, 21
   \   000000C2   F411               BRNE    ??getadr_31
   \   000000C4   E609               LDI     R16, 105
   \   000000C6   9508               RET
    216            if (tekfunc==22) {adr=110; }//громкость увеличить
   \                     ??getadr_31:
   \   000000C8   3116               CPI     R17, 22
   \   000000CA   F411               BRNE    ??getadr_32
   \   000000CC   E60E               LDI     R16, 110
   \   000000CE   9508               RET
    217            if (tekfunc==23) {adr=115; }//громкость уменьшить
   \                     ??getadr_32:
   \   000000D0   3117               CPI     R17, 23
   \   000000D2   F409               BRNE    ??getadr_33
   \   000000D4   E703               LDI     R16, 115
    218            return(adr);
   \                     ??getadr_33:
   \   000000D6   9508               RET
   \   000000D8                      REQUIRE _A_PORTB
   \   000000D8                      REQUIRE _A_PORTD
    219          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   9A97               SBI     0x12, 0x07
   \   00000002   9508               RET
    220          
    221          

   \                                 In  segment CODE, align 2, keep-with-next
    222          void pult() 
   \                     ??pult:
    223          {
    224             tON=1500; zader=1;timerzad=0; source(); p2;   //время включения АС при переключениях
   \   00000000   ED0C               LDI     R16, 220
   \   00000002   E015               LDI     R17, 5
   \   00000004   ....               LDI     R30, LOW(tON)
   \   00000006   ....               LDI     R31, (tON) >> 8
   \   00000008   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_366:
   \   0000000A   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   0000000C   ....               RJMP    ?Subroutine84
    225          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine84:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   E710               LDI     R17, 112
   \   00000004   E022               LDI     R18, 2
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   4020               SBCI    R18, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET
    226          

   \                                 In  segment CODE, align 2, keep-with-next
    227          void normal(uchar rez)//-----------------------главная логика --------------------
   \                     ??normal:
    228          {   
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    229             pultadr=0; 
   \   00000004   ....               RCALL   ??Subroutine143_0
    230             static bool inv;
    231             migWORK();
   \                     ??CrossCallReturnLabel_385:
   \   00000006   ....               RCALL   ??migWORK
    232             
    233            
    234             if (rez)
   \   00000008   2388               TST     R24
   \   0000000A   F409               BRNE    $+2+2
   \   0000000C   C089               RJMP    ??CrossCallReturnLabel_122
    235             {//если есть команда с пульта
    236               
    237               pultadr=analizCOD();
   \   0000000E   ....               RCALL   ?Subroutine77
    238               
    239               //
    240               if (pultadr==0){  
   \                     ??CrossCallReturnLabel_379:
   \   00000010   2300               TST     R16
   \   00000012   F429               BRNE    ??normal_1
    241                //RES(PORTD,7); delay_ms(100); SET(PORTD,7);
    242                rprintfStr("normal>no find command ");  ent;}
   \   00000014   ....               LDI     R16, LOW(`?<Constant "normal>no find command ">`)
   \   00000016   ....               LDI     R17, (`?<Constant "normal>no find command ">`) >> 8
   \   00000018   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_66:
   \   0000001A   F499               BRNE    ??normal_2
   \   0000001C   C013               RJMP    ??CrossCallReturnLabel_108
    243               
    244               else 
    245               { 
    246                 if (inv){SET(PORTD,7); inv=false;}
   \                     ??normal_1:
   \   0000001E   9100....           LDS     R16, ??inv
   \   00000022   2300               TST     R16
   \   00000024   F019               BREQ    ??normal_3
   \   00000026   9A97               SBI     0x12, 0x07
   \   00000028   E000               LDI     R16, 0
   \   0000002A   C002               RJMP    ??normal_4
    247                 else {RES(PORTD,7); inv=true;}
   \                     ??normal_3:
   \   0000002C   9897               CBI     0x12, 0x07
   \   0000002E   E001               LDI     R16, 1
   \                     ??normal_4:
   \   00000030   9300....           STS     ??inv, R16
    248                 
    249                rprintfStr("normal>command find  adr= ");
   \   00000034   ....               LDI     R16, LOW(`?<Constant "normal>command find  ...">`)
   \   00000036   ....               LDI     R17, (`?<Constant "normal>command find  ...">`) >> 8
   \   00000038   ....               RCALL   ??rprintfStr
    250                rprintfFloat(6, pultadr ); ent;
   \   0000003A   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_138:
   \   0000003C   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_340:
   \   0000003E   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_304:
   \   00000040   F009               BREQ    ??CrossCallReturnLabel_108
   \                     ??normal_2:
   \   00000042   ....               RCALL   ?Subroutine62
    251               }
    252               //
    253               
    254               
    255               
    256               
    257               
    258               
    259               
    260               if (pultadr==1 || pultadr==60) {if (sel!=1)  { AC_OFF; lastsel=sel; sel=1; pult(); } else   migINI(sel-1, 3 ,0); 
   \                     ??CrossCallReturnLabel_108:
   \   00000044   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_139:
   \   00000046   3001               CPI     R16, 1
   \   00000048   F011               BREQ    ??normal_5
   \   0000004A   330C               CPI     R16, 60
   \   0000004C   F451               BRNE    ??normal_6
   \                     ??normal_5:
   \   0000004E   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_280:
   \   00000050   3001               CPI     R16, 1
   \   00000052   F021               BREQ    ??normal_7
   \   00000054   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_125:
   \   00000056   E001               LDI     R16, 1
   \   00000058   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_165:
   \   0000005A   C003               RJMP    ??normal_6
   \                     ??normal_7:
   \   0000005C   ....               RCALL   ?Subroutine43
    261           }
   \                     ??CrossCallReturnLabel_60:
   \   0000005E   E000               LDI     R16, 0
   \   00000060   ....               RCALL   ??migINI
    262               if (pultadr==5 || pultadr==65) {if (sel!=2)  {AC_OFF; lastsel=sel;sel=2; pult(); }  else  migINI(sel-1, 3 ,0); 
   \                     ??normal_6:
   \   00000062   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_140:
   \   00000064   3005               CPI     R16, 5
   \   00000066   F011               BREQ    ??normal_8
   \   00000068   3401               CPI     R16, 65
   \   0000006A   F451               BRNE    ??normal_9
   \                     ??normal_8:
   \   0000006C   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_281:
   \   0000006E   3002               CPI     R16, 2
   \   00000070   F021               BREQ    ??normal_10
   \   00000072   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_126:
   \   00000074   E002               LDI     R16, 2
   \   00000076   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_164:
   \   00000078   C003               RJMP    ??normal_9
   \                     ??normal_10:
   \   0000007A   ....               RCALL   ?Subroutine43
    263          }
   \                     ??CrossCallReturnLabel_61:
   \   0000007C   E001               LDI     R16, 1
   \   0000007E   ....               RCALL   ??migINI
    264               if (pultadr==10 || pultadr==70) {if (sel!=3) {AC_OFF; lastsel=sel;sel=3; pult(); } else    migINI(sel-1, 3 ,0); 
   \                     ??normal_9:
   \   00000080   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_141:
   \   00000082   300A               CPI     R16, 10
   \   00000084   F011               BREQ    ??normal_11
   \   00000086   3406               CPI     R16, 70
   \   00000088   F451               BRNE    ??normal_12
   \                     ??normal_11:
   \   0000008A   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_282:
   \   0000008C   3003               CPI     R16, 3
   \   0000008E   F021               BREQ    ??normal_13
   \   00000090   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_127:
   \   00000092   E003               LDI     R16, 3
   \   00000094   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_163:
   \   00000096   C003               RJMP    ??normal_12
   \                     ??normal_13:
   \   00000098   ....               RCALL   ?Subroutine43
    265          }
   \                     ??CrossCallReturnLabel_62:
   \   0000009A   E002               LDI     R16, 2
   \   0000009C   ....               RCALL   ??migINI
    266               if (pultadr==15 || pultadr==75) {if (sel!=4) {AC_OFF; lastsel=sel;sel=4; pult(); } else   migINI(sel-1, 3 ,0); 
   \                     ??normal_12:
   \   0000009E   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_142:
   \   000000A0   300F               CPI     R16, 15
   \   000000A2   F011               BREQ    ??normal_14
   \   000000A4   340B               CPI     R16, 75
   \   000000A6   F451               BRNE    ??normal_15
   \                     ??normal_14:
   \   000000A8   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_283:
   \   000000AA   3004               CPI     R16, 4
   \   000000AC   F021               BREQ    ??normal_16
   \   000000AE   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_128:
   \   000000B0   E004               LDI     R16, 4
   \   000000B2   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_162:
   \   000000B4   C003               RJMP    ??normal_15
   \                     ??normal_16:
   \   000000B6   ....               RCALL   ?Subroutine43
    267           }
   \                     ??CrossCallReturnLabel_63:
   \   000000B8   E003               LDI     R16, 3
   \   000000BA   ....               RCALL   ??migINI
    268               if ((pultadr==20  || pultadr==80) && mode!=1) { if (sel!=5) {AC_OFF; lastsel=sel;sel=5; pult();}  else  migINI(sel-1, 3 ,0); 
   \                     ??normal_15:
   \   000000BC   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_143:
   \   000000BE   3104               CPI     R16, 20
   \   000000C0   F011               BREQ    ??normal_17
   \   000000C2   3500               CPI     R16, 80
   \   000000C4   F479               BRNE    ??normal_18
   \                     ??normal_17:
   \   000000C6   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_315:
   \   000000C8   F051               BREQ    ??normal_19
   \   000000CA   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_284:
   \   000000CC   3005               CPI     R16, 5
   \   000000CE   F021               BREQ    ??normal_20
   \   000000D0   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_129:
   \   000000D2   E005               LDI     R16, 5
   \   000000D4   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_161:
   \   000000D6   C003               RJMP    ??normal_19
   \                     ??normal_20:
   \   000000D8   ....               RCALL   ?Subroutine43
    269          }
   \                     ??CrossCallReturnLabel_64:
   \   000000DA   E004               LDI     R16, 4
   \   000000DC   ....               RCALL   ??migINI
    270               
    271               
    272               //тыловые  ------------------------------------------------------
    273               if ((  pultadr==20  || pultadr==80) && mode==1) {  
   \                     ??normal_19:
   \   000000DE   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_144:
   \   000000E0   3104               CPI     R16, 20
   \   000000E2   F019               BREQ    ??normal_21
   \                     ??normal_18:
   \   000000E4   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_145:
   \   000000E6   3500               CPI     R16, 80
   \   000000E8   F4D9               BRNE    ??CrossCallReturnLabel_122
   \                     ??normal_21:
   \   000000EA   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_316:
   \   000000EC   F4C9               BRNE    ??CrossCallReturnLabel_122
    274                   
    275                 if (til==0) { SET(PORTC,5);til=1;  
   \   000000EE   9100....           LDS     R16, til
   \   000000F2   2300               TST     R16
   \   000000F4   F471               BRNE    ??normal_22
   \   000000F6   9AAD               SBI     0x15, 0x05
   \   000000F8   E001               LDI     R16, 1
   \   000000FA   9300....           STS     til, R16
    276                         for (uchar i=0; i<2; i++) {SET(PORTB,4);p2;RES(PORTB,4);p2;}  SET(PORTB,4);  pultadr=0;  p1;}
   \   000000FE   E002               LDI     R16, 2
   \                     ??normal_23:
   \   00000100   9AC4               SBI     0x18, 0x04
   \   00000102   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_249:
   \   00000104   98C4               CBI     0x18, 0x04
   \   00000106   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_250:
   \   00000108   950A               DEC     R16
   \   0000010A   F7D1               BRNE    ??normal_23
   \   0000010C   9AC4               SBI     0x18, 0x04
   \   0000010E   E000               LDI     R16, 0
   \   00000110   C005               RJMP    ??normal_24
    277                 else 
    278                 if (til==1) {   RES(PORTC,5); RES(PORTB,4); til=0; pultadr=0; p1; }
   \                     ??normal_22:
   \   00000112   98AD               CBI     0x15, 0x05
   \   00000114   98C4               CBI     0x18, 0x04
   \   00000116   E000               LDI     R16, 0
   \   00000118   9300....           STS     til, R16
   \                     ??normal_24:
   \   0000011C   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_381:
   \   0000011E   ....               RCALL   ?Subroutine73
    279               
    280                                                               }
    281             }//если есть команда с пульта
    282             
    283            //--------------- mute -------------------
    284            if (mute==1) AC_OFF; else { if (zader==0) AC_ON; }
   \                     ??CrossCallReturnLabel_122:
   \   00000120   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_299:
   \   00000122   F409               BRNE    $+2+2
   \   00000124   C09B               RJMP    ??normal_25
   \   00000126   9896               CBI     0x12, 0x06
    285            if (zader==1) {timerzad++;  if (timerzad> tON)  {zader=0;timerzad=0; if (mute!=1)AC_ON;} }//задержка включения
   \                     ??normal_26:
   \   00000128   9100....           LDS     R16, zader
   \   0000012C   2300               TST     R16
   \   0000012E   F099               BREQ    ??normal_27
   \   00000130   ....               LDI     R30, LOW(timerzad)
   \   00000132   ....               LDI     R31, (timerzad) >> 8
   \   00000134   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_45:
   \   00000136   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_367:
   \   00000138   ....               LDI     R30, LOW(tON)
   \   0000013A   ....               LDI     R31, (tON) >> 8
   \   0000013C   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_323:
   \   0000013E   ....               LDI     R30, LOW(timerzad)
   \   00000140   ....               LDI     R31, (timerzad) >> 8
   \   00000142   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_205:
   \   00000144   1702               CP      R16, R18
   \   00000146   0713               CPC     R17, R19
   \   00000148   F430               BRCC    ??normal_27
   \   0000014A   E000               LDI     R16, 0
   \   0000014C   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_245:
   \   0000014E   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_187:
   \   00000150   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_300:
   \   00000152   F409               BRNE    ??normal_27
   \                     ??normal_28:
   \   00000154   9A96               SBI     0x12, 0x06
    286            
    287             if ((keyMUTE ||pultadr==35 || pultadr==100) && mute==0) { AC_OFF; mute=1; p5; pultadr=0;}
   \                     ??normal_27:
   \   00000156   9981               SBIC    0x10, 0x01
   \   00000158   C002               RJMP    ??normal_29
   \   0000015A   9B85               SBIS    0x10, 0x05
   \   0000015C   C005               RJMP    ??normal_30
   \                     ??normal_29:
   \   0000015E   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_146:
   \   00000160   3203               CPI     R16, 35
   \   00000162   F011               BREQ    ??normal_30
   \   00000164   3604               CPI     R16, 100
   \   00000166   F429               BRNE    ??CrossCallReturnLabel_376
   \                     ??normal_30:
   \   00000168   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_301:
   \   0000016A   F419               BRNE    ??CrossCallReturnLabel_376
   \   0000016C   9896               CBI     0x12, 0x06
   \   0000016E   E001               LDI     R16, 1
   \   00000170   ....               RCALL   ?Subroutine9
    288             if ((keyMUTE ||pultadr==35 || pultadr==100) && mute==1) { AC_ON; mute=0; p5; pultadr=0; }   
   \                     ??CrossCallReturnLabel_376:
   \   00000172   9981               SBIC    0x10, 0x01
   \   00000174   C002               RJMP    ??normal_31
   \   00000176   9B85               SBIS    0x10, 0x05
   \   00000178   C005               RJMP    ??normal_32
   \                     ??normal_31:
   \   0000017A   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_147:
   \   0000017C   3203               CPI     R16, 35
   \   0000017E   F011               BREQ    ??normal_32
   \   00000180   3604               CPI     R16, 100
   \   00000182   F429               BRNE    ??CrossCallReturnLabel_377
   \                     ??normal_32:
   \   00000184   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_302:
   \   00000186   F019               BREQ    ??CrossCallReturnLabel_377
   \   00000188   9A96               SBI     0x12, 0x06
   \   0000018A   E000               LDI     R16, 0
   \   0000018C   ....               RCALL   ?Subroutine9
    289             
    290             
    291            //--------------- aoff --------------------
    292           
    293             
    294             if ((keyAOFF || pultadr==30 || pultadr==95) && aoff==1 && regaoff>=3)  {  RES(PORTB,5);  p5; aoff=0; regaoff=0; pultadr=0;}//отмена aoff 
   \                     ??CrossCallReturnLabel_377:
   \   0000018E   9980               SBIC    0x10, 0x00
   \   00000190   C002               RJMP    ??normal_33
   \   00000192   9B85               SBIS    0x10, 0x05
   \   00000194   C004               RJMP    ??normal_34
   \                     ??normal_33:
   \   00000196   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_132:
   \   00000198   F011               BREQ    ??normal_34
   \   0000019A   350F               CPI     R16, 95
   \   0000019C   F461               BRNE    ??CrossCallReturnLabel_382
   \                     ??normal_34:
   \   0000019E   9100....           LDS     R16, aoff
   \   000001A2   2300               TST     R16
   \   000001A4   F041               BREQ    ??CrossCallReturnLabel_382
   \   000001A6   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_166:
   \   000001A8   3003               CPI     R16, 3
   \   000001AA   F028               BRCS    ??CrossCallReturnLabel_382
   \   000001AC   98C5               CBI     0x18, 0x05
   \   000001AE   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_243:
   \   000001B0   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_235:
   \   000001B2   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_274:
   \   000001B4   ....               RCALL   ?Subroutine128
    295             
    296            if ((keyAOFF || pultadr==30 || pultadr==95) && regaoff==0) { aoff=1; regaoff++; iniT1(60*60*2)/*2 часа*/; pultadr=0;  for (uchar i=0; i<3; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??CrossCallReturnLabel_382:
   \   000001B6   9980               SBIC    0x10, 0x00
   \   000001B8   C002               RJMP    ??normal_35
   \   000001BA   9B85               SBIS    0x10, 0x05
   \   000001BC   C004               RJMP    ??normal_36
   \                     ??normal_35:
   \   000001BE   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_133:
   \   000001C0   F011               BREQ    ??normal_36
   \   000001C2   350F               CPI     R16, 95
   \   000001C4   F469               BRNE    ??normal_37
   \                     ??normal_36:
   \   000001C6   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_167:
   \   000001C8   2300               TST     R16
   \   000001CA   F451               BRNE    ??normal_37
   \   000001CC   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_236:
   \   000001CE   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_275:
   \   000001D0   E200               LDI     R16, 32
   \   000001D2   E11C               LDI     R17, 28
   \   000001D4   ....               RCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_59:
   \   000001D6   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_386:
   \   000001D8   E003               LDI     R16, 3
   \                     ??normal_38:
   \   000001DA   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_158:
   \   000001DC   F7F1               BRNE    ??normal_38
   \   000001DE   9AC5               SBI     0x18, 0x05
    297            if ((keyAOFF || pultadr==30 || pultadr==95) && regaoff==1) { aoff=1; regaoff++; iniT1(60*60*1)/*1 час*/; pultadr=0; for (uchar i=0; i<2; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??normal_37:
   \   000001E0   9980               SBIC    0x10, 0x00
   \   000001E2   C002               RJMP    ??normal_39
   \   000001E4   9B85               SBIS    0x10, 0x05
   \   000001E6   C004               RJMP    ??normal_40
   \                     ??normal_39:
   \   000001E8   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_134:
   \   000001EA   F011               BREQ    ??normal_40
   \   000001EC   350F               CPI     R16, 95
   \   000001EE   F471               BRNE    ??normal_41
   \                     ??normal_40:
   \   000001F0   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_168:
   \   000001F2   3001               CPI     R16, 1
   \   000001F4   F459               BRNE    ??normal_41
   \   000001F6   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_237:
   \   000001F8   E002               LDI     R16, 2
   \   000001FA   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_276:
   \   000001FC   E100               LDI     R16, 16
   \   000001FE   E01E               LDI     R17, 14
   \   00000200   ....               RCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_58:
   \   00000202   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_387:
   \   00000204   E002               LDI     R16, 2
   \                     ??normal_42:
   \   00000206   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_159:
   \   00000208   F7F1               BRNE    ??normal_42
   \   0000020A   9AC5               SBI     0x18, 0x05
    298            if ((keyAOFF || pultadr==30 || pultadr==95) && regaoff==2) { aoff=1; regaoff++; iniT1(60*60*0.5)/*0.5 часа*/; pultadr=0; for (uchar i=0; i<1; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5); }
   \                     ??normal_41:
   \   0000020C   9980               SBIC    0x10, 0x00
   \   0000020E   C002               RJMP    ??normal_43
   \   00000210   9B85               SBIS    0x10, 0x05
   \   00000212   C004               RJMP    ??normal_44
   \                     ??normal_43:
   \   00000214   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_135:
   \   00000216   F011               BREQ    ??normal_44
   \   00000218   350F               CPI     R16, 95
   \   0000021A   F479               BRNE    ??normal_45
   \                     ??normal_44:
   \   0000021C   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_169:
   \   0000021E   3002               CPI     R16, 2
   \   00000220   F461               BRNE    ??normal_45
   \   00000222   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_238:
   \   00000224   E003               LDI     R16, 3
   \   00000226   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_277:
   \   00000228   E008               LDI     R16, 8
   \   0000022A   E017               LDI     R17, 7
   \   0000022C   ....               RCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_57:
   \   0000022E   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_388:
   \   00000230   9AC5               SBI     0x18, 0x05
   \   00000232   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_155:
   \   00000234   98C5               CBI     0x18, 0x05
   \   00000236   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_156:
   \   00000238   9AC5               SBI     0x18, 0x05
    299            
    300             
    301           //  if ((keyAOFF || pultadr==30 || pultadr==95) && aoff==0) 
    302           //     {   aoff=1;  iniT1(60*60*2)/*2 часа*/; pultadr=0;
    303           //         for (uchar i=0; i<2; i++)  {SET(PORTB,5);p2;RES(PORTB,5);p2;}  SET(PORTB,5);
    304            //   
    305            //        
    306           //         for (uint i=0; i<1000; i++)
    307           //         {   char rez=du_main(0);  if (rez==1) { pultadr=analizCOD();break; }}
    308           //         
    309            //    //если user продолжает удерживать
    310            //    if ((keyAOFF || pultadr==30 || pultadr==95) ) { iniT1(60*30);/*30 мин*/
    311           //      for (uchar i=0; i<4; i++)  {SET(PORTB,5);p2;p2;p2;p2;p2;RES(PORTB,5);p2;}  SET(PORTB,5);
    312            //                                    }
    313            //    
    314             //   }
    315                                                                  
    316             
    317            
    318           
    319            if (aoff==1)  {    WorkT1(); if (T1end) { on=0; onok=0;  aoff=0; p5; zader=0; regaoff=0;}
   \                     ??normal_45:
   \   0000023A   9100....           LDS     R16, aoff
   \   0000023E   2300               TST     R16
   \   00000240   F039               BREQ    ??CrossCallReturnLabel_273
   \   00000242   ....               RCALL   ??WorkT1
   \   00000244   9100....           LDS     R16, T1end
   \   00000248   2300               TST     R16
   \   0000024A   F011               BREQ    ??CrossCallReturnLabel_273
   \   0000024C   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_15:
   \   0000024E   ....               RCALL   ?Subroutine15
    320                          } 
    321                          
    322           //--------------- select -------------------
    323                          if ( !u ) {//что бы во время работы UART не срабатывал
   \                     ??CrossCallReturnLabel_273:
   \   00000250   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_305:
   \   00000252   F5E1               BRNE    ??normal_46
    324             uchar kol;  if  (mode==1) kol=4; else kol=5;
   \   00000254   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_317:
   \   00000256   F441               BRNE    ??normal_47
   \   00000258   E004               LDI     R16, 4
   \   0000025A   C007               RJMP    ??normal_48
   \                     ??normal_25:
   \   0000025C   9100....           LDS     R16, zader
   \   00000260   2300               TST     R16
   \   00000262   F009               BREQ    $+2+2
   \   00000264   CF61               RJMP    ??normal_26
   \   00000266   CF76               RJMP    ??normal_28
   \                     ??normal_47:
   \   00000268   E005               LDI     R16, 5
    325             if (keySEL ||pultadr==40 || pultadr==105) 
   \                     ??normal_48:
   \   0000026A   9981               SBIC    0x10, 0x01
   \   0000026C   C002               RJMP    ??normal_49
   \   0000026E   9985               SBIC    0x10, 0x05
   \   00000270   C006               RJMP    ??normal_50
   \                     ??normal_49:
   \   00000272   9110....           LDS     R17, pultadr
   \   00000276   3218               CPI     R17, 40
   \   00000278   F011               BREQ    ??normal_50
   \   0000027A   3619               CPI     R17, 105
   \   0000027C   F499               BRNE    ??CrossCallReturnLabel_160
    326                          { 
    327                                  if (sel<=(kol-1)) { AC_OFF; p2; RES(PORTB,(sel-1));lastsel=sel; sel++; pult(); } 
   \                     ??normal_50:
   \   0000027E   950A               DEC     R16
   \   00000280   9110....           LDS     R17, ??sel
   \   00000284   1701               CP      R16, R17
   \   00000286   9896               CBI     0x12, 0x06
   \   00000288   F030               BRCS    ??normal_51
   \   0000028A   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_157:
   \   0000028C   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_278:
   \   0000028E   9300....           STS     ??lastsel, R16
   \   00000292   9503               INC     R16
   \   00000294   C006               RJMP    ??normal_52
    328                                 else { AC_OFF;  RES(PORTB,(sel-1)); sel=1; pult(); }
   \                     ??normal_51:
   \   00000296   9140....           LDS     R20, ??sel
   \   0000029A   954A               DEC     R20
   \   0000029C   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_176:
   \   0000029E   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_232:
   \   000002A0   E001               LDI     R16, 1
    329                        
    330                          }
   \                     ??normal_52:
   \   000002A2   ....               RCALL   ?Subroutine87
    331                                   
    332            //--------------- return sel -------------------  возврат в предыдущий source                 
    333             if ( pultadr==55 || pultadr==85) {
   \                     ??CrossCallReturnLabel_160:
   \   000002A4   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_148:
   \   000002A6   3307               CPI     R16, 55
   \   000002A8   F011               BREQ    ??normal_53
   \   000002AA   3505               CPI     R16, 85
   \   000002AC   F479               BRNE    ??normal_46
    334               
    335               if (sel!=lastsel) {
   \                     ??normal_53:
   \   000002AE   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_285:
   \   000002B0   9110....           LDS     R17, ??lastsel
   \   000002B4   1701               CP      R16, R17
   \   000002B6   F051               BREQ    ??normal_46
    336                 AC_OFF;  RES(PORTB,(sel-1)); uchar tmp1=sel; sel=lastsel;  lastsel=tmp1; pultadr=0;  pult();
   \   000002B8   9896               CBI     0x12, 0x06
   \   000002BA   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_279:
   \   000002BC   9110....           LDS     R17, ??lastsel
   \   000002C0   9310....           STS     ??sel, R17
   \   000002C4   9300....           STS     ??lastsel, R16
   \   000002C8   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_389:
   \   000002CA   ....               RCALL   ??pult
    337               }
    338                                                }
    339                        
    340                                    }//что бы во время работы UART не срабатывал
    341                                     
    342                                    
    343                           
    344           //--------------- ГРОМКОСТЬ -------------------
    345                                 static bool vol;
    346                                 static uint ctvol=0;
    347                                 if (pultadr==45 || pultadr==110) {SET(PORTB,2); vol=true; ctvol=0;}
   \                     ??normal_46:
   \   000002CC   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_149:
   \   000002CE   320D               CPI     R16, 45
   \   000002D0   F011               BREQ    ??normal_54
   \   000002D2   360E               CPI     R16, 110
   \   000002D4   F411               BRNE    ??normal_55
   \                     ??normal_54:
   \   000002D6   9AC2               SBI     0x18, 0x02
   \   000002D8   C005               RJMP    ??normal_56
    348                                 else // { gro(1); p5;  pultadr=0; }
    349                                 {
    350                                   if (pultadr==50 || pultadr==115) {SET(PORTB,3);vol=true;ctvol=0;}//{ gro(2); p5;  pultadr=0; }  
   \                     ??normal_55:
   \   000002DA   3302               CPI     R16, 50
   \   000002DC   F011               BREQ    ??normal_57
   \   000002DE   3703               CPI     R16, 115
   \   000002E0   F449               BRNE    ??normal_58
   \                     ??normal_57:
   \   000002E2   9AC3               SBI     0x18, 0x03
   \                     ??normal_56:
   \   000002E4   E001               LDI     R16, 1
   \   000002E6   9300....           STS     ??vol, R16
   \   000002EA   E000               LDI     R16, 0
   \   000002EC   ....               LDI     R30, LOW(??ctvol)
   \   000002EE   ....               LDI     R31, (??ctvol) >> 8
   \   000002F0   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_188:
   \   000002F2   C010               RJMP    ??normal_59
    351                                  else 
    352                                  {
    353                                   
    354                                   if (vol)
   \                     ??normal_58:
   \   000002F4   9100....           LDS     R16, ??vol
   \   000002F8   2300               TST     R16
   \   000002FA   F061               BREQ    ??normal_59
    355                                   {
    356                                    ctvol++;
   \   000002FC   ....               LDI     R30, LOW(??ctvol)
   \   000002FE   ....               LDI     R31, (??ctvol) >> 8
   \   00000300   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_46:
   \   00000302   ....               RCALL   ??Subroutine141_0
    357                                    if (ctvol>300){ vol=false; RES(PORTB,2); RES(PORTB,3); }
   \                     ??CrossCallReturnLabel_368:
   \   00000304   320D               CPI     R16, 45
   \   00000306   4011               SBCI    R17, 1
   \   00000308   F028               BRCS    ??normal_59
   \   0000030A   E000               LDI     R16, 0
   \   0000030C   9300....           STS     ??vol, R16
   \   00000310   98C2               CBI     0x18, 0x02
   \   00000312   98C3               CBI     0x18, 0x03
    358                                   }
    359                                  }
    360                                  }
    361                          
    362           
    363                                    
    364                                    
    365             
    366             
    367          }
   \                     ??normal_59:
   \   00000314   ....               RJMP    ?Subroutine130
   \   00000316                      REQUIRE _A_PORTD
   \   00000316                      REQUIRE _A_PORTC
   \   00000316                      REQUIRE _A_PORTB
   \   00000316                      REQUIRE _A_PIND

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   9100....           LDS     R16, ??regaoff
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   9100....           LDS     R16, mute
   \   00000004   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   EF4F               LDI     R20, 255
   \   00000002   E750               LDI     R21, 112
   \   00000004   E062               LDI     R22, 2
   \   00000006   5041               SUBI    R20, 1
   \   00000008   4050               SBCI    R21, 0
   \   0000000A   4060               SBCI    R22, 0
   \   0000000C   F7E1               BRNE    $-6
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   9300....           STS     ??sel, R16
   \   00000004   ....               RJMP    ??pult

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   9AC5               SBI     0x18, 0x05
   \   00000002   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_251:
   \   00000004   98C5               CBI     0x18, 0x05
   \   00000006   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_252:
   \   00000008   950A               DEC     R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   9100....           LDS     R16, pultadr
   \   00000004   310E               CPI     R16, 30
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   9896               CBI     0x12, 0x06
   \   00000002   9100....           LDS     R16, ??sel
   \   00000006   9300....           STS     ??lastsel, R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   E020               LDI     R18, 0
   \   00000002   E013               LDI     R17, 3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
   \   00000004   ....               RJMP    ??iniT1

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   9300....           STS     mute, R16
   \   00000004   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_262:
   \   00000006                      REQUIRE ??Subroutine143_0
   \   00000006                      ;               // Fall through to label ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   E001               LDI     R16, 1
   \   00000002                      REQUIRE ?Subroutine112
   \   00000002                      ;               // Fall through to label ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   9140....           LDS     R20, ??sel
   \   00000004   954A               DEC     R20
   \   00000006   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_179:
   \   00000008   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_233:
   \   0000000A                      REQUIRE ?Subroutine129
   \   0000000A                      ;               // Fall through to label ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   9100....           LDS     R16, ??sel
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   9500               COM     R16
   \   00000002   B318               IN      R17, 0x18
   \   00000004   2310               AND     R17, R16
   \   00000006   BB18               OUT     0x18, R17
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   9100....           LDS     R16, mode
   \   00000004   ....               RJMP    ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   E00D               LDI     R16, 13
   \   00000002   ....               RJMP    ??USART_SendChar

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   ....               RCALL   ??rprintfStr
   \   00000002   ....               RJMP    ?Subroutine105

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??inv:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??vol:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??ctvol:
   \   00000000                      DS8 2
    368           //------------------------------------------

   \                                 In  segment CODE, align 2, keep-with-next
    369          void source()
   \                     ??source:
    370          {  
    371           
    372            
    373             
    374            if (sel==1){ resOUT(); resled(); SET(PORTC,1);}
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_286:
   \   00000002   3001               CPI     R16, 1
   \   00000004   F411               BRNE    ??source_1
   \   00000006   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_154:
   \   00000008   9AA9               SBI     0x15, 0x01
    375            if (sel==2){ resOUT(); resled(); SET(PORTC,2);}
   \                     ??source_1:
   \   0000000A   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_287:
   \   0000000C   3002               CPI     R16, 2
   \   0000000E   F411               BRNE    ??source_2
   \   00000010   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_153:
   \   00000012   9AAA               SBI     0x15, 0x02
    376            if (sel==3){ resOUT(); resled(); SET(PORTC,3);}
   \                     ??source_2:
   \   00000014   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_288:
   \   00000016   3003               CPI     R16, 3
   \   00000018   F411               BRNE    ??source_3
   \   0000001A   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_152:
   \   0000001C   9AAB               SBI     0x15, 0x03
    377            if (sel==4){ resOUT(); resled();SET(PORTC,4);}
   \                     ??source_3:
   \   0000001E   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_289:
   \   00000020   3004               CPI     R16, 4
   \   00000022   F411               BRNE    ??source_4
   \   00000024   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_151:
   \   00000026   9AAC               SBI     0x15, 0x04
    378            if (sel==5 && mode==0 ){  resOUT(); resled();SET(PORTC,5);}
   \                     ??source_4:
   \   00000028   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_290:
   \   0000002A   3005               CPI     R16, 5
   \   0000002C   F421               BRNE    ??source_5
   \   0000002E   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_296:
   \   00000030   F411               BRNE    ??source_5
   \   00000032   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_150:
   \   00000034   9AAD               SBI     0x15, 0x05
    379            
    380            if (mute!=1 ) if (zader==0) AC_ON;//вкл АС
   \                     ??source_5:
   \   00000036   9100....           LDS     R16, mute
   \   0000003A   9110....           LDS     R17, zader
   \   0000003E   2B01               OR      R16, R17
   \   00000040   F409               BRNE    ??source_6
   \   00000042   9A96               SBI     0x12, 0x06
    381           
    382             migINI(sel-1, 5 ,0); 
   \                     ??source_6:
   \   00000044   E020               LDI     R18, 0
   \   00000046   E015               LDI     R17, 5
   \   00000048   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_291:
   \   0000004A   950A               DEC     R16
   \   0000004C   ....               RJMP    ??migINI
   \   0000004E                      REQUIRE _A_PORTC
   \   0000004E                      REQUIRE _A_PORTD
    383           
    384          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   ....               RCALL   ??resOUT
   \   00000002   ....               RJMP    ??resled
    385          
    386          
    387          
    388          
    389          
    390          
    391          
    392          
    393          
    394          
    395          
    396          
    397          
    398          
    399          
    400          

   \                                 In  segment CODE, align 2, keep-with-next
    401          void programming (uchar rez)
   \                     ??programming:
    402          {  
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    403             if (tekfunc==255) return;
   \   00000004   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_255:
   \   00000006   3F0F               CPI     R16, 255
   \   00000008   F111               BREQ    ??CrossCallReturnLabel_394
    404             if (!get)  { getadr(); get=1; }//получаем адрес и зажигаем программируемую функцию
   \   0000000A   9100....           LDS     R16, ??get
   \   0000000E   2300               TST     R16
   \   00000010   F421               BRNE    ??programming_1
   \   00000012   ....               RCALL   ??getadr
   \   00000014   E001               LDI     R16, 1
   \   00000016   9300....           STS     ??get, R16
    405             if (rez==1)
   \                     ??programming_1:
   \   0000001A   3081               CPI     R24, 1
   \   0000001C   F451               BRNE    ??CrossCallReturnLabel_395
    406             {
    407               writeCOD();
   \   0000001E   ....               RCALL   ??writeCOD
    408               tekfunc++;  get=0;
   \   00000020   ....               RCALL   ?Subroutine11
    409              if (tekfunc==12) {  for (uchar i=0; i<10;i++) 
   \                     ??CrossCallReturnLabel_8:
   \   00000022   F419               BRNE    ??programming_2
   \   00000024   E08A               LDI     R24, 10
    410                                     {led_all(1); p4; led_all(0);p4; }
   \                     ??programming_3:
   \   00000026   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000028   F7F1               BRNE    ??programming_3
    411                                }
    412               if (tekfunc>MAXFUNC) {tekfunc=255;led_all(1);}
   \                     ??programming_2:
   \   0000002A   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_256:
   \   0000002C   3108               CPI     R16, 24
   \   0000002E   F008               BRCS    ??CrossCallReturnLabel_395
   \   00000030   ....               RCALL   ?Subroutine6
    413          
    414             }
    415             
    416             
    417             if (keyONsm) { 
   \                     ??CrossCallReturnLabel_395:
   \   00000032   9985               SBIC    0x10, 0x05
   \   00000034   C00C               RJMP    ??CrossCallReturnLabel_394
    418                          led_all(1); delay_s(1); 
   \   00000036   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_391:
   \   00000038   ....               RCALL   ?Subroutine79
    419                          led_all(0); 
   \                     ??CrossCallReturnLabel_131:
   \   0000003A   ....               RCALL   ?Subroutine16
    420                          tekfunc++;  get=0;
   \                     ??CrossCallReturnLabel_17:
   \   0000003C   ....               RCALL   ?Subroutine11
    421                             if (tekfunc==12) {  for (uchar i=0; i<10;i++) 
   \                     ??CrossCallReturnLabel_9:
   \   0000003E   F419               BRNE    ??programming_4
   \   00000040   E08A               LDI     R24, 10
    422                                     {led_all(1); p4; led_all(0);p4; }
   \                     ??programming_5:
   \   00000042   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000044   F7F1               BRNE    ??programming_5
    423                                }
    424                          if (tekfunc>MAXFUNC) {tekfunc=255;led_all(1);}
   \                     ??programming_4:
   \   00000046   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_257:
   \   00000048   3108               CPI     R16, 24
   \   0000004A   F008               BRCS    ??CrossCallReturnLabel_394
   \   0000004C   ....               RCALL   ?Subroutine6
    425                         
    426                           }
    427               
    428          }
   \                     ??CrossCallReturnLabel_394:
   \   0000004E                      REQUIRE ?Subroutine130
   \   0000004E                      REQUIRE _A_PIND
   \   0000004E                      ;               // Fall through to label ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               LDI     R30, LOW(tekfunc)
   \   00000002   ....               LDI     R31, (tekfunc) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   9503               INC     R16
   \   00000008   8300               ST      Z, R16
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     ??get, R16
   \   00000010   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_258:
   \   00000012   300C               CPI     R16, 12
   \   00000014   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   9100....           LDS     R16, tekfunc
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   9300....           STS     tekfunc, R16
   \   00000006                      REQUIRE ??Subroutine144_0
   \   00000006                      ;               // Fall through to label ??Subroutine144_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_253:
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_254:
   \   00000008   958A               DEC     R24
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   ....               RCALL   ??led_all
   \   00000002   EF0F               LDI     R16, 255
   \   00000004   EE11               LDI     R17, 225
   \   00000006   E024               LDI     R18, 4
   \   00000008   5001               SUBI    R16, 1
   \   0000000A   4010               SBCI    R17, 0
   \   0000000C   4020               SBCI    R18, 0
   \   0000000E   F7E1               BRNE    $-6
   \   00000010   C000               RJMP    $+2
   \   00000012   0000               NOP
   \   00000014   9508               RET
    429          //--------------------------------------------------------------------
    430          

   \                                 In  segment CODE, align 2, keep-with-next
    431          void writeCOD()
   \                     ??writeCOD:
    432          {
   \   00000000   938A               ST      -Y, R24
    433            rprintfStr("write ..");
   \   00000002   ....               LDI     R16, LOW(`?<Constant "write ..">`)
   \   00000004   ....               LDI     R17, (`?<Constant "write ..">`) >> 8
   \   00000006   ....               RCALL   ??rprintfStr
    434            led_all(1);delay_s(3);
   \   00000008   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_390:
   \   0000000A   EF0F               LDI     R16, 255
   \   0000000C   E91E               LDI     R17, 158
   \   0000000E   E224               LDI     R18, 36
   \   00000010   5001               SUBI    R16, 1
   \   00000012   4010               SBCI    R17, 0
   \   00000014   4020               SBCI    R18, 0
   \   00000016   F7E1               BRNE    $-6
   \   00000018   C000               RJMP    $+2
   \   0000001A   0000               NOP
    435            uchar adr=getadr();
   \   0000001C   ....               RCALL   ??getadr
   \   0000001E   2F80               MOV     R24, R16
    436            led_all(0);
   \   00000020   ....               RCALL   ?Subroutine16
    437            
    438                 
    439                 k[adr]=cod1; delay_ms(30);
   \                     ??CrossCallReturnLabel_16:
   \   00000022   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_71:
   \   00000024   ....               LDI     R18, LOW(k)
   \   00000026   ....               LDI     R19, (k) >> 8
   \   00000028   0D20               ADD     R18, R0
   \   0000002A   1D31               ADC     R19, R1
   \   0000002C   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_211:
   \   0000002E   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_324:
   \   00000030   ....               RCALL   ?Subroutine91
    440                 k[adr+1]=cod2; delay_ms(30);
   \                     ??CrossCallReturnLabel_396:
   \   00000032   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_404:
   \   00000034   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_325:
   \   00000036   01A9               MOVW    R21:R20, R19:R18
   \   00000038   5F4E               SUBI    R20, 254
   \   0000003A   4F5F               SBCI    R21, 255
   \   0000003C   ....               RCALL   ??Subroutine145_0
    441                 k[adr+2]=cod3; delay_ms(30);
   \                     ??CrossCallReturnLabel_398:
   \   0000003E   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_330:
   \   00000040   5F2C               SUBI    R18, 252
   \   00000042   4F3F               SBCI    R19, 255
   \   00000044   ....               RCALL   ?Subroutine91
    442                 
    443                 rprintfStr("OK !   "); ent;
   \                     ??CrossCallReturnLabel_397:
   \   00000046   ....               LDI     R16, LOW(`?<Constant "OK !   ">`)
   \   00000048   ....               LDI     R17, (`?<Constant "OK !   ">`) >> 8
   \   0000004A   ....               RCALL   ??rprintfStr
   \   0000004C   ....               RCALL   ??Subroutine17_2
    444             
    445          }
   \                     ??CrossCallReturnLabel_24:
   \   0000004E   ....               RJMP    ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   01A9               MOVW    R21:R20, R19:R18
   \   00000002                      REQUIRE ??Subroutine145_0
   \   00000002                      ;               // Fall through to label ??Subroutine145_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine145_0:
   \   00000000   ....               RCALL   __eeput16_16
   \   00000002   E20F               LDI     R16, 47
   \   00000004   E715               LDI     R17, 117
   \   00000006   5001               SUBI    R16, 1
   \   00000008   4010               SBCI    R17, 0
   \   0000000A   F7E9               BRNE    $-4
   \   0000000C   C000               RJMP    $+2
   \   0000000E   0000               NOP
   \   00000010   9508               RET
    446          
    447          
    448          
    449           

   \                                 In  segment CODE, align 2, keep-with-next
    450          uchar analizCOD ()
   \                     ??analizCOD:
    451          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
    452           uint i;
    453            for (i=0; i<MAXEEP-4; i++) 
   \   00000002   E080               LDI     R24, 0
   \   00000004   E090               LDI     R25, 0
    454            {
    455             // if ((kbuf[i])==cod1)  if ((kbuf[i+1])==cod2) if ((kbuf[i+2])==cod3) return(i);
    456              if ((k[i])==cod1)  if ((k[i+1])==cod2) if ((k[i+2])==cod3) return(i);   
   \                     ??analizCOD_1:
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   0F00               LSL     R16
   \   0000000A   1F11               ROL     R17
   \   0000000C   ....               LDI     R18, LOW(k)
   \   0000000E   ....               LDI     R19, (k) >> 8
   \   00000010   0F20               ADD     R18, R16
   \   00000012   1F31               ADC     R19, R17
   \   00000014   01A9               MOVW    R21:R20, R19:R18
   \   00000016   ....               RCALL   __eeget16_16
   \   00000018   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_212:
   \   0000001A   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_101:
   \   0000001C   F489               BRNE    ??analizCOD_2
   \   0000001E   01A9               MOVW    R21:R20, R19:R18
   \   00000020   5F4E               SUBI    R20, 254
   \   00000022   4F5F               SBCI    R21, 255
   \   00000024   ....               RCALL   __eeget16_16
   \   00000026   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_405:
   \   00000028   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_102:
   \   0000002A   F451               BRNE    ??analizCOD_2
   \   0000002C   5F2C               SUBI    R18, 252
   \   0000002E   4F3F               SBCI    R19, 255
   \   00000030   01A9               MOVW    R21:R20, R19:R18
   \   00000032   ....               RCALL   __eeget16_16
   \   00000034   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_54:
   \   00000036   1702               CP      R16, R18
   \   00000038   0713               CPC     R17, R19
   \   0000003A   F411               BRNE    ??analizCOD_2
   \   0000003C   2F08               MOV     R16, R24
   \   0000003E   C005               RJMP    ??analizCOD_3
    457            }
   \                     ??analizCOD_2:
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   3784               CPI     R24, 116
   \   00000044   E000               LDI     R16, 0
   \   00000046   0790               CPC     R25, R16
   \   00000048   F2F0               BRCS    ??analizCOD_1
    458          
    459          return(0);
   \                     ??analizCOD_3:
   \   0000004A                      REQUIRE ?Subroutine137
   \   0000004A                      ;               // Fall through to label ?Subroutine137
    460          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine137:
   \   00000000   E0E2               LDI     R30, 2
   \   00000002   ....               RJMP    ?EPILOGUE_B2_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004   1704               CP      R16, R20
   \   00000006   0715               CPC     R17, R21
   \   00000008   9508               RET
    461          
    462          
    463          

   \                                 In  segment CODE, align 2, keep-with-next
    464          void resled(void)
   \                     ??resled:
    465          {
    466            RES(PORTB,0);RES(PORTB,1);RES(PORTB,2);RES(PORTB,3); if (mode==0)RES(PORTB,4);
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_170:
   \   00000002   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_297:
   \   00000004   F409               BRNE    ??resled_1
   \   00000006   98C4               CBI     0x18, 0x04
    467          }
   \                     ??resled_1:
   \   00000008   9508               RET
   \   0000000A                      REQUIRE _A_PORTB

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   98C0               CBI     0x18, 0x00
   \   00000002   98C1               CBI     0x18, 0x01
   \   00000004   98C2               CBI     0x18, 0x02
   \   00000006   98C3               CBI     0x18, 0x03
   \   00000008   9508               RET
    468          
    469          

   \                                 In  segment CODE, align 2, keep-with-next
    470          void resOUT(void)
   \                     ??resOUT:
    471          {
    472            RES(PORTC,1);RES(PORTC,2);RES(PORTC,3);RES(PORTC,4); if (mode==0)RES(PORTC,5);
   \   00000000   98A9               CBI     0x15, 0x01
   \   00000002   98AA               CBI     0x15, 0x02
   \   00000004   98AB               CBI     0x15, 0x03
   \   00000006   98AC               CBI     0x15, 0x04
   \   00000008   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_298:
   \   0000000A   F409               BRNE    ??resOUT_1
   \   0000000C   98AD               CBI     0x15, 0x05
    473            p2;//что бы не было перекрытия источников
   \                     ??resOUT_1:
   \   0000000E                      REQUIRE ?Subroutine84
   \   0000000E                      REQUIRE _A_PORTC
   \   0000000E                      ;               // Fall through to label ?Subroutine84
    474          }
    475          
    476          
    477           

   \                                 In  segment CODE, align 2, keep-with-next
    478          void led_all(bool a)
   \                     ??led_all:
    479          {
    480           if (a)
   \   00000000   2300               TST     R16
   \   00000002   F039               BREQ    ??led_all_1
    481           {
    482             SET(PORTB,0);SET(PORTB,1);SET(PORTB,2);SET(PORTB,3);SET(PORTB,4);SET(PORTB,5);
   \   00000004   9AC0               SBI     0x18, 0x00
   \   00000006   9AC1               SBI     0x18, 0x01
   \   00000008   9AC2               SBI     0x18, 0x02
   \   0000000A   9AC3               SBI     0x18, 0x03
   \   0000000C   9AC4               SBI     0x18, 0x04
   \   0000000E   9AC5               SBI     0x18, 0x05
    483             /*AC_ON; */SET(PORTD,7);
   \   00000010   ....               RJMP    ?Subroutine132
    484           }
    485           else
    486            {
    487             RES(PORTB,0);RES(PORTB,1);RES(PORTB,2);RES(PORTB,3);RES(PORTB,4);RES(PORTB,5);
   \                     ??led_all_1:
   \   00000012   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_171:
   \   00000014   98C4               CBI     0x18, 0x04
   \   00000016   98C5               CBI     0x18, 0x05
    488             AC_OFF; RES(PORTD,7);
   \   00000018   9896               CBI     0x12, 0x06
   \   0000001A   9897               CBI     0x12, 0x07
    489           } 
    490          }
   \   0000001C   9508               RET
   \   0000001E                      REQUIRE _A_PORTB
   \   0000001E                      REQUIRE _A_PORTD
    491          
    492          

   \                                 In  segment CODE, align 2, keep-with-next
    493          void gro(uchar a)
   \                     ??gro:
    494          {
   \   00000000   2F10               MOV     R17, R16
    495            if (modegro!=1) {
   \   00000002   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_314:
   \   00000004   F051               BREQ    ??gro_1
    496            if (a==1) {SET(PORTC,0); delay_us(100);RES(PORTC,0);}
   \   00000006   3011               CPI     R17, 1
   \   00000008   F419               BRNE    ??gro_2
   \   0000000A   9AA8               SBI     0x15, 0x00
   \   0000000C   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_172:
   \   0000000E   C00E               RJMP    ??gro_3
    497            if (a==2) {SET(PORTD,3); delay_us(100);RES(PORTD,3);}  
   \                     ??gro_2:
   \   00000010   3012               CPI     R17, 2
   \   00000012   F511               BRNE    ??gro_4
   \   00000014   9A93               SBI     0x12, 0x03
   \   00000016   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_173:
   \   00000018   C019               RJMP    ??gro_5
    498                            }
    499            else  { 
    500              if (a==1) { if (gro1)  { gro1=0; RES(PORTC,0);  } else { gro1=1; SET(PORTC,0);  } }
   \                     ??gro_1:
   \   0000001A   3011               CPI     R17, 1
   \   0000001C   F471               BRNE    ??gro_6
   \   0000001E   9100....           LDS     R16, ??gro1
   \   00000022   2300               TST     R16
   \   00000024   F029               BREQ    ??gro_7
   \   00000026   E000               LDI     R16, 0
   \   00000028   9300....           STS     ??gro1, R16
   \                     ??gro_3:
   \   0000002C   98A8               CBI     0x15, 0x00
   \   0000002E   9508               RET
   \                     ??gro_7:
   \   00000030   E001               LDI     R16, 1
   \   00000032   9300....           STS     ??gro1, R16
   \   00000036   9AA8               SBI     0x15, 0x00
   \   00000038   9508               RET
    501              if (a==2) { if (gro2)  { gro2=0; RES(PORTD,3);  } else { gro2=1; SET(PORTD,3);  } }
   \                     ??gro_6:
   \   0000003A   3012               CPI     R17, 2
   \   0000003C   F469               BRNE    ??gro_4
   \   0000003E   9100....           LDS     R16, ??gro2
   \   00000042   2300               TST     R16
   \   00000044   F029               BREQ    ??gro_8
   \   00000046   E000               LDI     R16, 0
   \   00000048   9300....           STS     ??gro2, R16
   \                     ??gro_5:
   \   0000004C   9893               CBI     0x12, 0x03
   \   0000004E   9508               RET
   \                     ??gro_8:
   \   00000050   E001               LDI     R16, 1
   \   00000052   9300....           STS     ??gro2, R16
   \   00000056   9A93               SBI     0x12, 0x03
    502                  }
    503          }
   \                     ??gro_4:
   \   00000058   9508               RET
   \   0000005A                      REQUIRE _A_PORTC
   \   0000005A                      REQUIRE _A_PORTD

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   E805               LDI     R16, 133
   \   00000002   950A               DEC     R16
   \   00000004   F7F1               BRNE    $-2
   \   00000006   0000               NOP
   \   00000008   9508               RET
    504          
    505          
    506          
    507          
    508          
    509          
    510          //инициализация портов

   \                                 In  segment CODE, align 2, keep-with-next
    511          void iniPORTS()
   \                     ??iniPORTS:
    512          {
    513            
    514           
    515            //DDRx=0 - ВХОДЫ   PORTx = 0xFF; //подключаем нагрузочные резисторы
    516           //---------------------------------------------------------------
    517           //DDRx=0xFF - ВЫХОДЫ    PORTx = 0; //устанавливаем 0 на выходе
    518           
    519            
    520           DDRD = b(11011000);// 0xD8;  //PD3 4 6 7 ВЫХОДЫ  b11011000
   \   00000000   ED08               LDI     R16, 216
   \   00000002   BB01               OUT     0x11, R16
    521           PORTD = (uchar)~(b(11011000)); 
   \   00000004   E207               LDI     R16, 39
   \   00000006   BB02               OUT     0x12, R16
    522          
    523           
    524           DDRB = 0x3F; //порт B - выход    6,7-кварц
   \   00000008   E30F               LDI     R16, 63
   \   0000000A   BB07               OUT     0x17, R16
    525           PORTB = 0x00; 
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   BB08               OUT     0x18, R16
    526            
    527            
    528            DDRC =0xFF; 
   \   00000010   EF0F               LDI     R16, 255
   \   00000012   BB04               OUT     0x14, R16
    529            PORTC = 0x00; //устанавливаем 0 на выходе
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB05               OUT     0x15, R16
    530            
    531           
    532          // Timer(s)/Counter(s) Interrupt(s) initialization
    533          TIMSK=0x00;  
   \   00000018   BF09               OUT     0x39, R16
    534          TCNT0=0x00;
   \   0000001A   BF02               OUT     0x32, R16
    535          OCR1A=0x00;
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   BD0B               OUT     0x2B, R16
   \   00000020   BD0A               OUT     0x2A, R16
    536          OCR1B=0x00;
   \   00000022   BD09               OUT     0x29, R16
   \   00000024   BD08               OUT     0x28, R16
    537          TCCR1A=0x00;
   \   00000026   BD0F               OUT     0x2F, R16
    538            SET(TIMSK,TOIE1);//разреш прерывание при переполнении
   \   00000028   B709               IN      R16, 0x39
   \   0000002A   6004               ORI     R16, 0x04
   \   0000002C   BF09               OUT     0x39, R16
    539             TCCR1B=0; TIFR = 0xFF;  
   \   0000002E   BD1E               OUT     0x2E, R17
   \   00000030   EF0F               LDI     R16, 255
   \   00000032   BF08               OUT     0x38, R16
    540          TCNT1H=0x00;
   \   00000034   BD1D               OUT     0x2D, R17
    541          TCNT1L=0x00;
   \   00000036   BD1C               OUT     0x2C, R17
    542          ICR1H=0x00;
   \   00000038   BD17               OUT     0x27, R17
    543          ICR1L=0x00;
   \   0000003A   BD16               OUT     0x26, R17
    544          OCR1AH=0;
   \   0000003C   BD1B               OUT     0x2B, R17
    545          OCR1AL=0x00;
   \   0000003E   BD1A               OUT     0x2A, R17
    546          OCR1BH=0x00;
   \   00000040   BD19               OUT     0x29, R17
    547          OCR1BL=0x00;
   \   00000042   BD18               OUT     0x28, R17
    548          
    549          
    550          // External Interrupt(s) initialization
    551          // INT0: Off
    552          // INT1: Off
    553          // Interrupt on any change on pins PCINT0-7: Off
    554          //GIMSK=0x00;
    555          //MCUCR=0x00;
    556          
    557          SET(MCUCR,0); RES(MCUCR,1);//ПРЕРЫВАНИЕ ПО ИЗМЕНЕНИЮ УРОВНЯ INT0
   \   00000044   B705               IN      R16, 0x35
   \   00000046   6001               ORI     R16, 0x01
   \   00000048   BF05               OUT     0x35, R16
   \   0000004A   B705               IN      R16, 0x35
   \   0000004C   7F0D               ANDI    R16, 0xFD
   \   0000004E   BF05               OUT     0x35, R16
    558          SET(GICR,6);//РАЗРЕШАЕМ ПРЕРЫВАНИЕ INT0
   \   00000050   B70B               IN      R16, 0x3B
   \   00000052   6400               ORI     R16, 0x40
   \   00000054   BF0B               OUT     0x3B, R16
    559          
    560          
    561          
    562          
    563          // Analog Comparator initialization
    564          // Analog Comparator: Off
    565          // Analog Comparator Input Capture by Timer/Counter 1: Off
    566          ACSR=0x80;
   \   00000056   E800               LDI     R16, 128
   \   00000058   B908               OUT     0x08, R16
    567          //DIDR=0x00;
    568          
    569          } 
   \   0000005A   9508               RET
   \   0000005C                      REQUIRE _A_DDRD
   \   0000005C                      REQUIRE _A_PORTD
   \   0000005C                      REQUIRE _A_DDRB
   \   0000005C                      REQUIRE _A_PORTB
   \   0000005C                      REQUIRE _A_DDRC
   \   0000005C                      REQUIRE _A_PORTC
   \   0000005C                      REQUIRE _A_TIMSK
   \   0000005C                      REQUIRE _A_TCNT0
   \   0000005C                      REQUIRE _A_OCR1A
   \   0000005C                      REQUIRE _A_OCR1B
   \   0000005C                      REQUIRE _A_TCCR1A
   \   0000005C                      REQUIRE _A_TCCR1B
   \   0000005C                      REQUIRE _A_TIFR
   \   0000005C                      REQUIRE _A_TCNT1
   \   0000005C                      REQUIRE _A_ICR1
   \   0000005C                      REQUIRE _A_MCUCR
   \   0000005C                      REQUIRE _A_GICR
   \   0000005C                      REQUIRE _A_ACSR
    570          //************************************************************************
    571           
    572          

   \                                 In  segment CODE, align 2, keep-with-next
    573          void diag()
   \                     ??diag:
    574          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
    575            if (!u) return;
   \   00000002   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_306:
   \   00000004   F1E9               BREQ    ??CrossCallReturnLabel_26
    576            uchar sym = USART_GetChar(); //читаем буфер
   \   00000006   ....               RCALL   ??USART_GetChar
   \   00000008   2F90               MOV     R25, R16
    577            if (sym=='0') { pr=1;  rprintfStr("-------------- vkluchen kratkiy viviod -------------");  ent;   }
   \   0000000A   3300               CPI     R16, 48
   \   0000000C   F449               BRNE    ??diag_1
   \   0000000E   E001               LDI     R16, 1
   \   00000010   9300....           STS     pr, R16
   \   00000014   ....               LDI     R16, LOW(`?<Constant "-------------- vkluch...">`)
   \   00000016   ....               LDI     R17, (`?<Constant "-------------- vkluch...">`) >> 8
   \   00000018   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_65:
   \   0000001A   F0E9               BREQ    ??diag_2
   \   0000001C   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_107:
   \   0000001E   C01B               RJMP    ??diag_2
    578          
    579            if (sym=='e') {
   \                     ??diag_1:
   \   00000020   3605               CPI     R16, 101
   \   00000022   F4B9               BRNE    ??diag_3
    580              ent;rprintfStr(" ==  EEPROM read == ");ent;
   \   00000024   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_106:
   \   00000026   ....               LDI     R16, LOW(`?<Constant " ==  EEPROM read == ">`)
   \   00000028   ....               LDI     R17, (`?<Constant " ==  EEPROM read == ">`) >> 8
   \   0000002A   ....               RCALL   ??rprintfStr
   \   0000002C   ....               RCALL   ??Subroutine17_2
    581              for (uchar i=0; i<MAXEEP-1; i++) { 
   \                     ??CrossCallReturnLabel_25:
   \   0000002E   E080               LDI     R24, 0
    582                rprintfFloat(4, i );   rprintfStr(" > ");
   \                     ??diag_4:
   \   00000030   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_412:
   \   00000032   E004               LDI     R16, 4
   \   00000034   ....               RCALL   ??rprintfFloat
   \   00000036   ....               LDI     R16, LOW(`?<Constant " > ">`)
   \   00000038   ....               LDI     R17, (`?<Constant " > ">`) >> 8
   \   0000003A   ....               RCALL   ??rprintfStr
    583                 rprintfFloat(9, k[i] ); ent;
   \   0000003C   ....               RCALL   ?Subroutine46
    584                                                }
   \                     ??CrossCallReturnLabel_72:
   \   0000003E   ....               LDI     R20, LOW(k)
   \   00000040   ....               LDI     R21, (k) >> 8
   \   00000042   0D40               ADD     R20, R0
   \   00000044   1D51               ADC     R21, R1
   \   00000046   ....               RCALL   __eeget16_16
   \   00000048   ....               RCALL   ??Subroutine17_0
   \                     ??CrossCallReturnLabel_22:
   \   0000004A   9583               INC     R24
   \   0000004C   3787               CPI     R24, 119
   \   0000004E   F418               BRCC    ??diag_2
   \   00000050   CFEF               RJMP    ??diag_4
    585                          }
    586            
    587            if (sym) {             //если что-то приняли, то 
   \                     ??diag_3:
   \   00000052   2300               TST     R16
   \   00000054   F0A9               BREQ    ??CrossCallReturnLabel_26
    588                rprintfStr(" get: ");
   \                     ??diag_2:
   \   00000056   ....               LDI     R16, LOW(`?<Constant " get: ">`)
   \   00000058   ....               LDI     R17, (`?<Constant " get: ">`) >> 8
   \   0000005A   ....               RCALL   ??rprintfStr
    589                USART_SendChar(sym); 
   \   0000005C   2F09               MOV     R16, R25
   \   0000005E   ....               RCALL   ??USART_SendChar
    590          
    591                if (mode==1) rprintfStr("  regim  no source5 >");  
   \   00000060   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_318:
   \   00000062   F419               BRNE    ??diag_5
   \   00000064   ....               LDI     R16, LOW(`?<Constant "  regim  no source5 >">`)
   \   00000066   ....               LDI     R17, (`?<Constant "  regim  no source5 >">`) >> 8
   \   00000068   ....               RCALL   ??rprintfStr
    592          if (write==1) rprintfStr("  regim  PROGRAMMING !!  READY >");  
   \                     ??diag_5:
   \   0000006A   9100....           LDS     R16, `write`
   \   0000006E   3001               CPI     R16, 1
   \   00000070   F419               BRNE    ??diag_6
   \   00000072   ....               LDI     R16, LOW(`?<Constant "  regim  PROGRAMMING ...">`)
   \   00000074   ....               LDI     R17, (`?<Constant "  regim  PROGRAMMING ...">`) >> 8
   \   00000076   C002               RJMP    ??diag_7
    593          else rprintfStr("  regim  normal  READY >");  
   \                     ??diag_6:
   \   00000078   ....               LDI     R16, LOW(`?<Constant "  regim  normal  READY >">`)
   \   0000007A   ....               LDI     R17, (`?<Constant "  regim  normal  READY >">`) >> 8
   \                     ??diag_7:
   \   0000007C   ....               RCALL   ??rprintfStr
    594          
    595          
    596             
    597          
    598                 ent;
   \   0000007E   ....               RCALL   ??Subroutine17_2
    599               
    600             
    601                     }
    602          }
   \                     ??CrossCallReturnLabel_26:
   \   00000080   ....               RJMP    ?Subroutine137
    603          
F:\Dulov\RemoteAMP\usart.c
      1          #include "main.h"
      2          
      3          //однобайтный буфер

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          volatile unsigned char usartRxBuf = 0;
   \                     usartRxBuf:
   \   00000000                      DS8 1
      5          
      6          
      7          //инициализация usart`a

   \                                 In  segment CODE, align 2, keep-with-next
      8          void USART_Init()
   \                     ??USART_Init:
      9          {
     10            UBRRH = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   BD00               OUT     0x20, R16
     11            UBRRL = ((F_CPU/9600UL)-1)/16;//    26;//78; //скорость обмена 9600 бод
   \   00000004   E109               LDI     R16, 25
   \   00000006   B909               OUT     0x09, R16
     12            UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме, разр приема, разр передачи.
   \   00000008   E908               LDI     R16, 152
   \   0000000A   B90A               OUT     0x0A, R16
     13            UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разрядов
   \   0000000C   E806               LDI     R16, 134
   \   0000000E   BD00               OUT     0x20, R16
     14          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_UBRRH
   \   00000012                      REQUIRE _A_UBRRL
   \   00000012                      REQUIRE _A_UCSRB
     15          
     16          //отправка символа по usart`у

   \                                 In  segment CODE, align 2, keep-with-next
     17          void USART_SendChar(unsigned char sym)
   \                     ??USART_SendChar:
     18          {
     19            if (!u) return;
   \   00000000   9110....           LDS     R17, u
   \   00000004   2311               TST     R17
   \   00000006   F019               BREQ    ??USART_SendChar_1
     20            while(!(UCSRA & (1<<UDRE)));
   \                     ??USART_SendChar_2:
   \   00000008   9B5D               SBIS    0x0B, 0x05
   \   0000000A   CFFE               RJMP    ??USART_SendChar_2
     21            UDR = sym;
   \   0000000C   B90C               OUT     0x0C, R16
     22          }
   \                     ??USART_SendChar_1:
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_UCSRA
   \   00000010                      REQUIRE _A_UDR
     23          
     24          //чтение буфера

   \                                 In  segment CODE, align 2, keep-with-next
     25          __monitor unsigned char USART_GetChar(void)
   \                     ??USART_GetChar:
     26          {
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
     27            if (!u) return 0;
   \   00000004   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_307:
   \   00000006   F411               BRNE    ??USART_GetChar_1
   \   00000008   E000               LDI     R16, 0
   \   0000000A   C005               RJMP    ??USART_GetChar_2
     28            unsigned char tmp = usartRxBuf;
   \                     ??USART_GetChar_1:
   \   0000000C   9100....           LDS     R16, usartRxBuf
     29            usartRxBuf = 0;
   \   00000010   E010               LDI     R17, 0
   \   00000012   9310....           STS     usartRxBuf, R17
     30            return tmp;  
   \                     ??USART_GetChar_2:
   \   00000016   BF2F               OUT     0x3F, R18
   \   00000018   9508               RET
     31          }
     32          
     33          //прием символа по usart`у в буфер
     34          #pragma vector=USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     35          __interrupt void usart_rxc_my(void) 
   \                     ??usart_rxc_my:
     36          {
   \   00000000   930A               ST      -Y, R16
     37            usartRxBuf = UDR; 
   \   00000002   B10C               IN      R16, 0x0C
   \   00000004   9300....           STS     usartRxBuf, R16
     38          } 
   \   00000008   ....               RJMP    ?Subroutine134
   \   0000000A                      REQUIRE _A_UDR
     39          
     40          // *** rprintfStr ***
     41          // prints a null-terminated string stored in RAM

   \                                 In  segment CODE, align 2, keep-with-next
     42          void rprintfStr(char str[])
   \                     ??rprintfStr:
     43          {        
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01D8               MOVW    R27:R26, R17:R16
     44              if (!u) return;
   \   00000004   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_308:
   \   00000006   F041               BREQ    ??rprintfStr_1
     45          	// send a string stored in RAM
     46          	// check to make sure we have a good pointer
     47          	if (!str) return;
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F411               BRNE    ??rprintfStr_2
   \   0000000E   C004               RJMP    ??rprintfStr_1
     48          
     49          	// print the string until a null-terminator
     50          	while (*str)
     51          		USART_SendChar(*str++);
   \                     ??rprintfStr_3:
   \   00000010   ....               RCALL   ??USART_SendChar
   \                     ??rprintfStr_2:
   \   00000012   910D               LD      R16, X+
   \   00000014   2300               TST     R16
   \   00000016   F7E1               BRNE    ??rprintfStr_3
     52          }
   \                     ??rprintfStr_1:
   \   00000018   E0E4               LDI     R30, 4
   \   0000001A   ....               RJMP    ?EPILOGUE_B4_L09
     53          
     54          // *** rprintfFloat ***Pascal Stang - Copyright (C) 2000-2002
     55          // floating-point print

   \                                 In  segment CODE, align 2, keep-with-next
     56          void rprintfFloat(char numDigits, double x)
   \                     ??rprintfFloat:
     57          {
   \   00000000   ....               RCALL   ?PROLOGUE12_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002   2EB0               MOV     R11, R16
   \   00000004   012A               MOVW    R5:R4, R21:R20
   \   00000006   013B               MOVW    R7:R6, R23:R22
     58              if (!u) return;
   \   00000008   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_309:
   \   0000000A   F409               BRNE    $+2+2
   \   0000000C   C04D               RJMP    ??rprintfFloat_1
     59          	unsigned char firstplace = 0;
   \   0000000E   24AA               CLR     R10
     60          	unsigned char negative;
     61          	unsigned char i, digit;
     62          	double place = 1.0;
   \   00000010   E080               LDI     R24, 0
   \   00000012   E090               LDI     R25, 0
   \   00000014   E8A0               LDI     R26, 128
   \   00000016   E3BF               LDI     R27, 63
     63          	
     64          	// save sign
     65          	negative = (x<0);
   \   00000018   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_98:
   \   0000001A   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_88:
   \   0000001C   2488               CLR     R8
   \   0000001E   F408               BRCC    ??rprintfFloat_2
   \   00000020   9483               INC     R8
     66          	// convert to absolute value
     67          	x = (x>0)?(x):(-x);
   \                     ??rprintfFloat_2:
   \   00000022   E041               LDI     R20, 1
   \   00000024   ....               RCALL   ?F_CMP_GE_L04
   \   00000026   F008               BRCS    ??rprintfFloat_3
   \   00000028   267A               EOR     R7, R26
     68          	
     69          	// find starting digit place
     70          	for(i=0; i<15; i++)
   \                     ??rprintfFloat_3:
   \   0000002A   E00F               LDI     R16, 15
   \   0000002C   2E90               MOV     R9, R16
     71          	{
     72          		if((x/place) < 10.0)
   \                     ??rprintfFloat_4:
   \   0000002E   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_89:
   \   00000030   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_99:
   \   00000032   ....               RCALL   ?F_CMP_LT_L04
   \   00000034   F038               BRCS    ??rprintfFloat_5
     73          			break;
     74          		else
     75          			place *= 10.0;
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   019D               MOVW    R19:R18, R27:R26
   \   0000003A   ....               RCALL   ?F_MUL_L04
   \   0000003C   01C8               MOVW    R25:R24, R17:R16
   \   0000003E   01D9               MOVW    R27:R26, R19:R18
     76          	}
   \   00000040   949A               DEC     R9
   \   00000042   F7A9               BRNE    ??rprintfFloat_4
     77          	// print polarity character
     78          	if(negative)
   \                     ??rprintfFloat_5:
   \   00000044   FA80               BST     R8, 0
   \   00000046   F416               BRTC    ??rprintfFloat_6
     79          		USART_SendChar('-');
   \   00000048   E20D               LDI     R16, 45
   \   0000004A   C001               RJMP    ??rprintfFloat_7
     80          	else
     81          		USART_SendChar('+');
   \                     ??rprintfFloat_6:
   \   0000004C   E20B               LDI     R16, 43
   \                     ??rprintfFloat_7:
   \   0000004E   ....               RCALL   ??USART_SendChar
     82          
     83          	// print digits
     84          	for(i=0; i<numDigits; i++)
   \   00000050   2499               CLR     R9
   \   00000052   C017               RJMP    ??rprintfFloat_8
     85          	{
     86          		digit = (unsigned char)(x/place);
     87          
     88          		if(digit | firstplace | (place == 1.0))
     89          		{
     90          			firstplace = 1;
     91          			USART_SendChar(digit+0x30);
     92          		}
     93          		else
     94          			USART_SendChar(' ');
   \                     ??rprintfFloat_9:
   \   00000054   E200               LDI     R16, 32
   \                     ??rprintfFloat_10:
   \   00000056   ....               RCALL   ??USART_SendChar
     95          		
     96          		if(place == 1.0)
   \   00000058   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_73:
   \   0000005A   F411               BRNE    ??rprintfFloat_11
     97          		{
     98          			USART_SendChar('.');
   \   0000005C   E20E               LDI     R16, 46
   \   0000005E   ....               RCALL   ??USART_SendChar
     99          		}
    100          		
    101          		x -= (digit*place);
   \                     ??rprintfFloat_11:
   \   00000060   2D08               MOV     R16, R8
   \   00000062   E010               LDI     R17, 0
   \   00000064   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_338:
   \   00000066   01AC               MOVW    R21:R20, R25:R24
   \   00000068   01BD               MOVW    R23:R22, R27:R26
   \   0000006A   ....               RCALL   ?F_MUL_L04
   \   0000006C   ....               RCALL   ??Subroutine147_0
   \                     ??CrossCallReturnLabel_408:
   \   0000006E   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_224:
   \   00000070   ....               RCALL   ?F_SUB_L04
   \   00000072   ....               RCALL   ?Subroutine49
    102          		place /= 10.0;
   \                     ??CrossCallReturnLabel_81:
   \   00000074   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_100:
   \   00000076   018C               MOVW    R17:R16, R25:R24
   \   00000078   019D               MOVW    R19:R18, R27:R26
   \   0000007A   ....               RCALL   ?F_DIV_L04
   \   0000007C   01C8               MOVW    R25:R24, R17:R16
   \   0000007E   01D9               MOVW    R27:R26, R19:R18
   \   00000080   9493               INC     R9
   \                     ??rprintfFloat_8:
   \   00000082   149B               CP      R9, R11
   \   00000084   F488               BRCC    ??rprintfFloat_1
   \   00000086   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_90:
   \   00000088   ....               RCALL   ?F2SL_L04
   \   0000008A   2E80               MOV     R8, R16
   \   0000008C   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_74:
   \   0000008E   F411               BRNE    ??rprintfFloat_12
   \   00000090   E001               LDI     R16, 1
   \   00000092   C001               RJMP    ??rprintfFloat_13
   \                     ??rprintfFloat_12:
   \   00000094   E000               LDI     R16, 0
   \                     ??rprintfFloat_13:
   \   00000096   2D18               MOV     R17, R8
   \   00000098   291A               OR      R17, R10
   \   0000009A   2B10               OR      R17, R16
   \   0000009C   F2D9               BREQ    ??rprintfFloat_9
   \   0000009E   24AA               CLR     R10
   \   000000A0   94A3               INC     R10
   \   000000A2   2D08               MOV     R16, R8
   \   000000A4   5D00               SUBI    R16, 208
   \   000000A6   CFD7               RJMP    ??rprintfFloat_10
    103          	}
    104          }
   \                     ??rprintfFloat_1:
   \   000000A8   E0EC               LDI     R30, 12
   \   000000AA   ....               RJMP    ?EPILOGUE_B12_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   E260               LDI     R22, 32
   \   00000006   E471               LDI     R23, 65
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   01AC               MOVW    R21:R20, R25:R24
   \   00000002   01BD               MOVW    R23:R22, R27:R26
   \   00000004   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_228:
   \   00000006   ....               RJMP    ?F_DIV_L04

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   E040               LDI     R20, 0
   \   00000002   E050               LDI     R21, 0
   \   00000004   E860               LDI     R22, 128
   \   00000006   E37F               LDI     R23, 63
   \   00000008   018C               MOVW    R17:R16, R25:R24
   \   0000000A   019D               MOVW    R19:R18, R27:R26
   \   0000000C   ....               RJMP    ?F_CMP_EQ_L04

   \                                 In  segment INTVEC, offset 0x2, root
   \                     `??funINT0_vect??INTVEC 2`:
   \   00000002   ....               RJMP    ??funINT0_vect

   \                                 In  segment INTVEC, offset 0x10, root
   \                     `??funTIMER1_OVF_vect??INTVEC 16`:
   \   00000010   ....               RJMP    ??funTIMER1_OVF_vect

   \                                 In  segment INTVEC, offset 0x16, root
   \                     `??usart_rxc_my??INTVEC 22`:
   \   00000016   ....               RJMP    ??usart_rxc_my

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " error ct big =">`:
   \   00000000   65207272726F       DC8 " error ct big ="
   \              632020746962
   \              2067003D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / abslen= ">>`:
   \   00000000   2020202F6261       DC8 "  / abslen= "
   \              6C736E65203D
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / len= ">>`:
   \   00000000   2020202F656C       DC8 "  / len= "
   \              3D6E0020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  ">>`:
   \   00000000   202000             DC8 "  "

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  / cod1= ">>`:
   \   00000000   2020202F6F63       DC8 "  / cod1= "
   \              3164203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " / cod2= ">>`:
   \   00000000   2F206320646F       DC8 " / cod2= "
   \              3D320020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " / cod3= ">>`:
   \   00000000   2F206320646F       DC8 " / cod3= "
   \              3D330020    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/ minlen=">>`:
   \   00000000   202F696D6C6E       DC8 "/ minlen="
   \              6E65003D    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  /   cod1= ">>`:
   \   00000000   2020202F2020       DC8 "  /   cod1= "
   \              6F633164203D
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/   cod2= ">>`:
   \   00000000   202F20206F63       DC8 "/   cod2= "
   \              3264203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "/   cod3= ">>`:
   \   00000000   202F20206F63       DC8 "/   cod3= "
   \              3364203D00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "OFF>adr=">>`:
   \   00000000   464F3E466461       DC8 "OFF>adr="
   \              3D7200      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ON>adr=">>`:
   \   00000000   4E4F613E7264       DC8 "ON>adr="
   \              003D        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "normal>no find co`:
   \   00000000   6F6E6D726C61       DC8 "normal>no find command "
   \              6E3E206F6966
   \              646E63206D6F
   \              616D646E0020

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "normal>command fi`:
   \   00000000   6F6E6D726C61       DC8 "normal>command find  adr= "
   \              633E6D6F616D
   \              646E66206E69
   \              206461207264
   \              203D00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "write ..">>`:
   \   00000000   727774692065       DC8 "write .."
   \              2E2E00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "OK !   ">>`:
   \   00000000   4B4F21202020       DC8 "OK !   "
   \              0020        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "-------------- vk`:
   \   00000000   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000008   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 20H, 76H
   \              7620        
   \   00000010   6C6B63756568       DC8 6BH, 6CH, 75H, 63H, 68H, 65H, 6EH, 20H
   \              206E        
   \   00000018   726B7461696B       DC8 6BH, 72H, 61H, 74H, 6BH, 69H, 79H, 20H
   \              2079        
   \   00000020   69766976646F       DC8 76H, 69H, 76H, 69H, 6FH, 64H, 20H, 2DH
   \              2D20        
   \   00000028   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000030   2D2D2D2D00         DC8 2DH, 2DH, 2DH, 2DH, 0

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " ==  EEPROM read `:
   \   00000000   3D20203D4520       DC8 " ==  EEPROM read == "
   \              50454F52204D
   \              657264613D20
   \              203D00      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " > ">>`:
   \   00000000   3E200020           DC8 " > "

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " get: ">>`:
   \   00000000   67207465203A       DC8 " get: "
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  no sourc`:
   \   00000000   202065726967       DC8 "  regim  no source5 >"
   \              206D6E20206F
   \              6F7372756563
   \              2035003E    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  PROGRAMM`:
   \   00000000   202065726967       DC8 "  regim  PROGRAMMING !!  READY >"
   \              206D50204F52
   \              52474D41494D
   \              474E21202021
   \              522041455944
   \              3E2000      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "  regim  normal  `:
   \   00000000   202065726967       DC8 "  regim  normal  READY >"
   \              206D6E20726F
   \              616D206C5220
   \              414559443E20
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Calibr>`:
   \   00000000   157C0000           DD 5500

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for port>`:
   \   00000000   FF                 DC8 255

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for tON>`:
   \   00000000   4E20               DC16 20000

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for lastsel>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sel>`:
   \   00000000   01                 DC8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " error ct big =">`:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for <Constant " error ct big =">`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / abslen= ">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "  / abslen= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / len= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "  / len= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  ">`:
   \   00000000                      DS8 3
   \   00000003                      REQUIRE `?<Initializer for <Constant "  ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  / cod1= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "  / cod1= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " / cod2= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant " / cod2= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " / cod3= ">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant " / cod3= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/ minlen=">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "/ minlen=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  /   cod1= ">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "  /   cod1= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/   cod2= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "/   cod2= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "/   cod3= ">`:
   \   00000000                      DS8 11
   \   0000000B                      REQUIRE `?<Initializer for <Constant "/   cod3= ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "OFF>adr=">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "OFF>adr=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "ON>adr=">`:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for <Constant "ON>adr=">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "normal>no find command ">`:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for <Constant "normal>no find co`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "normal>command find  ...">`:
   \   00000000                      DS8 27
   \   0000001B                      REQUIRE `?<Initializer for <Constant "normal>command fi`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "write ..">`:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for <Constant "write ..">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "OK !   ">`:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for <Constant "OK !   ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "-------------- vkluch...">`:
   \   00000000                      DS8 53
   \   00000035                      REQUIRE `?<Initializer for <Constant "-------------- vk`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " ==  EEPROM read == ">`:
   \   00000000                      DS8 21
   \   00000015                      REQUIRE `?<Initializer for <Constant " ==  EEPROM read `

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " > ">`:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for <Constant " > ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " get: ">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant " get: ">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  no source5 >">`:
   \   00000000                      DS8 22
   \   00000016                      REQUIRE `?<Initializer for <Constant "  regim  no sourc`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  PROGRAMMING ...">`:
   \   00000000                      DS8 33
   \   00000021                      REQUIRE `?<Initializer for <Constant "  regim  PROGRAMM`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "  regim  normal  READY >">`:
   \   00000000                      DS8 25
   \   00000019                      REQUIRE `?<Initializer for <Constant "  regim  normal  `

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   ResetT1()
      0      2   ResetT2()
      0      2   USART_GetChar()
      0      2   USART_Init()
      0      2   USART_SendChar(unsigned char)
      0      2   WorkT1()
      4      4   WorkT2()
      2      4   analizCOD()
      2      4   diag()
        2      2   -> USART_GetChar()
        2      2   -> USART_SendChar(unsigned char)
        2      2   -> rprintfFloat(char, double)
        2      2   -> rprintfStr(char *)
      0      2   du_init()
     16      4   du_main(unsigned char)
       16      2   -> USART_SendChar(unsigned char)
       16      2   -> du_init()
       16      2   -> rprintfFloat(char, double)
       16      2   -> rprintfStr(char *)
      2      2   funINT0_vect()
      2      2   funTIMER1_OVF_vect()
      0      2   getadr()
      0      4   gro(unsigned char)
      0      2   iniPORTS()
      0      2   iniT1(unsigned long)
        0      2   -> ResetT1()
      0      2   iniT2(unsigned long)
        0      2   -> ResetT2()
      0      2   led_all(bool)
      1      4   main()
        1      2   -> USART_Init()
        1      2   -> USART_SendChar(unsigned char)
        1      2   -> analizCOD()
        1      2   -> diag()
        1      2   -> du_main(unsigned char)
        1      2   -> getadr()
        1      2   -> iniPORTS()
        1      2   -> led_all(bool)
        1      2   -> normal(unsigned char)
        1      2   -> programming(unsigned char)
        1      2   -> resOUT()
        1      2   -> rprintfFloat(char, double)
        1      2   -> rprintfStr(char *)
        1      2   -> source()
        1      2   -> writeCOD()
      0      4   migINI(unsigned char, unsigned char, bool)
        0      2   -> iniT2(unsigned long)
      1      4   migWORK()
        1      2   -> WorkT2()
        1      2   -> iniT2(unsigned long)
      1      4   normal(unsigned char)
        1      2   -> USART_SendChar(unsigned char)
        1      2   -> WorkT1()
        1      2   -> analizCOD()
        1      2   -> iniT1(unsigned long)
        1      2   -> migINI(unsigned char, unsigned char, bool)
        1      2   -> migWORK()
        1      2   -> pult()
        1      2   -> rprintfFloat(char, double)
        1      2   -> rprintfStr(char *)
      1      2   programming(unsigned char)
        1      2   -> getadr()
        1      2   -> led_all(bool)
        1      2   -> writeCOD()
      0      2   pult()
        0      2   -> source()
      0      2   resOUT()
      0      2   resled()
     12      4   rprintfFloat(char, double)
       12      2   -> USART_SendChar(unsigned char)
      4      2   rprintfStr(char *)
        4      2   -> USART_SendChar(unsigned char)
      0      2   source()
        0      2   -> migINI(unsigned char, unsigned char, bool)
        0      2   -> resOUT()
        0      2   -> resled()
      2      2   usart_rxc_my()
      1      4   writeCOD()
        1      2   -> USART_SendChar(unsigned char)
        1      2   -> getadr()
        1      2   -> led_all(bool)
        1      2   -> rprintfStr(char *)


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant "  ">
      13  ?<Constant "  /   cod1= ">
      13  ?<Constant "  / abslen= ">
      11  ?<Constant "  / cod1= ">
      10  ?<Constant "  / len= ">
      33  ?<Constant "  regim  PROGRAMMING ...">
      22  ?<Constant "  regim  no source5 >">
      25  ?<Constant "  regim  normal  READY >">
      10  ?<Constant " / cod2= ">
      10  ?<Constant " / cod3= ">
      21  ?<Constant " ==  EEPROM read == ">
       4  ?<Constant " > ">
      16  ?<Constant " error ct big =">
       7  ?<Constant " get: ">
      53  ?<Constant "-------------- vkluch...">
      11  ?<Constant "/   cod2= ">
      11  ?<Constant "/   cod3= ">
      10  ?<Constant "/ minlen=">
       9  ?<Constant "OFF>adr=">
       8  ?<Constant "OK !   ">
       8  ?<Constant "ON>adr=">
      27  ?<Constant "normal>command find  ...">
      24  ?<Constant "normal>no find command ">
       9  ?<Constant "write ..">
       3  ?<Initializer for <Constant "  ">>
      13  ?<Initializer for <Constant "  /   cod1= ">>
      13  ?<Initializer for <Constant "  / abslen= ">>
      11  ?<Initializer for <Constant "  / cod1= ">>
      10  ?<Initializer for <Constant "  / len= ">>
      33  ?<Initializer for <Constant "  regim  PROGRAMM
      22  ?<Initializer for <Constant "  regim  no sourc
      25  ?<Initializer for <Constant "  regim  normal
      10  ?<Initializer for <Constant " / cod2= ">>
      10  ?<Initializer for <Constant " / cod3= ">>
      21  ?<Initializer for <Constant " ==  EEPROM read
       4  ?<Initializer for <Constant " > ">>
      16  ?<Initializer for <Constant " error ct big =">
       7  ?<Initializer for <Constant " get: ">>
      53  ?<Initializer for <Constant "-------------- vk
      11  ?<Initializer for <Constant "/   cod2= ">>
      11  ?<Initializer for <Constant "/   cod3= ">>
      10  ?<Initializer for <Constant "/ minlen=">>
       9  ?<Initializer for <Constant "OFF>adr=">>
       8  ?<Initializer for <Constant "OK !   ">>
       8  ?<Initializer for <Constant "ON>adr=">>
      27  ?<Initializer for <Constant "normal>command fi
      24  ?<Initializer for <Constant "normal>no find co
       9  ?<Initializer for <Constant "write ..">>
       4  ?<Initializer for Calibr>
       1  ?<Initializer for lastsel>
       1  ?<Initializer for port>
       1  ?<Initializer for sel>
       2  ?<Initializer for tON>
       2  ??Subroutine138_0
      10  ??Subroutine139_0
       8  ??Subroutine140_0
       6  ??Subroutine141_0
       6  ??Subroutine142_0
       4  ??Subroutine143_0
       4  ??Subroutine144_0
      18  ??Subroutine145_0
       6  ??Subroutine146_0
       6  ??Subroutine147_0
       2  ??funINT0_vect??INTVEC 2
       2  ??funTIMER1_OVF_vect??INTVEC 16
       2  ??usart_rxc_my??INTVEC 22
      12  ?Subroutine0
       6  ?Subroutine1
      14  ?Subroutine10
       6  ?Subroutine100
      10  ?Subroutine101
       6  ?Subroutine102
       6  ?Subroutine103
       6  ?Subroutine104
       6  ?Subroutine105
       8  ?Subroutine106
       8  ?Subroutine107
       6  ?Subroutine109
      22  ?Subroutine11
      10  ?Subroutine110
      10  ?Subroutine111
       6  ?Subroutine112
       2  ?Subroutine113
       6  ?Subroutine114
       6  ?Subroutine115
       6  ?Subroutine117
      20  ?Subroutine118
      22  ?Subroutine119
       8  ?Subroutine12
       6  ?Subroutine120
       2  ?Subroutine121
       6  ?Subroutine122
      20  ?Subroutine123
       4  ?Subroutine124
       6  ?Subroutine125
       6  ?Subroutine126
       6  ?Subroutine127
       6  ?Subroutine128
       6  ?Subroutine129
       8  ?Subroutine13
       4  ?Subroutine130
       4  ?Subroutine131
       4  ?Subroutine132
       4  ?Subroutine133
       4  ?Subroutine134
       4  ?Subroutine135
       4  ?Subroutine136
       4  ?Subroutine137
       8  ?Subroutine14
       8  ?Subroutine15
       4  ?Subroutine16
      24  ?Subroutine17
       4  ?Subroutine18
       6  ?Subroutine19
       8  ?Subroutine2
       6  ?Subroutine20
       2  ?Subroutine21
      10  ?Subroutine22
       6  ?Subroutine23
       8  ?Subroutine24
       8  ?Subroutine26
       8  ?Subroutine27
       4  ?Subroutine28
       8  ?Subroutine29
      14  ?Subroutine3
       4  ?Subroutine30
       4  ?Subroutine31
      12  ?Subroutine34
       2  ?Subroutine35
       8  ?Subroutine36
       2  ?Subroutine37
       4  ?Subroutine39
      10  ?Subroutine4
       6  ?Subroutine40
       2  ?Subroutine41
       6  ?Subroutine42
       6  ?Subroutine43
       4  ?Subroutine44
       6  ?Subroutine46
      14  ?Subroutine47
       6  ?Subroutine48
       6  ?Subroutine49
       4  ?Subroutine5
      12  ?Subroutine50
       6  ?Subroutine51
       4  ?Subroutine52
       8  ?Subroutine53
       8  ?Subroutine54
       4  ?Subroutine55
      10  ?Subroutine56
      10  ?Subroutine57
      10  ?Subroutine59
       6  ?Subroutine6
       6  ?Subroutine61
       4  ?Subroutine62
       4  ?Subroutine63
       4  ?Subroutine64
       4  ?Subroutine65
       4  ?Subroutine66
       2  ?Subroutine67
       2  ?Subroutine68
       4  ?Subroutine69
       4  ?Subroutine7
       8  ?Subroutine70
      20  ?Subroutine73
      20  ?Subroutine74
       4  ?Subroutine75
       6  ?Subroutine76
       2  ?Subroutine77
      12  ?Subroutine78
      20  ?Subroutine79
       2  ?Subroutine8
       8  ?Subroutine80
       6  ?Subroutine81
       4  ?Subroutine82
      20  ?Subroutine84
      12  ?Subroutine85
       6  ?Subroutine87
       6  ?Subroutine89
       6  ?Subroutine9
       6  ?Subroutine90
       2  ?Subroutine91
      10  ?Subroutine92
      10  ?Subroutine93
       6  ?Subroutine94
       2  ?Subroutine95
       6  ?Subroutine96
       6  ?Subroutine97
       4  ?Subroutine98
       6  ?Subroutine99
       4  Calibr
      20  ResetT1()
      14  ResetT2()
       4  T1
       1  T1end
       4  T1max
       2  T1x
       4  T2
       1  T2end
       4  T2max
       2  T2x
       4  T3
       1  T3end
       4  T3max
       2  T3x
      26  USART_GetChar()
      18  USART_Init()
      16  USART_SendChar(unsigned char)
      70  WorkT1()
      82  WorkT2()
       1  _A_ACSR
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_GICR
       2  _A_ICR1
       1  _A_MCUCR
       2  _A_OCR1A
       2  _A_OCR1B
       1  _A_PIND
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TCNT0
       2  _A_TCNT1
       1  _A_TIFR
       1  _A_TIMSK
       1  _A_UBRRH
       1  _A_UBRRL
       1  _A_UCSRA
       1  _A_UCSRB
       1  _A_UDR
      74  analizCOD()
       1  aoff
       1  big
       2  cod1
       2  cod2
       2  cod3
       2  cod4
       1  cod_ok
       1  ct
       2  ctvol
     130  diag()
     100  dim1
     100  dim2
      24  du_init()
     806  du_main(unsigned char)
       1  fmode
      46  funINT0_vect()
       8  funTIMER1_OVF_vect()
       1  get
     216  getadr()
      90  gro(unsigned char)
       1  gro1
       1  gro2
       1  ini
      92  iniPORTS()
       8  iniT1(unsigned long)
       8  iniT2(unsigned long)
       1  intok
       1  inv
     240  k
       1  lastsel
      30  led_all(bool)
     200  len
     456  main()
      58  migINI(unsigned char, unsigned char, bool)
      84  migWORK()
       2  minimallen
       1  mode
       1  modegro
       1  mute
     790  normal(unsigned char)
       1  on
       1  onok
       1  perepoln
       1  port
       1  pr
      78  programming(unsigned char)
      14  pult()
       1  pultadr
       1  raz
       1  razct
       1  regaoff
      14  resOUT()
      10  resled()
       1  rez
     172  rprintfFloat(char, double)
      28  rprintfStr(char *)
       1  sel
       1  sost
      78  source()
       4  sst
       1  t1
       1  t2
       2  tON
       1  tekfunc
       1  til
       2  timerzad
       1  u
       1  usartRxBuf
      10  usart_rxc_my()
       1  vol
       1  write
      80  writeCOD()
       1  zader
      12  -- Other

 
    28 bytes in segment ABSOLUTE
 4 618 bytes in segment CODE
   242 bytes in segment EEPROM_N
    12 bytes in segment INITTAB
     6 bytes in segment INTVEC
   377 bytes in segment NEAR_I
   377 bytes in segment NEAR_ID
   482 bytes in segment NEAR_Z
 
 4 995 bytes of CODE  memory (+ 18 bytes shared)
   859 bytes of DATA  memory (+ 28 bytes shared)
   242 bytes of XDATA memory

Errors: none
Warnings: none
